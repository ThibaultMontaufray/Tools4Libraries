<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Cadru.Core</name>
    </assembly>
    <members>
        <member name="T:Cadru.Collections.ComparisonComparer`1">
            <summary>
            Represents a <see cref="T:System.Collections.Generic.Comparer`1"/> which uses a 
            <see cref="T:System.Comparison`1"/> as the basis for the comparison.
            </summary>
            <typeparam name="T">The type of the objects to compare.</typeparam>
        </member>
        <member name="M:Cadru.Collections.ComparisonComparer`1.#ctor(System.Comparison{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Cadru.Collections.ComparisonComparer`1"/>
            class.
            </summary>
            <param name="comparison">The comparison to use.</param>
        </member>
        <member name="M:Cadru.Collections.ComparisonComparer`1.Create(System.Comparison{`0})">
            <summary>
            Creates a comparer by using the specified comparison.
            </summary>
            <param name="comparison">The comparison to use.</param>
            <returns>The new comparer.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="comparison"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Cadru.Collections.ComparisonComparer`1.Compare(`0,`0)">
            <summary>
            Performs a comparison of two objects of the same type and returns
            a value indicating whether one object is less than, equal to, or 
            greater than the other.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>
            A signed integer that indicates the relative values of x and y, as
            shown in the following table.
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Condition</term>
            </listheader>
            <item>
            <term>Less than zero</term>
            <description>
            <paramref name="x"/> is less than <paramref name="y"/>.
            </description>
            </item>
            <item>
            <term>Zero</term>
            <description>
            <paramref name="x"/> equals <paramref name="y"/>.
            </description>
            </item>
            <item>
            <term>Greater than zero</term>
            <description>
            <paramref name="x"/> is greater than <paramref name="y"/>.
            </description>
            </item>
            </list>
            </returns>
        </member>
        <member name="T:Cadru.Collections.NameValuePair`1">
            <summary>Defines a key/value pair that can be set or retrieved.</summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Cadru.Collections.NameValuePair`1.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:Cadru.Collections.NameValuePair`1"/> 
            structure with the specified key.</summary>
            <param name="key">The object defined in each key/value pair.</param>
        </member>
        <member name="M:Cadru.Collections.NameValuePair`1.op_Equality(Cadru.Collections.NameValuePair{`0},Cadru.Collections.NameValuePair{`0})">
            <summary>
            Determines whether two specified instances of <see cref="T:Cadru.Collections.NameValuePair`1"/> are equal.
            </summary>
            <param name="left">An <see cref="T:Cadru.Collections.NameValuePair`1"/>.</param>
            <param name="right">An <see cref="T:Cadru.Collections.NameValuePair`1"/>.</param>
            <returns><see langword="true"/> if left and right represent the same server; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Cadru.Collections.NameValuePair`1.op_Inequality(Cadru.Collections.NameValuePair{`0},Cadru.Collections.NameValuePair{`0})">
            <summary>
            Determines whether two specified instances of <see cref="T:Cadru.Collections.NameValuePair`1"/> are not equal.
            </summary>
            <param name="left">An <see cref="T:Cadru.Collections.NameValuePair`1"/>.</param>
            <param name="right">An <see cref="T:Cadru.Collections.NameValuePair`1"/>.</param>
            <returns><see langword="true"/> if left and right do note represent the same server;
            otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Cadru.Collections.NameValuePair`1.Equals(Cadru.Collections.NameValuePair{`0})">
            <summary>
            Returns a value indicating whether this instance is equal to the specified <see cref="T:Cadru.Collections.NameValuePair`1"/> instance.
            </summary>
            <param name="other">An <see cref="T:Cadru.Collections.NameValuePair`1"/> instance to compare to this instance.</param>
            <returns><see langword="true"/> if the other parameter equals the value of this instance; otherwise, <see langword="false"/>. </returns>
            <remarks>This method implements the <see cref="T:System.IEquatable`1"/> interface and performs slightly
            better than the <see cref="M:Cadru.Collections.NameValuePair`1.Equals(System.Object)"/> method because it does not have to convert
            the other parameter to an object.</remarks>
        </member>
        <member name="M:Cadru.Collections.NameValuePair`1.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified object.
            </summary>
            <param name="obj">An object to compare to this instance.</param>
            <returns><see langword="true"/> if value is an instance of <see cref="T:Cadru.Collections.NameValuePair`1"/>
            equals the value of this instance; otherwise, <see langword="false"/>. </returns>
        </member>
        <member name="M:Cadru.Collections.NameValuePair`1.GetHashCode">
            <summary>
            Returns the hash code for this instance. 
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:Cadru.Collections.NameValuePair`1.ToString">
            <summary>Returns a string representation of the <see cref="T:System.Collections.Generic.KeyValuePair`2" />, using the string representations of the key and value.</summary>
            <returns>A string representation of the <see cref="T:System.Collections.Generic.KeyValuePair`2" />, which includes the string representations of the key and value.</returns>
        </member>
        <member name="P:Cadru.Collections.NameValuePair`1.Key">
            <summary>Gets the key in the key/value pair.</summary>
            <value>A <see cref="T:System.String"/> that is the key of the <see cref="T:Cadru.Collections.NameValuePair`1"/>. </value>
        </member>
        <member name="P:Cadru.Collections.NameValuePair`1.Value">
            <summary>Gets the value in the key/value pair.</summary>
            <value>A <see cref="T:System.Collections.Generic.IList`1"/> that is the value of the <see cref="T:Cadru.Collections.NameValuePair`1"/>. </value>
        </member>
        <member name="T:Cadru.Collections.DateComparer">
            <summary>
            Compares two dates or string date representations for equivalence,
            ignoring case, in date order.
            </summary>
        </member>
        <member name="M:Cadru.Collections.DateComparer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cadru.Collections.DateComparer"/> class using the
            <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/> of the current thread.
            </summary>
            <remarks>When the <see cref="T:Cadru.Collections.DateComparer"/> instance is created using
            this constructor, the <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/> of the
            current thread is saved. Comparison procedures use the saved
            culture to determine the sort order and casing rules; therefore,
            string comparisons might have different results depending on the
            culture. For more information on culture-specific comparisons, see
            the <see cref="N:System.Globalization"/> namespace and
            <see href="http://msdn.microsoft.com/en-us/library/vstudio/h6270d0z(v=vs.100).aspx">Encoding and Localization</see>.
            </remarks>
        </member>
        <member name="M:Cadru.Collections.DateComparer.#ctor(System.Globalization.CultureInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Cadru.Collections.DateComparer"/> class using
            the specified <see cref="T:System.Globalization.CultureInfo"/>.
            </summary>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/>
            to use for the new <see cref="T:Cadru.Collections.DateComparer"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="culture"/> is a <see langword="null"/>.</exception>
            <rermarks>Comparison procedures use the specified <see cref="T:System.Globalization.CultureInfo"/> to determine
            the sort order and casing rules. String comparisons might have different results
            depending on the culture. For more information on culture-specific comparisons, see
            the <see cref="N:System.Globalization"/> namespace and
            <see href="http://msdn.microsoft.com/en-us/library/vstudio/h6270d0z(v=vs.100).aspx">Encoding and Localization</see>.
            </rermarks>
        </member>
        <member name="M:Cadru.Collections.DateComparer.Compare(System.DateTime,System.DateTime)">
            <summary>
            Performs a comparison of two <see cref="T:System.DateTime"/> objects and returns a value
            indicating whether one is less than, equal to or greater than
            the other.
            </summary>
            <param name="x">The first <see cref="T:System.DateTime"/> to compare.</param>
            <param name="y">The second <see cref="T:System.DateTime"/> to compare.</param>
            <returns>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Condition</term>
            </listheader>
            <item>
            <term>Less than zero</term>
            <description>
            <paramref name="x"/> is less than <paramref name="y"/>.
            </description>
            </item>
            <item>
            <term>Zero</term>
            <description>
            <paramref name="x"/> equals <paramref name="y"/>.
            </description>
            </item>
            <item>
            <term>Greater than zero</term>
            <description>
            <paramref name="x"/> is greater than <paramref name="y"/>.
            </description>
            </item>
            </list></returns>
        </member>
        <member name="M:Cadru.Collections.DateComparer.Compare(System.Object,System.Object)">
            <summary>
            Performs a comparison of two objects and returns a value
            indicating whether one is less than, equal to or greater than
            the other.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Condition</term>
            </listheader>
            <item>
            <term>Less than zero</term>
            <description>
            <paramref name="x"/> is less than <paramref name="y"/>.
            </description>
            </item>
            <item>
            <term>Zero</term>
            <description>
            <paramref name="x"/> equals <paramref name="y"/>.
            </description>
            </item>
            <item>
            <term>Greater than zero</term>
            <description>
            <paramref name="x"/> is greater than <paramref name="y"/>.
            </description>
            </item>
            </list></returns>
        </member>
        <member name="M:Cadru.Collections.DateComparer.Compare(System.String,System.String)">
            <summary>
            Performs a comparison of two <see cref="T:System.String"/> objects and returns a value
            indicating whether one is less than, equal to or greater than
            the other.
            </summary>
            <param name="x">The first <see cref="T:System.String"/> to compare.</param>
            <param name="y">The second <see cref="T:System.String"/> to compare.</param>
            <returns>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Condition</term>
            </listheader>
            <item>
            <term>Less than zero</term>
            <description>
            <paramref name="x"/> is less than <paramref name="y"/>.
            </description>
            </item>
            <item>
            <term>Zero</term>
            <description>
            <paramref name="x"/> equals <paramref name="y"/>.
            </description>
            </item>
            <item>
            <term>Greater than zero</term>
            <description>
            <paramref name="x"/> is greater than <paramref name="y"/>.
            </description>
            </item>
            </list></returns>
            <remarks>The strings should be a valid date time format.</remarks>
        </member>
        <member name="M:Cadru.Collections.DateComparer.Equals(System.DateTime,System.DateTime)">
            <summary>
            Returns a value indicating whether two instances of <see cref="T:System.DateTime"/> are equal.
            </summary>
            <param name="x">The first <see cref="T:System.DateTime"/> to compare.</param>
            <param name="y">The second <see cref="T:System.DateTime"/> to compare.</param>
            <returns><see langword="true"/> if the two <see cref="T:System.DateTime"/> values are equal;
            otherwise, <see langword="false"/>. </returns>
        </member>
        <member name="M:Cadru.Collections.DateComparer.Equals(System.String,System.String)">
            <summary>
            Returns a value indicating whether two instances of <see cref="T:System.DateTime"/> are equal.
            </summary>
            <param name="x">The first <see cref="T:System.DateTime"/> to compare.</param>
            <param name="y">The second <see cref="T:System.DateTime"/> to compare.</param>
            <returns><see langword="true"/> if the two <see cref="T:System.DateTime"/> values are equal;
            otherwise, <see langword="false"/>. </returns>
        </member>
        <member name="M:Cadru.Collections.DateComparer.GetHashCode(System.DateTime)">
            <summary>
            Returns a hash code for the specified <see cref="T:System.DateTime"/>.
            </summary>
            <param name="obj">The <see cref="T:System.DateTime"/> for which a hash code is to be
            returned.</param>
            <returns>A hash code for the specified <see cref="T:System.DateTime"/>.</returns>
            <exception cref="T:System.ArgumentNullException">The type of <paramref name="obj"/> is a
            reference type and <paramref name="obj"/> is a <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Cadru.Collections.DateComparer.GetHashCode(System.Object)">
            <summary>
            Returns a hash code for the specified object.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> for which a hash code is to be
            returned.</param>
            <returns>A hash code for the specified <see cref="T:System.Object"/>.</returns>
            <exception cref="T:System.ArgumentNullException">The type of <paramref name="obj"/> is a
            reference type and <paramref name="obj"/> is a <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Cadru.Collections.DateComparer.GetHashCode(System.String)">
            <summary>
            Returns a hash code for the specified string.
            </summary>
            <param name="obj">The string for which a hash code is to be
            returned.</param>
            <returns>A hash code for the specified string.</returns>
            <exception cref="T:System.ArgumentNullException">The type of <paramref name="obj"/> is a
            reference type and <paramref name="obj"/> is a <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Cadru.Collections.DateComparer.System#Collections#IEqualityComparer#Equals(System.Object,System.Object)">
            <summary>
            Returns a value indicating whether two instances of objects are equal.
            </summary>
            <param name="x">The first <see cref="T:System.Object"/> to compare.</param>
            <param name="y">The second <see cref="T:System.Object"/> to compare.</param>
            <returns><see langword="true"/> if the two <see cref="T:System.Object"/> values are equal;
            otherwise, <see langword="false"/>. </returns>
        </member>
        <member name="P:Cadru.Collections.DateComparer.Default">
            <summary>
            Represents an instance of <see cref="T:Cadru.Collections.DateComparer"/> that is
            associated with the <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/>.
            </summary>
            <value>The default <see cref="T:Cadru.Collections.DateComparer"/></value>
            <remarks>Comparison procedures use the
            <see cref="P:System.Threading.Thread.CurrentCulture"/> of the current thread to
            determine the sort order and casing rules. String comparisons
            might have different results depending on the culture. For more
            information on culture-specific comparisons, see the
            <see cref="N:System.Globalization"/> namespace and
            <see href="http://msdn.microsoft.com/en-us/library/vstudio/h6270d0z(v=vs.100).aspx">Encoding and Localization</see>.
            </remarks>
        </member>
        <member name="P:Cadru.Collections.DateComparer.DefaultInvariant">
            <summary>
            Represents an instance of <see cref="T:Cadru.Collections.DateComparer"/> that is
            associated with the
            <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/> and that is always
            available.
            </summary>
            <value>An instance of <see cref="T:Cadru.Collections.DateComparer"/> that is
            associated with <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>.
            </value>
            <remarks>Comparison procedures use the
            <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/> to determine the sort
            order and casing rules. String comparisons might have different
            results depending on the culture. For more information on
            culture-specific comparisons, see the
            <see cref="N:System.Globalization"/> namespace and
            <see href="http://msdn.microsoft.com/en-us/library/vstudio/h6270d0z(v=vs.100).aspx">Encoding and Localization</see>.
            </remarks>
        </member>
        <member name="T:Cadru.Collections.LogicalStringComparer">
            <summary>
            Compares two strings for equivalence, ignoring case, in natural numeric order.
            </summary>
            <remarks>
            <para>Windows implements natural numeric sorting inside the 
            <see href="http://msdn.microsoft.com/en-us/library/windows/desktop/bb759947(v=vs.85).aspx">StrCmpLogicalW</see>
            function in <seealso href="http://msdn.microsoft.com/en-us/library/windows/desktop/bb759844(v=vs.85).aspx">Shell Lightweight Utility Functions</seealso>.
            This function is available on Windows XP or higher.</para>
            <para>This implementation is not 100% compatible with 
            <see href="http://msdn.microsoft.com/en-us/library/windows/desktop/bb759947(v=vs.85).aspx">StrCmpLogicalW</see>. 
            It gives the same results for the numeric sort, with the exception of strings containing non-alphanumeric ASCII
            characters. The code relies on the current locale to find the order of the characters.</para>
            <para>The code here will order files that start with special characters based on the code table order. 
            Windows Explorer uses another order.</para>
            <para><example>Windows Explorer: (1.txt, [1.txt, _1.txt, =1.txt</example></para>
            <para><example>this code: (1.txt, =1.txt, [1.txt, _1.txt</example></para>
            </remarks>
        </member>
        <member name="M:Cadru.Collections.LogicalStringComparer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cadru.Collections.LogicalStringComparer"/> class using the
            <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/> of the current thread.
            </summary>
            <remarks>When the <see cref="T:Cadru.Collections.LogicalStringComparer"/> instance is created using
            this constructor, the <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/> of the
            current thread is saved. Comparison procedures use the saved
            culture to determine the sort order and casing rules; therefore,
            string comparisons might have different results depending on the
            culture. For more information on culture-specific comparisons, see
            the <see cref="N:System.Globalization"/> namespace and
            <see href="http://msdn.microsoft.com/en-us/library/vstudio/h6270d0z(v=vs.100).aspx">Encoding and Localization</see>.
            </remarks>
        </member>
        <member name="M:Cadru.Collections.LogicalStringComparer.#ctor(System.Globalization.CultureInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Cadru.Collections.LogicalStringComparer"/> class using
            the specified <see cref="T:System.Globalization.CultureInfo"/>.
            </summary>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/>
            to use for the new <see cref="T:Cadru.Collections.LogicalStringComparer"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="culture"/> is a <see langword="null"/>.</exception>
            <rermarks>Comparison procedures use the specified <see cref="T:System.Globalization.CultureInfo"/> to determine
            the sort order and casing rules. String comparisons might have different results
            depending on the culture. For more information on culture-specific comparisons, see
            the <see cref="N:System.Globalization"/> namespace and
            <see href="http://msdn.microsoft.com/en-us/library/vstudio/h6270d0z(v=vs.100).aspx">Encoding and Localization</see>.
            </rermarks>
        </member>
        <member name="M:Cadru.Collections.LogicalStringComparer.System#Collections#IEqualityComparer#Equals(System.Object,System.Object)">
            <summary>
            Returns a value indicating whether two string instances are equal.
            </summary>
            <param name="x">The first string to compare.</param>
            <param name="y">The second string to compare.</param>
            <returns><see langword="true"/> if the two string values are equal;
            otherwise, <see langword="false"/>. </returns>
        </member>
        <member name="M:Cadru.Collections.LogicalStringComparer.Compare(System.Object,System.Object)">
            <summary>
            Performs a case-insensitive comparison of two string objects and returns a value
            indicating whether one is less than, equal to or greater than the other.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Condition</term>
            </listheader>
            <item>
            <term>Less than zero</term>
            <description><paramref name="x"/> is less than <paramref name="y"/>, with casing ignored.</description>
            </item>
            <item>
            <term>Zero</term>
            <description><paramref name="x"/> equals <paramref name="y"/>, with casing ignored.</description>
            </item>
            <item>
            <term>Greater than zero</term>
            <description><paramref name="x"/> is greater than <paramref name="y"/>, with casing ignored.</description>
            </item>
            </list></returns>
        </member>
        <member name="M:Cadru.Collections.LogicalStringComparer.Compare(System.String,System.String)">
            <summary>
            Performs a case-insensitive comparison of two strings and returns a value
            indicating whether one is less than, equal to or greater than the other.
            </summary>
            <param name="x">The first string to compare.</param>
            <param name="y">The second string to compare.</param>
            <returns>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Condition</term>
            </listheader>
            <item>
            <term>Less than zero</term>
            <description><paramref name="x"/> is less than <paramref name="y"/>, with casing ignored.</description>
            </item>
            <item>
            <term>Zero</term>
            <description><paramref name="x"/> equals <paramref name="y"/>, with casing ignored.</description>
            </item>
            <item>
            <term>Greater than zero</term>
            <description><paramref name="x"/> is greater than <paramref name="y"/>, with casing ignored.</description>
            </item>
            </list></returns>
        </member>
        <member name="M:Cadru.Collections.LogicalStringComparer.Equals(System.String,System.String)">
            <summary>
            Returns a value indicating whether two instances of string are equal.
            </summary>
            <param name="x">The first string to compare.</param>
            <param name="y">The second string to compare.</param>
            <returns><see langword="true"/> if the two string values are equal;
            otherwise, <see langword="false"/>. </returns>
        </member>
        <member name="M:Cadru.Collections.LogicalStringComparer.GetHashCode(System.Object)">
            <summary>
            Returns a hash code for the specified object.
            </summary>
            <param name="obj">The Object for which a hash code is to be
            returned.</param>
            <returns>A hash code for the specified object.</returns>
            <exception cref="T:System.ArgumentNullException">The type of <paramref name="obj"/> is a
            reference type and <paramref name="obj"/> is a <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Cadru.Collections.LogicalStringComparer.GetHashCode(System.String)">
            <summary>
            Returns a hash code for the specified string.
            </summary>
            <param name="obj">The string for which a hash code is to be
            returned.</param>
            <returns>A hash code for the specified string.</returns>
            <exception cref="T:System.ArgumentNullException">The type of <paramref name="obj"/> is a
            reference type and <paramref name="obj"/> is a <see langword="null"/>.
            </exception>
        </member>
        <member name="P:Cadru.Collections.LogicalStringComparer.Default">
            <summary>
            Represents an instance of <see cref="T:Cadru.Collections.LogicalStringComparer"/> that is
            associated with the <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/>.
            </summary>
            <value>The default <see cref="T:Cadru.Collections.LogicalStringComparer"/></value>
            <remarks>Comparison procedures use the
            <see cref="P:System.Threading.Thread.CurrentCulture"/> of the current thread to
            determine the sort order and casing rules. String comparisons
            might have different results depending on the culture. For more
            information on culture-specific comparisons, see the
            <see cref="N:System.Globalization"/> namespace and
            <see href="http://msdn.microsoft.com/en-us/library/vstudio/h6270d0z(v=vs.100).aspx">Encoding and Localization</see>.
            </remarks>
        </member>
        <member name="P:Cadru.Collections.LogicalStringComparer.DefaultInvariant">
            <summary>
            Represents an instance of <see cref="T:Cadru.Collections.LogicalStringComparer"/> that is
            associated with the
            <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/> and that is always
            available.
            </summary>
            <value>An instance of <see cref="T:Cadru.Collections.LogicalStringComparer"/> that is
            associated with <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>.
            </value>
            <remarks>Comparison procedures use the
            <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/> to determine the sort
            order and casing rules. String comparisons might have different
            results depending on the culture. For more information on
            culture-specific comparisons, see the
            <see cref="N:System.Globalization"/> namespace and
            <see href="http://msdn.microsoft.com/en-us/library/vstudio/h6270d0z(v=vs.100).aspx">Encoding and Localization</see>.
            </remarks>
        </member>
        <member name="T:Cadru.Collections.QueryStringParametersDictionary">
            <summary>
            Represents a collection of query string parameters and values.
            </summary>
        </member>
        <member name="M:Cadru.Collections.QueryStringParametersDictionary.ToQueryString">
            <summary>
            Returns a string representation of the query parameters and
            values.
            </summary>
            <returns>A string representation of the query parameters and
            values.</returns>
        </member>
        <member name="T:Cadru.Comb">
            <summary>
            Represents a combined globally unique identifier (GUID) and time stamp.
            </summary>
            <remarks>A COMB is a 128-bit integer (16 bytes) that can be used across
            all computers and networks wherever a unique identifier is required. 
            Such an identifier has a low probability of being duplicated.
            </remarks>
        </member>
        <member name="F:Cadru.Comb.Empty">
            <summary>
            A read-only instance of <see cref="T:Cadru.Comb"/> structure whose value
            is all zeros.
            </summary>
            <remarks>You can compare a <see cref="T:Cadru.Comb"/> with the value of the
            <see cref="F:Cadru.Comb.Empty"/> field to determine whether a 
            <see cref="T:Cadru.Comb"/> is non-zero.</remarks>
        </member>
        <member name="F:Cadru.Comb.MaxDate">
            <summary>
            Represents the greatest possible date and time value which can be
            held by a <see cref="T:Cadru.Comb"/>.
            </summary>
        </member>
        <member name="F:Cadru.Comb.MinDate">
            <summary>
            Represents the earliest possible date and time value which can be
            held by a <see cref="T:Cadru.Comb"/>.
            </summary>
        </member>
        <member name="M:Cadru.Comb.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Cadru.Comb"/> structure 
            using the specified array of bytes.
            </summary>
            <param name="array">A 16 element byte array containing values with
            which to initialize the <see cref="T:Cadru.Comb"/>.</param>
        </member>
        <member name="M:Cadru.Comb.#ctor(System.Int32,System.Int16,System.Int16,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Cadru.Comb"/> structure using the specified integers and bytes.
            </summary>
            <param name="a">The first 4 bytes of the <see cref="T:Cadru.Comb"/>.</param>
            <param name="b">The next 2 bytes of the <see cref="T:Cadru.Comb"/>.</param>
            <param name="c">The next 2 bytes of the <see cref="T:Cadru.Comb"/>.</param>
            <param name="d">The remaining 8 bytes of the <see cref="T:Cadru.Comb"/>.</param>
        </member>
        <member name="M:Cadru.Comb.#ctor(System.Int32,System.Int16,System.Int16,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:Cadru.Comb"/> structure using the specified integers and bytes.
            </summary>
            <param name="a">The first 4 bytes of the <see cref="T:Cadru.Comb"/>.</param>
            <param name="b">The next 2 bytes of the <see cref="T:Cadru.Comb"/>.</param>
            <param name="c">The next 2 bytes of the <see cref="T:Cadru.Comb"/>.</param>
            <param name="d">The next byte of the <see cref="T:Cadru.Comb"/>.</param>
            <param name="e">The next byte of the <see cref="T:Cadru.Comb"/>.</param>
            <param name="f">The next byte of the <see cref="T:Cadru.Comb"/>.</param>
            <param name="g">The next byte of the <see cref="T:Cadru.Comb"/>.</param>
            <param name="h">The next byte of the <see cref="T:Cadru.Comb"/>.</param>
            <param name="i">The next byte of the <see cref="T:Cadru.Comb"/>.</param>
            <param name="j">The next byte of the <see cref="T:Cadru.Comb"/>.</param>
            <param name="k">The next byte of the <see cref="T:Cadru.Comb"/>.</param>
        </member>
        <member name="M:Cadru.Comb.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Cadru.Comb"/> structure using 
            the specified integers and byte array.
            </summary>
            <param name="value"><para>A string that contains a 
            <see cref="T:Cadru.Comb"/> in the following format:</para>
            <para>hexadecimal digits are arranged in groups of 
            8, 4, 4, 4, and 12 digits with hyphens between the 
            groups. The <see cref="T:Cadru.Comb"/> can optionally be 
            enclosed in matching braces.</para>
            <para>For example: 
            dddddddd-dddd-dddd-dddd-dddddddddddd or
            {dddddddd-dddd-dddd-dddd-dddddddddddd}.</para>
            <para>Alternatively, the following format is permitted: 
            {0xdddddddd,0xdddd, 0xdddd,{0xdd},{0xdd},{0xdd},{0xdd},{0xdd},{0xdd},{0xdd},{0xdd}}, 
            where d is a hexadecimal digit. If this format is used, all brackets and commas 
            indicated are required, and all numbers must be prefixed with "0x" as shown. 
            Fewer hexadecimal digits than shown can be used, but not more.</para> 
            </param>
        </member>
        <member name="M:Cadru.Comb.op_Equality(Cadru.Comb,Cadru.Comb)">
            <summary>
            Determines whether two specified <see cref="T:Cadru.Comb"/>
            objects are equal.
            </summary>
            <param name="left">The first object to compare.</param>
            <param name="right">The second object to compare.</param>
            <returns>
            <see langword="true"/> if both objects are equal; 
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Comb.op_GreaterThan(Cadru.Comb,Cadru.Comb)">
            <summary>
            Determines whether one <see cref="T:Cadru.Comb"/> instance is greater than
            the other.
            </summary>
            <param name="left">The first object to compare.</param>
            <param name="right">The second object to compare.</param>
            <returns>
            <see langword="true"/> if the first instance is greater than the second; 
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Comb.op_Inequality(Cadru.Comb,Cadru.Comb)">
            <summary>
            Determines whether two specified <see cref="T:Cadru.Comb"/>
            objects are not equal.
            </summary>
            <param name="left">The first object to compare.</param>
            <param name="right">The second object to compare.</param>
            <returns>
            <see langword="true"/> if both objects are not equal; 
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Comb.op_LessThan(Cadru.Comb,Cadru.Comb)">
            <summary>
            Determines whether one <see cref="T:Cadru.Comb"/> instance is less than
            the other.
            </summary>
            <param name="left">The first object to compare.</param>
            <param name="right">The second object to compare.</param>
            <returns>
            <see langword="true"/> if the first instance is less than the second; 
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Comb.NewComb">
            <summary>
            Initializes a new instance of the <see cref="T:Cadru.Comb"/> structure.
            </summary>
            <returns>A new <see cref="T:Cadru.Comb"/> object.</returns>
            <remarks>The date and time value contained by the new 
            <see cref="T:Cadru.Comb"/> is the current date and time
            as represented by <see cref="P:System.DateTimeOffset.UtcNow"/>.</remarks>
        </member>
        <member name="M:Cadru.Comb.NewComb(System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:Cadru.Comb"/> structure.
            </summary>
            <param name="date">A date and time value to be contained by the
            new <see cref="T:Cadru.Comb"/>.</param>
            <returns>A new <see cref="T:Cadru.Comb"/> object.</returns>
        </member>
        <member name="M:Cadru.Comb.NewComb(System.DateTimeOffset)">
            <summary>
            Initializes a new instance of the <see cref="T:Cadru.Comb"/> structure.
            </summary>
            <param name="date">A date and time value to be contained by the
            new <see cref="T:Cadru.Comb"/>.</param>
            <returns>A new <see cref="T:Cadru.Comb"/> object.</returns>
        </member>
        <member name="M:Cadru.Comb.Parse(System.String)">
            <summary>
            Converts the string representation of a COMB to the equivalent
            <see cref="T:Cadru.Comb"/> structure.
            </summary>
            <param name="input">The string to convert.</param>
            <returns>A structure that contains the value that was parsed.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="input"/> is
            <see langword="null"/>.</exception>
            <exception cref="T:System.FormatException"><paramref name="input"/> is not 
            in a recognized format.</exception>
            <remarks>
            <para>The Parse method converts the string representation of a
            COMB to a <see cref="T:Cadru.Comb"/> value. This method can convert 
            strings in any of the five formats produced by the 
            <see cref="M:Cadru.Comb.ToString(System.String)"/> and 
            <see cref="M:Cadru.Comb.ToString(System.String,System.IFormatProvider)"/> methods, as shown
            in the following table.</para>
            <list type="table">
            <listheader>
            <term>Specifier</term>
            <term>Description</term>
            <term>Format</term>
            </listheader>
            <item>
            <term>N</term>
            <description>32 digits</description>
            <description>00000000000000000000000000000000</description>
            </item>
            <item>
            <term>D</term>
            <description>32 digits separated by hyphens</description>
            <description>00000000-0000-0000-0000-000000000000</description>
            </item>
            <item>
            <term>B</term>
            <description>32 digits separated by hyphens, enclosed in
            braces</description>
            <description>{00000000-0000-0000-0000-000000000000}</description>
            </item>
            <item>
            <term>P</term>
            <description>32 digits separated by hyphens, enclosed in
            parentheses</description>
            <description>(00000000-0000-0000-0000-000000000000)</description>
            </item>
            <item>
            <term>X</term>
            <description>Four hexadecimal values enclosed in braces, 
            where the fourth value is a subset of eight hexadecimal values that
            is also enclosed in braces</description>
            <description>{0x00000000,0x0000,0x0000,{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}}</description>
            </item>
            </list>
            <para>The method throws a <see cref="T:System.FormatException"/> if it is 
            unable to successfully parse the string. Some of the reasons why 
            this might occur include:</para>
            <list type="bullet">
            <item>
            <description><paramref name="input"/> contains characters that are
            not part of the hexadecimal character set.</description>
            </item>
            <item>
            <description><paramref name="input"/> has too many or too few 
            numeric characters.</description>
            </item>
            <item>
            <description><paramref name="input"/> has too many or too few of
            the non-numeric characters appropriate for a particular format.
            </description>
            </item> 
            <item>
            <description><paramref name="input"/> is not in one of the 
            formats recognized by the <see cref="M:Cadru.Comb.ToString"/> method and 
            listed in the previous table.</description>
            </item> 
            </list>
            <para>Use the <see cref="M:Cadru.Comb.TryParse(System.String,Cadru.Comb@)"/> method to catch any
            unsuccessful parse operations without having to handle an 
            exception.</para>
            </remarks>
        </member>
        <member name="M:Cadru.Comb.ParseExact(System.String,System.String)">
            <summary>
            Converts the string representation of a COMB to the equivalent
            <see cref="T:Cadru.Comb"/> structure, provided that the string is in the
            specified format.
            </summary>
            <param name="input">The string to convert.</param>
            <param name="format">One of the following specifiers that indicates
            the exact format to use when interpreting input: "N", "D", "B", "P", 
            or "X".</param>
            <returns>A structure that contains the value that was parsed.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="input"/> or
            <paramref name="format"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.FormatException"><paramref name="input"/> is not 
            in the format specified by <paramref name="format"/>.</exception>
            <remarks>
            <para>The following table shows the accepted format specifiers
            for the <paramref name="format"/> parameter. "0" represents a 
            digit; hyphens ("-"), braces ("{", "}"), and parentheses
            ("(", ")") appear as shown.</para>
            <list type="table">
            <listheader>
            <term>Specifier</term>
            <term>Format of return value</term>
            </listheader>
            <item>
            <term>N</term>
            <description><para>32 digits:</para>
            <para>00000000000000000000000000000000</para></description>
            </item>
            <item>
            <term>D</term>
            <description><para>32 digits separated by hyphens:</para>
            <para>00000000-0000-0000-0000-000000000000</para></description>
            </item>
            <item>
            <term>B</term>
            <description><para>32 digits separated by hyphens, enclosed in
            braces:</para>
            <para>{00000000-0000-0000-0000-000000000000}</para></description>
            </item>
            <item>
            <term>P</term>
            <description><para>32 digits separated by hyphens, enclosed in
            parentheses:</para>
            <para>(00000000-0000-0000-0000-000000000000)</para></description>
            </item>
            <item>
            <term>X</term>
            <description><para>Four hexadecimal values enclosed in braces, 
            where the fourth value is a subset of eight hexadecimal values that
            is also enclosed in braces:</para>
            <para>{0x00000000,0x0000,0x0000,{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}}</para></description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:Cadru.Comb.TryParse(System.String,Cadru.Comb@)">
            <summary>
            Converts the string representation of a COMB to the equivalent
            <see cref="T:Cadru.Comb"/> structure.
            </summary>
            <param name="input">The string to convert.</param>
            <param name="result">The structure that will contain the parsed
            value. If the method returns <see langword="true"/>, 
            <paramref name="result"/> contains a valid <see cref="T:Cadru.Comb"/>.
            If the method returns <see langword="false"/>, 
            <paramref name="result"/> equals <see cref="F:Cadru.Comb.Empty"/>.</param>
            <returns><see langword="true"/> if the parse operation was
            successful; otherwise, <see langword="false"/>.</returns>
            <remarks>
            <para>This method is like the <see cref="M:Cadru.Comb.Parse(System.String)"/> method, except
            that instead of returning the parsed COMB, it returns 
            <see langword="false"/> if <paramref name="input"/> is 
            <see langword="null"/> or not in a recognized format and doesn't
            throw an exception. It converts strings in any of the five formats
            produced by the <see cref="M:Cadru.Comb.ToString(System.String)"/> and 
            <see cref="M:Cadru.Comb.ToString(System.String,System.IFormatProvider)"/> methods, as shown
            in the following table.</para>
            <list type="table">
            <listheader>
            <term>Specifier</term>
            <term>Description</term>
            <term>Format</term>
            </listheader>
            <item>
            <term>N</term>
            <description>32 digits</description>
            <description>00000000000000000000000000000000</description>
            </item>
            <item>
            <term>D</term>
            <description>32 digits separated by hyphens</description>
            <description>00000000-0000-0000-0000-000000000000</description>
            </item>
            <item>
            <term>B</term>
            <description>32 digits separated by hyphens, enclosed in
            braces</description>
            <description>{00000000-0000-0000-0000-000000000000}</description>
            </item>
            <item>
            <term>P</term>
            <description>32 digits separated by hyphens, enclosed in
            parentheses</description>
            <description>(00000000-0000-0000-0000-000000000000)</description>
            </item>
            <item>
            <term>X</term>
            <description>Four hexadecimal values enclosed in braces, 
            where the fourth value is a subset of eight hexadecimal values that
            is also enclosed in braces</description>
            <description>{0x00000000,0x0000,0x0000,{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}}</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:Cadru.Comb.TryParseExact(System.String,System.String,Cadru.Comb@)">
            <summary>
            Converts the string representation of a COMB to the equivalent
            <see cref="T:Cadru.Comb"/> structure provided that the string is in the
            specified format.
            </summary>
            <param name="input">The string to convert.</param>
            <param name="format">One of the following specifiers that indicates
            the exact format to use when interpreting input: "N", "D", "B", "P", 
            or "X".</param>
            <param name="result">The structure that will contain the parsed
            value. If the method returns <see langword="true"/>, 
            <paramref name="result"/> contains a valid <see cref="T:Cadru.Comb"/>.
            If the method returns <see langword="false"/>, 
            <paramref name="result"/> equals <see cref="F:Cadru.Comb.Empty"/>.</param>
            <returns><see langword="true"/> if the parse operation was
            successful; otherwise, <see langword="false"/>.</returns>
            <remarks>
            <para>This method returns <see langword="false"/> if 
            <paramref name="input"/> is <see langword="null"/> or not in a
            recognized format and doesn't throw an exception.</para>
            <para>The following table shows the accepted format specifiers
            for the <paramref name="format"/> parameter. "0" represents a 
            digit; hyphens ("-"), braces ("{", "}"), and parentheses
            ("(", ")") appear as shown.</para>
            <list type="table">
            <listheader>
            <term>Specifier</term>
            <term>Format of return value</term>
            </listheader>
            <item>
            <term>N</term>
            <description><para>32 digits:</para>
            <para>00000000000000000000000000000000</para></description>
            </item>
            <item>
            <term>D</term>
            <description><para>32 digits separated by hyphens:</para>
            <para>00000000-0000-0000-0000-000000000000</para></description>
            </item>
            <item>
            <term>B</term>
            <description><para>32 digits separated by hyphens, enclosed in
            braces:</para>
            <para>{00000000-0000-0000-0000-000000000000}</para></description>
            </item>
            <item>
            <term>P</term>
            <description><para>32 digits separated by hyphens, enclosed in
            parentheses:</para>
            <para>(00000000-0000-0000-0000-000000000000)</para></description>
            </item>
            <item>
            <term>X</term>
            <description><para>Four hexadecimal values enclosed in braces, 
            where the fourth value is a subset of eight hexadecimal values that
            is also enclosed in braces:</para>
            <para>{0x00000000,0x0000,0x0000,{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}}</para></description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:Cadru.Comb.CompareTo(System.Object)">
            <summary>
            Compares this instance to a specified object and returns an
            indication of their relative values.
            </summary>
            <param name="obj">A boxed object to compare, or <see langword="null"/>.</param>
            <returns>
            A signed number indicating the relative values of this instance and the 
            <paramref name="obj"/> parameter.
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Condition</term>
            </listheader>
            <item>
            <term>Less than zero</term>
            <description>
            This instance is less than <paramref name="obj"/>.
            </description>
            </item>
            <item>
            <term>Zero</term>
            <description>
            This instance is the same as <paramref name="obj"/>.
            </description>
            </item>
            <item>
            <term>Greater than zero</term>
            <description>
            This instance is greater than <paramref name="obj"/>,
            or <paramref name="obj"/> is <see langword="null"/>.
            </description>
            </item>
            </list>
            </returns>
            <exception cref="T:System.ArgumentException">
            <paramref name="obj"/> is not a <see cref="T:Cadru.Comb"/>.
            </exception>
        </member>
        <member name="M:Cadru.Comb.CompareTo(Cadru.Comb)">
            <summary>
            Compares the value of this instance to a specified 
            <see cref="T:Cadru.UnixTimestamp"/> value and returns an integer that 
            indicates whether this instance is earlier than, the same as, or
            later than the specified <see cref="T:Cadru.UnixTimestamp"/> value. 
            </summary>
            <param name="other">The object to compare to the current instance.</param>
            <returns>
            A signed number indicating the relative values of this instance and the 
            <paramref name="other"/> parameter.
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Condition</term>
            </listheader>
            <item>
            <term>Less than zero</term>
            <description>
            This instance is earlier than <paramref name="other"/>.
            </description>
            </item>
            <item>
            <term>Zero</term>
            <description>
            This instance is the same as <paramref name="other"/>.
            </description>
            </item>
            <item>
            <term>Greater than zero</term>
            <description>
            This instance is later than <paramref name="other"/>.
            </description>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:Cadru.Comb.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified object.
            </summary>
            <param name="obj">The object to compare with this instance.</param>
            <returns><see langword="true"/> if <paramref name="obj"/> is a 
            <see cref="T:Cadru.Comb"/> and has the same value as this instance;
            otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Cadru.Comb.Equals(Cadru.Comb)">
            <summary>
            Returns a value indicating whether this instance and a specified 
            <see cref="T:Cadru.Comb"/> object represent the same value.
            </summary>
            <param name="other">An object to compare to this instance.</param>
            <returns><see langword="true"/> if <paramref name="other"/> has the
            same value as this instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Cadru.Comb.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>The hash code for this instance.</returns>
        </member>
        <member name="M:Cadru.Comb.ToString">
            <summary>
            Returns a string representation of the value of this instance in
            registry format.
            </summary>
            <returns><para>The value of this <see cref="T:Cadru.Comb"/>, formatted by
            using the "D" format specifier as follows:</para>
            <para>xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx</para> 
            <para>where the value of the GUID is represented as a series of 
            lowercase hexadecimal digits in groups of 8, 4, 4, 4, and 12 digits
            and separated by hyphens. An example of a return value is 
            "382c74c3-721d-4f34-80e5-57657b6cbc27". To convert the hexadecimal 
            digits from a through f to uppercase, call the 
            <see cref="M:System.String.ToUpper"/> method on the returned string.</para>
            </returns>
        </member>
        <member name="M:Cadru.Comb.ToString(System.String)">
            <summary>
            Returns a string representation of the value of this 
            <see cref="T:Cadru.Comb"/> instance, according to the provided
            format specifier.
            </summary>
            <param name="format">A single format specifier that 
            indicates how to format the value of this <see cref="T:Cadru.Comb"/>.
            The format parameter can be "N", "D", "B", "P", or "X". 
            If <paramref name="format"/> is <see langword="null"/> or an empty
            string (""), "D" is used.</param>
            <returns>The value of this <see cref="T:Cadru.Comb"/>, represented
            as a series of lowercase hexadecimal digits in the specified
            format.</returns>
            <exception cref="T:System.FormatException">The value of 
            <paramref name="format"/> is not <see langword="null"/>, an empty
            string (""), "N", "D", "B", "P", or "X". 
            </exception>
            <remarks>The following table shows the accepted format specifiers
            for the <paramref name="format"/> parameter. "0" represents a 
            digit; hyphens ("-"), braces ("{", "}"), and parentheses
            ("(", ")") appear as shown.
            <list type="table">
            <listheader>
            <term>Specifier</term>
            <term>Format of return value</term>
            </listheader>
            <item>
            <term>N</term>
            <description><para>32 digits:</para>
            <para>00000000000000000000000000000000</para></description>
            </item>
            <item>
            <term>D</term>
            <description><para>32 digits separated by hyphens:</para>
            <para>00000000-0000-0000-0000-000000000000</para></description>
            </item>
            <item>
            <term>B</term>
            <description><para>32 digits separated by hyphens, enclosed in
            braces:</para>
            <para>{00000000-0000-0000-0000-000000000000}</para></description>
            </item>
            <item>
            <term>P</term>
            <description><para>32 digits separated by hyphens, enclosed in
            parentheses:</para>
            <para>(00000000-0000-0000-0000-000000000000)</para></description>
            </item>
            <item>
            <term>X</term>
            <description><para>Four hexadecimal values enclosed in braces, 
            where the fourth value is a subset of eight hexadecimal values that
            is also enclosed in braces:</para>
            <para>{0x00000000,0x0000,0x0000,{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}}</para></description>
            </item>
            </list>
            <para>The hexadecimal digits a through f are lowercase in the
            returned string. To convert them to uppercase, call the 
            <see cref="M:System.String.ToUpper"/> method on the returned string.</para>
            </remarks>
        </member>
        <member name="M:Cadru.Comb.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a string representation of the value of this 
            <see cref="T:Cadru.Comb"/> instance, according to the provided
            format specifier and culture-specific format information.
            </summary>
            <param name="format">A single format specifier that 
            indicates how to format the value of this <see cref="T:Cadru.Comb"/>.
            The format parameter can be "N", "D", "B", "P", or "X". 
            If <paramref name="format"/> is <see langword="null"/> or an empty
            string (""), "D" is used.</param>
            <param name="formatProvider">(Reserved) An object that supplies
            culture-specific formatting information.</param>
            <returns>The value of this <see cref="T:Cadru.Comb"/>, represented
            as a series of lowercase hexadecimal digits in the specified
            format.</returns>
            <exception cref="T:System.FormatException">The value of 
            <paramref name="format"/> is not <see langword="null"/>, an empty
            string (""), "N", "D", "B", "P", or "X". 
            </exception>
            <remarks>
            <para>The <paramref name="formatProvider"/> parameter is reserved for
            future use and does not contribute to the execution of this 
            method. You can pass <see langword="null"/> in the method call.</para>
            <para>The following table shows the accepted format specifiers
            for the <paramref name="format"/> parameter. "0" represents a 
            digit; hyphens ("-"), braces ("{", "}"), and parentheses
            ("(", ")") appear as shown.</para>
            <list type="table">
            <listheader>
            <term>Specifier</term>
            <term>Format of return value</term>
            </listheader>
            <item>
            <term>N</term>
            <description><para>32 digits:</para>
            <para>00000000000000000000000000000000</para></description>
            </item>
            <item>
            <term>D</term>
            <description><para>32 digits separated by hyphens:</para>
            <para>00000000-0000-0000-0000-000000000000</para></description>
            </item>
            <item>
            <term>B</term>
            <description><para>32 digits separated by hyphens, enclosed in
            braces:</para>
            <para>{00000000-0000-0000-0000-000000000000}</para></description>
            </item>
            <item>
            <term>P</term>
            <description><para>32 digits separated by hyphens, enclosed in
            parentheses:</para>
            <para>(00000000-0000-0000-0000-000000000000)</para></description>
            </item>
            <item>
            <term>X</term>
            <description><para>Four hexadecimal values enclosed in braces, 
            where the fourth value is a subset of eight hexadecimal values that
            is also enclosed in braces:</para>
            <para>{0x00000000,0x0000,0x0000,{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}}</para></description>
            </item>
            </list>
            <para>The hexadecimal digits a through f are lowercase in the
            returned string. To convert them to uppercase, call the 
            <see cref="M:System.String.ToUpper"/> method on the returned string.</para>
            <para>Because the <paramref name="formatProvider"/> parameter is ignored,
            you cannot use it to provide a custom formatting solution. To 
            represent a <see cref="T:Cadru.Comb"/> value as a string in a format that 
            isn't supported by the standard COMB format strings, call the 
            <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])"/>
            method with a provider object that implements both the 
            <see cref="T:System.ICustomFormatter"/> and <see cref="T:System.IFormatProvider"/>
            interfaces. For more information, see the "Custom Formatting with 
            ICustomFormatter" section in the 
            <see href="http://msdn.microsoft.com/en-us/library/26etazsy(v=vs.110).aspx">Formatting Types</see>
            article.</para>
            </remarks>
        </member>
        <member name="M:Cadru.Comb.ToByteArray">
            <summary>
            Returns a 16-element byte array that contains the value of the <see cref="T:Cadru.Comb"/>.
            </summary>
            <returns>A 16-element byte array.</returns>
        </member>
        <member name="P:Cadru.Comb.DateTime">
            <summary>
            Gets the date and time represented by the current instance.
            </summary>
            <value>A <see cref="T:System.DateTimeOffset"/> containing the data and time
            represented by the current instance.</value>
        </member>
        <member name="T:Cadru.Contracts.Assumes">
            <summary>
            Provides a set of methods to simplify debugging your code.
            </summary>
        </member>
        <member name="M:Cadru.Contracts.Assumes.Fail(System.String)">
            <summary>
            Fails with the provided message as the reason.
            </summary>
            <param name="message">The message of the resulting <see cref="T:Cadru.Contracts.AssumptionException"/>.</param>
            <exception cref="T:Cadru.Contracts.AssumptionException">An assumption failed.</exception>
        </member>
        <member name="M:Cadru.Contracts.Assumes.IsFalse(System.Boolean)">
            <summary>
            Checks for a condition and displays a message and throws an exception if the condition is <see langword="true"/>.
            </summary>
            <param name="condition"><see langword="false"/> to prevent a message being displayed; otherwise, <see langword="true"/>.</param>
            <exception cref="T:Cadru.Contracts.AssumptionException">The condition is <see langword="false"/>.</exception>
        </member>
        <member name="M:Cadru.Contracts.Assumes.IsFalse(System.Boolean,System.String)">
            <summary>
            Checks for a condition and displays a message and throws an exception if the condition is <see langword="true"/>.
            </summary>
            <param name="condition"><see langword="false"/> to prevent a message being displayed; otherwise, <see langword="true"/>.</param>
            <param name="message">A message to display and to be used in the resulting exception.</param>
            <exception cref="T:Cadru.Contracts.AssumptionException">The condition is <see langword="false"/>.</exception>
        </member>
        <member name="M:Cadru.Contracts.Assumes.IsTrue(System.Boolean)">
            <summary>
            Checks for a condition and displays a message and throws an exception if the condition is <see langword="false"/>.
            </summary>
            <param name="condition"><see langword="true"/> to prevent a message being displayed; otherwise, <see langword="false"/>.</param>
            <exception cref="T:Cadru.Contracts.AssumptionException">The condition is <see langword="false"/>.</exception>
        </member>
        <member name="M:Cadru.Contracts.Assumes.IsTrue(System.Boolean,System.String)">
            <summary>
            Checks for a condition and displays a message and throws an exception if the condition is <see langword="false"/>.
            </summary>
            <param name="condition"><see langword="true"/> to prevent a message being displayed; otherwise, <see langword="false"/>.</param>
            <param name="message">A message to display and to be used in the resulting exception.</param>
            <exception cref="T:Cadru.Contracts.AssumptionException">The condition is <see langword="false"/>.</exception>
        </member>
        <member name="M:Cadru.Contracts.Assumes.NotNull``1(``0)">
            <summary>
            Checks that <paramref name="value"/> is not <see langword="null"/>.
            </summary>
            <typeparam name="T">The type of the value to test.</typeparam>
            <param name="value">The value to test.</param>
            <exception cref="T:Cadru.Contracts.AssumptionException"><paramref name="value"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Cadru.Contracts.Assumes.NotNull``2(``0,``1)">
            <summary>
            Checks that <paramref name="value1"/> and <paramref name="value2"/> are not <see langword="null"/>.
            </summary>
            <typeparam name="T1">The type of the first value to test.</typeparam>
            <typeparam name="T2">The type of the second value to test.</typeparam>
            <param name="value1">The first value to test.</param>
            <param name="value2">The second value to test.</param>
            <exception cref="T:Cadru.Contracts.AssumptionException">
            <para><paramref name="value1"/> is <see langword="null"/>.</para>
            <para>-or-</para>
            <para><paramref name="value2"/> is <see langword="null"/>.</para>
            </exception>
        </member>
        <member name="M:Cadru.Contracts.Assumes.NotNull``3(``0,``1,``2)">
            <summary>
            Checks that <paramref name="value1"/>, <paramref name="value2"/>, and <paramref name="value3"/> are not <see langword="null"/>.
            </summary>
            <typeparam name="T1">The type of the first value to test.</typeparam>
            <typeparam name="T2">The type of the second value to test.</typeparam>
            <typeparam name="T3">The type of the third value to test.</typeparam>
            <param name="value1">The first value to test.</param>
            <param name="value2">The second value to test.</param>
            <param name="value3">The third value to test.</param>
            <exception cref="T:Cadru.Contracts.AssumptionException">
            <para><paramref name="value1"/> is <see langword="null"/>.</para>
            <para>-or-</para>
            <para><paramref name="value2"/> is <see langword="null"/>.</para>
            <para>-or-</para>
            <para><paramref name="value3"/> is <see langword="null"/>.</para>
            </exception>
        </member>
        <member name="M:Cadru.Contracts.Assumes.NotNull``4(``0,``1,``2,``3)">
            <summary>
            Checks that <paramref name="value1"/>, <paramref name="value2"/>, 
            <paramref name="value3"/>, and <paramref name="value4"/> are not <see langword="null"/>.
            </summary>
            <typeparam name="T1">The type of the first value to test.</typeparam>
            <typeparam name="T2">The type of the second value to test.</typeparam>
            <typeparam name="T3">The type of the third value to test.</typeparam>
            <typeparam name="T4">The type of the fourth value to test.</typeparam>
            <param name="value1">The first value to test.</param>
            <param name="value2">The second value to test.</param>
            <param name="value3">The third value to test.</param>
            <param name="value4">The fourth value to test.</param>
            <exception cref="T:Cadru.Contracts.AssumptionException">
            <para><paramref name="value1"/> is <see langword="null"/>.</para>
            <para>-or-</para>
            <para><paramref name="value2"/> is <see langword="null"/>.</para>
            <para>-or-</para>
            <para><paramref name="value3"/> is <see langword="null"/>.</para>
            <para>-or-</para>
            <para><paramref name="value4"/> is <see langword="null"/>.</para>
            </exception>
        </member>
        <member name="M:Cadru.Contracts.Assumes.NotNullOrEmpty(System.String)">
            <summary>
            Checks that <paramref name="value"/> is not <see langword="null"/> or a zero-length string.
            </summary>
            <param name="value">The value to test.</param>
            <exception cref="T:Cadru.Contracts.AssumptionException"><paramref name="value"/> is <see langword="null"/> or zero-length.</exception>
        </member>
        <member name="M:Cadru.Contracts.Assumes.Null(System.Object)">
            <summary>
            Checks that <paramref name="value"/> is <see langword="null"/>.
            </summary>
            <param name="value">The object to test.</param>
            <exception cref="T:Cadru.Contracts.AssumptionException"><paramref name="value"/> is not <see langword="null"/>.</exception>
        </member>
        <member name="M:Cadru.Contracts.Assumes.FailFast(System.String)">
            <summary>
            Throws a new <see cref="T:Cadru.Contracts.AssumptionException"/> and a <see cref="M:System.Diagnostics.Debug.Assert(System.Boolean,System.String)"/> assertion failure.
            </summary>
            <param name="message">The message of the resulting AssumptionException.</param>
            <exception cref="T:Cadru.Contracts.AssumptionException">An assumption failed.</exception>
        </member>
        <member name="T:Cadru.Contracts.AssumptionException">
            <summary>
            The exception that is thrown when an assumption fails.
            </summary>
        </member>
        <member name="M:Cadru.Contracts.AssumptionException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cadru.Contracts.AssumptionException"/> class.
            </summary>
        </member>
        <member name="M:Cadru.Contracts.AssumptionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Cadru.Contracts.AssumptionException"/> class with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Cadru.Contracts.AssumptionException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Cadru.Contracts.AssumptionException"/> class with a specified
            error message and a reference to the inner exception that is the cause of
            this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">The exception that is the cause of the current exception, or a <see langword="null"/> if no inner exception is specified.</param>
        </member>
        <member name="T:Cadru.Contracts.ContractArgumentValidatorAttribute">
            <summary>
            Enables factoring legacy if-then-throw into separate methods for reuse and full control over
            thrown exception and arguments.
            </summary>
            <devdoc>
            Important: the ContractArgumentValidatorAttribute type is not needed in the .Net Framework 
            prior to mscorlib.dll 4.5. In order to use this feature in earlier versions, please add the
            file ContractExtensions.cs or ContractExtensions.vb to all of your projects that contain 
            contract validator methods.
            </devdoc>
        </member>
        <member name="T:Cadru.Contracts.Requires">
            <summary>
            Provides a set of methods to simplify code contract requirements.
            </summary>
        </member>
        <member name="M:Cadru.Contracts.Requires.IsFalse(System.Boolean)">
            <summary>
            Checks for a condition and throws an exception if the condition is <see langword="true"/>.
            </summary>
            <param name="condition"><see langword="false"/> to prevent a message being displayed; otherwise, <see langword="true"/>.</param>
            <exception cref="T:System.InvalidOperationException">The condition is <see langword="true"/>.</exception>
        </member>
        <member name="M:Cadru.Contracts.Requires.IsFalse(System.Boolean,System.String)">
            <summary>
            Checks for a condition and throws an exception if the condition is <see langword="true"/>.
            </summary>
            <param name="condition"><see langword="false"/> to prevent a message being displayed; otherwise, <see langword="true"/>.</param>
            <param name="message">A message to be used in the resulting exception.</param>
            <exception cref="T:System.InvalidOperationException">The condition is <see langword="true"/>.</exception>
        </member>
        <member name="M:Cadru.Contracts.Requires.IsFalse(System.Boolean,System.String,System.String)">
            <summary>
            Checks for a condition and throws an exception if the condition is <see langword="true"/>.
            </summary>
            <param name="condition"><see langword="false"/> to prevent a message being displayed; otherwise, <see langword="true"/>.</param>
            <param name="parameterName">The name of the parameter being tested.</param>
            <param name="message">A message to be used in the resulting exception.</param>
            <exception cref="T:System.ArgumentException">The condition is <see langword="true"/>.</exception>
        </member>
        <member name="M:Cadru.Contracts.Requires.IsTrue(System.Boolean)">
            <summary>
            Checks for a condition and throws an exception if the condition is <see langword="false"/>.
            </summary>
            <param name="condition"><see langword="true"/> to prevent a message being displayed; otherwise, <see langword="false"/>.</param>
            <exception cref="T:System.InvalidOperationException">The condition is <see langword="false"/>.</exception>
        </member>
        <member name="M:Cadru.Contracts.Requires.IsTrue(System.Boolean,System.String)">
            <summary>
            Checks for a condition and throws an exception if the condition is <see langword="false"/>.
            </summary>
            <param name="condition"><see langword="true"/> to prevent a message being displayed; otherwise, <see langword="false"/>.</param>
            <param name="message">A message to be used in the resulting exception.</param>
            <exception cref="T:System.InvalidOperationException">The condition is <see langword="false"/>.</exception>
        </member>
        <member name="M:Cadru.Contracts.Requires.IsTrue(System.Boolean,System.String,System.String)">
            <summary>
            Checks for a condition and throws an exception if the condition is <see langword="false"/>.
            </summary>
            <param name="condition"><see langword="true"/> to prevent a message being displayed; otherwise, <see langword="false"/>.</param>
            <param name="parameterName">The name of the parameter being tested.</param>
            <param name="message">A message to be used in the resulting exception.</param>
            <exception cref="T:System.ArgumentException">The condition is <see langword="false"/>.</exception>
        </member>
        <member name="M:Cadru.Contracts.Requires.NotDisposed(Cadru.IDisposablePattern,System.String)">
            <summary>
            Requires that <paramref name="objectName"/> not be disposed.
            </summary>
            <param name="disposable">The object to test.</param>
            <param name="objectName">A string containing the name of the object.</param>
        </member>
        <member name="M:Cadru.Contracts.Requires.NotNull``1(``0,System.String)">
            <summary>
            Checks that <paramref name="value"/> is not <see langword="null"/>.
            </summary>
            <typeparam name="T">The type of the value to test.</typeparam>
            <param name="value">The parameter to test.</param>
            <param name="parameterName">The name of the parameter being tested.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Cadru.Contracts.Requires.NotNull``1(``0,System.String,System.String)">
            <summary>
            Checks that <paramref name="value"/> is not <see langword="null"/>.
            </summary>
            <typeparam name="T">The type of the value to test.</typeparam>
            <param name="value">The parameter to test.</param>
            <param name="parameterName">The name of the parameter being tested.</param>
            <param name="message">A message to be used in the resulting exception.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Cadru.Contracts.Requires.NotNullOrEmpty(System.String,System.String)">
            <summary>
            Checks that <paramref name="value"/> is not <see langword="null"/> or a zero-length string.
            </summary>
            <param name="value">The parameter to test.</param>
            <param name="parameterName">The name of the parameter being tested.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="value"/> is a zero-length string.</exception>
        </member>
        <member name="M:Cadru.Contracts.Requires.NotNullOrEmpty(System.String,System.String,System.String)">
            <summary>
            Checks that <paramref name="value"/> is not <see langword="null"/> or a zero-length string.
            </summary>
            <param name="value">The parameter to test.</param>
            <param name="parameterName">The name of the parameter being tested.</param>
            <param name="message">A message to be used in the resulting exception.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="value"/> is a zero-length string.</exception>
        </member>
        <member name="M:Cadru.Contracts.Requires.NotNullOrEmpty(System.Collections.IEnumerable,System.String)">
            <summary>
            Checks that <paramref name="values"/> is not <see langword="null"/> or empty.
            </summary>
            <param name="values">The parameter to test.</param>
            <param name="parameterName">The name of the parameter being tested.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="values"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="values"/> is empty.</exception>
        </member>
        <member name="M:Cadru.Contracts.Requires.NotNullOrEmpty(System.Collections.IEnumerable,System.String,System.String)">
            <summary>
            Checks that <paramref name="values"/> is not <see langword="null"/> or empty.
            </summary>
            <param name="values">The parameter to test.</param>
            <param name="parameterName">The name of the parameter being tested.</param>
            <param name="message">A message to be used in the resulting exception.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="values"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="values"/> is empty.</exception>
        </member>
        <member name="M:Cadru.Contracts.Requires.NotNullElements(System.Collections.IEnumerable,System.String)">
            <summary>
            Checks that <paramref name="values"/> is not <see langword="null"/> 
            and contains no <see langword="null"/> elements.
            </summary>
            <param name="values">The parameter to test.</param>
            <param name="parameterName">The name of the parameter being tested.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="values"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="values"/> contains a <see langword="null"/> element.</exception>
        </member>
        <member name="M:Cadru.Contracts.Requires.ValidElements``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0},System.String,System.String)">
            <summary>
            Checks that <paramref name="values"/> is not <see langword="null"/> 
            and contains valid elements based on the given predicate.
            </summary>
            <typeparam name="T">The type of the members of <paramref name="values"/>.</typeparam>
            <param name="values">The parameter to test.</param>
            <param name="match">The predicate used to test the elements.</param>
            <param name="parameterName">The name of the parameter being tested.</param>
            <param name="message">A message to be used in the resulting exception.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="values"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="values"/> contains an element which does not match the given predicate.</exception>
        </member>
        <member name="M:Cadru.Contracts.Requires.ValidRange(System.Boolean,System.String)">
            <summary>
            Checks for a condition and throws an exception if the condition is <see langword="true"/>.
            </summary>
            <param name="condition"><see langword="false"/> to prevent a message being displayed; otherwise, <see langword="true"/>.</param>
            <param name="parameterName">The name of the parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">The condition is <see langword="true"/>.</exception>
        </member>
        <member name="M:Cadru.Contracts.Requires.ValidRange(System.Boolean,System.String,System.String)">
            <summary>
            Checks for a condition and throws an exception if the condition is <see langword="true"/>.
            </summary>
            <param name="condition"><see langword="false"/> to prevent a message being displayed; otherwise, <see langword="true"/>.</param>
            <param name="parameterName">The name of the parameter being tested.</param>
            <param name="message">A message to be used in the resulting exception.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">The condition is <see langword="true"/>.</exception>
        </member>
        <member name="T:Cadru.EnumDescriptionAttribute">
            <summary>
            Provides a description for an enumerated type.
            </summary>
        </member>
        <member name="M:Cadru.EnumDescriptionAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the 
            <see cref="T:Cadru.EnumDescriptionAttribute"/> class.
            </summary>
            <param name="description">The description to store in this attribute.</param>
        </member>
        <member name="P:Cadru.EnumDescriptionAttribute.Description">
            <summary>
            Gets the description stored in this attribute.
            </summary>
            <value>The description stored in the attribute.</value>
        </member>
        <member name="T:Cadru.CancelEventArgs`1">
            <summary>
            <see cref="T:Cadru.CancelEventArgs`1"/> is the base class for classes containing event data
            for a cancelable event.
            </summary>
            <typeparam name="T">The type of the event data.</typeparam>
        </member>
        <member name="M:Cadru.CancelEventArgs`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Cadru.CancelEventArgs`1"/> class.
            </summary>
            <param name="data">The event data.</param>
        </member>
        <member name="P:Cadru.CancelEventArgs`1.Data">
            <summary>
            Gets the event data.
            </summary>
            <value>The event data.</value>
        </member>
        <member name="T:Cadru.EventArgs`1">
            <summary>
            <see cref="T:Cadru.EventArgs`1"/> is the base class for classes containing event data.
            </summary>
            <typeparam name="T">The type of the event data.</typeparam>
        </member>
        <member name="M:Cadru.EventArgs`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Cadru.EventArgs`1"/> class.
            </summary>
            <param name="data">The event data.</param>
        </member>
        <member name="P:Cadru.EventArgs`1.Data">
            <summary>
            Gets the event data.
            </summary>
            <value>The event data.</value>
        </member>
        <member name="T:Cadru.Extensions.ArrayExtensions">
            <summary>
            Provides basic routines for common array manipulation.
            </summary>
        </member>
        <member name="M:Cadru.Extensions.ArrayExtensions.BytesToBinaryString(System.Byte[])">
            <summary>
            Converts the byte array to a string representation in binary.
            </summary>
            <param name="source">The source array.</param>
            <returns>The binary string representation of the array</returns>
        </member>
        <member name="M:Cadru.Extensions.ArrayExtensions.BytesToString(System.Byte[])">
            <summary>
            Converts the byte array to a string representation in hexadecimal.
            </summary>
            <param name="source">The source array.</param>
            <returns>The hexadecimal string representation of the array</returns>
        </member>
        <member name="M:Cadru.Extensions.ArrayExtensions.ReverseArrayInPlace(System.Byte[])">
            <summary>
            Reverses an array.
            </summary>
            <param name="source">The source array.</param>
            <remarks>This is a destructive operation and will mutate the
            original array.</remarks>
        </member>
        <member name="M:Cadru.Extensions.ArrayExtensions.ReverseArray(System.Byte[])">
            <summary>
            Reverses an array
            </summary>
            <param name="source">The source array.</param>
            <returns>The reversed array.</returns>
        </member>
        <member name="T:Cadru.Extensions.BooleanExtensions">
            <summary>
            Provides basic routines for common Boolean manipulation.
            </summary>
        </member>
        <member name="M:Cadru.Extensions.BooleanExtensions.ToBit(System.Boolean)">
            <summary>
            Returns the binary representation of the boolean value.
            </summary>
            <param name="value">The boolean value whose binary representation should be returned.</param>
            <returns>If the boolean value is <see langword="true"/>, 1 (one); otherwise, 0 (zero).</returns>
        </member>
        <member name="M:Cadru.Extensions.BooleanExtensions.ToChar(System.Boolean)">
            <summary>
            Returns the character representation of the boolean value.
            </summary>
            <param name="value">The boolean value whose character representation should be returned.</param>
            <returns>If the boolean value is <see langword="true"/>, the character 'T'; otherwise, the character 'F'.</returns>
        </member>
        <member name="M:Cadru.Extensions.BooleanExtensions.TryParseAsBoolean(System.Int32,System.Boolean@)">
            <overloads>
            <summary>
            Tries to convert the specified representation of a logical value to its 
            Boolean equivalent. A return value indicates whether the conversion succeeded or failed.
            </summary>
            </overloads>
            <summary>
            Tries to convert the specified integer representation of a logical value to its 
            Boolean equivalent. A return value indicates whether the conversion succeeded or failed.
            </summary>
            <param name="value">An integer containing the value to convert. </param>
            <param name="result">When this method returns, if the conversion succeeded, contains 
            <see langword="true"/>true if <paramref name="value"/> is equal to 1 (one)
            or <see langword="false"/> if <paramref name="value"/> is equal to 0 (zero).
            If the conversion failed, contains <see langword="false"/>. The conversion fails if 
            <paramref name="value"/> is not equal to 1 (one) or 0 (zero).</param>
            <returns><see langword="true"/> if value was converted successfully; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Cadru.Extensions.BooleanExtensions.TryParseAsBoolean(System.String,System.Boolean@)">
            <summary>
            Tries to convert the specified string representation of a logical value to its 
            Boolean equivalent. A return value indicates whether the conversion succeeded or failed.
            </summary>
            <param name="value">A string containing the value to convert. </param>
            <param name="result">When this method returns, if the conversion succeeded, contains 
            <see langword="true"/>true if <paramref name="value"/> is equal to 
            <see cref="p:Boolean.TrueString"/>, the character 'T', the word "Yes", or the character 'Y'
            or <see langword="false"/> if <paramref name="value"/> is equal to 
            <see cref="p:Boolean.FalseString"/>, the character 'F', the word "No", or the character 'N'.
            If the conversion failed, contains <see langword="false"/>. The conversion fails if 
            <paramref name="value"/> is <see langword="null"/> or is not equal to the value of
            either <see cref="p:Boolean.TrueString"/>, the character 'T', the word "Yes", or the character 'Y',
            <see cref="p:Boolean.FalseString"/>, the character 'F', the word "No", or the character 'N'.</param>
            <returns><see langword="true"/> if value was converted successfully; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:Cadru.Extensions.DateTimeOffsetExtensions">
            <summary>
            Provides basic routines for common DateTimeOffset manipulation.
            </summary>
        </member>
        <member name="M:Cadru.Extensions.DateTimeOffsetExtensions.AddWeekdays(System.DateTimeOffset,System.Double)">
            <summary>
            Returns a new <see cref="T:System.DateTimeOffset"/> that adds the specified number of
            weekdays to the value of this instance.
            </summary>
            <param name="date">A valid <see cref="T:System.DateTimeOffset"/> instance.</param>
            <param name="value">A number of whole and fractional weekdays.
            The <paramref name="value"/> parameter can be negative or positive.</param>
            <returns>A <see cref="T:System.DateTimeOffset"/> whose value is the sum of the
            date and time represented by this instance and the number of weekdays
            represented by <paramref name="value"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The resulting <see cref="T:System.DateTimeOffset"/> is less than 
            <see cref="F:System.DateTimeOffset.MinValue"/> or greater than
            <see cref="F:System.DateTimeOffset.MaxValue"/>.
            </exception>
        </member>
        <member name="M:Cadru.Extensions.DateTimeOffsetExtensions.AddQuarters(System.DateTimeOffset,System.Double)">
            <summary>
            Returns a new <see cref="T:System.DateTimeOffset"/> that adds the specified number of
            quarters to the value of this instance.
            </summary>
            <param name="date">A valid <see cref="T:System.DateTimeOffset"/> instance.</param>
            <param name="value">A number of whole and fractional quarters.
            The <paramref name="value"/> parameter can be negative or positive.</param>
            <returns>A <see cref="T:System.DateTimeOffset"/> whose value is the sum of the
            date and time represented by this instance and the number of quarters
            represented by <paramref name="value"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The resulting <see cref="T:System.DateTimeOffset"/> is less than 
            <see cref="F:System.DateTimeOffset.MinValue"/> or greater than
            <see cref="F:System.DateTimeOffset.MaxValue"/>.
            </exception>
        </member>
        <member name="M:Cadru.Extensions.DateTimeOffsetExtensions.AddWeeks(System.DateTimeOffset,System.Double)">
            <summary>
            Returns a new <see cref="T:System.DateTimeOffset"/> that adds the specified number of
            weeks to the value of this instance.
            </summary>
            <param name="date">A valid <see cref="T:System.DateTimeOffset"/> instance.</param>
            <param name="value">A number of whole and fractional weeks.
            The <paramref name="value"/> parameter can be negative or positive.</param>
            <returns>A <see cref="T:System.DateTimeOffset"/> whose value is the sum of the
            date and time represented by this instance and the number of weeks
            represented by <paramref name="value"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The resulting <see cref="T:System.DateTimeOffset"/> is less than 
            <see cref="F:System.DateTimeOffset.MinValue"/> or greater than
            <see cref="F:System.DateTimeOffset.MaxValue"/>.
            </exception>
        </member>
        <member name="M:Cadru.Extensions.DateTimeOffsetExtensions.DaysInMonth(System.DateTimeOffset)">
            <summary>
            Returns the number of days in the month for the date represented by this instance.
            </summary>
            <param name="date">A valid <see cref="T:System.DateTimeOffset"/> instance.</param>
            <returns>The number of days in the month for the date represented by this instance.</returns>
        </member>
        <member name="M:Cadru.Extensions.DateTimeOffsetExtensions.Elapsed(System.DateTimeOffset)">
            <summary>
            Returns the elapsed time between the date represented by this instance
            and the current date and time.
            </summary>
            <param name="date">A valid <see cref="T:System.DateTimeOffset"/> instance.</param>
            <returns>A <see cref="T:System.TimeSpan"/> representing the elapsed
            time between the date represented by this instance and the
            current date and time.</returns>
        </member>
        <member name="M:Cadru.Extensions.DateTimeOffsetExtensions.FirstDayOfMonth(System.DateTimeOffset)">
            <summary>
            Returns a <see cref="T:System.DateTimeOffset"/> representing the
            first day of the month for the date represented by this instance.
            </summary>
            <param name="date">A valid <see cref="T:System.DateTimeOffset"/> instance.</param>
            <returns>A <see cref="T:System.DateTimeOffset"/> representing the
            first day of the month for the date represented by this instance.</returns>
        </member>
        <member name="M:Cadru.Extensions.DateTimeOffsetExtensions.FirstDayOfNextQuarter(System.DateTimeOffset)">
            <summary>
            Returns a <see cref="T:System.DateTimeOffset"/> which represents the 
            first day of the next quarter of the date represented by this instance.
            </summary>
            <param name="date">A valid <see cref="T:System.DateTimeOffset"/> instance.</param>
            <returns>A <see cref="T:System.DateTimeOffset"/> which represents the 
            first day of the next quarter of the date represented by this instance.</returns>
        </member>
        <member name="M:Cadru.Extensions.DateTimeOffsetExtensions.FirstDayOfQuarter(System.DateTimeOffset)">
            <summary>
            Returns a <see cref="T:System.DateTimeOffset"/> which represents the 
            first day of the quarter of the date represented by this instance.
            </summary>
            <param name="date">A valid <see cref="T:System.DateTimeOffset"/> instance.</param>
            <returns>A <see cref="T:System.DateTimeOffset"/> which represents the 
            first day of the quarter of the date represented by this instance.</returns>
        </member>
        <member name="M:Cadru.Extensions.DateTimeOffsetExtensions.FirstDayOfWeek(System.DateTimeOffset)">
            <summary>
            Returns a <see cref="T:System.DateTimeOffset"/> which represents the 
            first day of the week of the date represented by this instance.
            </summary>
            <param name="date">A valid <see cref="T:System.DateTimeOffset"/> instance.</param>
            <returns>A <see cref="T:System.DateTimeOffset"/> which represents the 
            first day of the week of the date represented by this instance.</returns>
        </member>
        <member name="M:Cadru.Extensions.DateTimeOffsetExtensions.FirstDayOfWeek(System.DateTimeOffset,System.DayOfWeek)">
            <summary>
            Returns a <see cref="T:System.DateTimeOffset"/> which represents the 
            first day of the week of the date represented by this instance.
            </summary>
            <param name="date">A valid <see cref="T:System.DateTimeOffset"/> instance.</param>
            <param name="startOfWeek">An enumeration value that represents the first day of the week.</param>
            <returns>A <see cref="T:System.DateTimeOffset"/> which represents the 
            first day of the week of the date represented by this instance.</returns>
        </member>
        <member name="M:Cadru.Extensions.DateTimeOffsetExtensions.FirstDayOfYear(System.DateTimeOffset)">
            <summary>
            Returns a <see cref="T:System.DateTimeOffset"/> representing the
            first day of the year for the date represented by this instance.
            </summary>
            <param name="date">A valid <see cref="T:System.DateTimeOffset"/> instance.</param>
            <returns>A <see cref="T:System.DateTimeOffset"/> representing the
            first day of the year for the date represented by this instance.</returns>
        </member>
        <member name="M:Cadru.Extensions.DateTimeOffsetExtensions.GetAbbreviatedMonthName(System.DateTimeOffset)">
            <summary>
            Returns the culture-specific abbreviated name of the month represented by this instance.
            </summary>
            <param name="date">A valid <see cref="T:System.DateTimeOffset"/> instance.</param>
            <returns>The culture-specific abbreviated name of the month represented by this instance.</returns>
        </member>
        <member name="M:Cadru.Extensions.DateTimeOffsetExtensions.GetAbbreviatedMonthNames">
            <summary>
            Returns the culture-specific abbreviated names of the months.
            </summary>
            <returns>A list that contains the culture-specific abbreviated names of the months.</returns>
        </member>
        <member name="M:Cadru.Extensions.DateTimeOffsetExtensions.GetDayOfWeek(System.DateTimeOffset,System.DayOfWeek)">
            <summary>
            Returns a <see cref="T:System.DateTimeOffset"/> representing the
            day of the week from the date represented by this instance.
            </summary>
            <param name="date">A valid <see cref="T:System.DateTimeOffset"/> instance.</param>
            <param name="day">An enumeration value that represents the day of
            the week for which the date is to be calculated.</param>
            <returns>A <see cref="T:System.DateTimeOffset"/> representing the
            day of the week from the date represented by this instance.</returns>
        </member>
        <member name="M:Cadru.Extensions.DateTimeOffsetExtensions.GetDayOfWeek(System.DateTimeOffset,System.DayOfWeek,System.DayOfWeek)">
            <summary>
            Returns a <see cref="T:System.DateTimeOffset"/> representing the
            day of the week from the date represented by this instance.
            </summary>
            <param name="date">A valid <see cref="T:System.DateTimeOffset"/> instance.</param>
            <param name="day">An enumeration value that represents the day of
            the week for which the date is to be calculated.</param>
            <param name="startOfWeek">An enumeration value that represents the first day of the week.</param>
            <returns>A <see cref="T:System.DateTimeOffset"/> representing the
            day of the week from the date represented by this instance.</returns>
        </member>
        <member name="M:Cadru.Extensions.DateTimeOffsetExtensions.GetMonthName(System.DateTimeOffset)">
            <summary>
            Returns the culture-specific name of the month represented by this instance.
            </summary>
            <param name="date">A valid <see cref="T:System.DateTimeOffset"/> instance.</param>
            <returns>The culture-specific name of the month represented by this instance.</returns>
        </member>
        <member name="M:Cadru.Extensions.DateTimeOffsetExtensions.GetMonthNames">
            <summary>
            Returns the culture-specific names of the months.
            </summary>
            <returns>A list that contains the culture-specific names of the months.</returns>
        </member>
        <member name="M:Cadru.Extensions.DateTimeOffsetExtensions.GetMonthNumber(System.String,System.Boolean)">
            <summary>
            Returns the month number for the given month name.
            </summary>
            <param name="name">The month name.</param>
            <param name="abbreviated"><see langword="true"/> if the name is abbreviated;
            otherwise, <see langword="false"/>.</param>
            <returns>The month number for the given month name.</returns>
        </member>
        <member name="M:Cadru.Extensions.DateTimeOffsetExtensions.GetWeekOfYear(System.DateTimeOffset)">
            <summary>
            Returns the week of the year that includes the date in the specified DateTimeOffset value.
            </summary>
            <param name="time">A date and time value.</param>
            <returns>A positive integer that represents the week of the year 
            that includes the date in the <paramref name="time"/> parameter.</returns>
        </member>
        <member name="M:Cadru.Extensions.DateTimeOffsetExtensions.GetWeekOfYear(System.DateTimeOffset,System.Globalization.CalendarWeekRule)">
            <summary>
            Returns the week of the year that includes the date in the specified DateTimeOffset value.
            </summary>
            <param name="time">A date and time value.</param>
            <param name="rule">An enumeration value that defines a calendar week.</param>
            <returns>A positive integer that represents the week of the year 
            that includes the date in the <paramref name="time"/> parameter.</returns>
        </member>
        <member name="M:Cadru.Extensions.DateTimeOffsetExtensions.GetWeekOfYear(System.DateTimeOffset,System.Globalization.CalendarWeekRule,System.DayOfWeek)">
            <summary>
            Returns the week of the year that includes the date in the specified DateTimeOffset value.
            </summary>
            <param name="time">A date and time value.</param>
            <param name="rule">An enumeration value that defines a calendar week.</param>
            <param name="firstDayOfWeek">An enumeration value that represents the first day of the week.</param>
            <returns>A positive integer that represents the week of the year 
            that includes the date in the <paramref name="time"/> parameter.</returns>
        </member>
        <member name="M:Cadru.Extensions.DateTimeOffsetExtensions.IsLeapYear(System.DateTimeOffset)">
            <summary>
            Determines whether the specified date is a leap year.
            </summary>
            <param name="date">A valid <see cref="T:System.DateTimeOffset"/> instance.</param>
            <returns><see langword="true"/> if the specified date is a leap year;
            otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Cadru.Extensions.DateTimeOffsetExtensions.IsLeapMonth(System.DateTimeOffset)">
            <summary>
            Determines whether the specified date is a leap month.
            </summary>
            <param name="date">A valid <see cref="T:System.DateTimeOffset"/> instance.</param>
            <returns><see langword="true"/> if the specified date is a leap month;
            otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Cadru.Extensions.DateTimeOffsetExtensions.IsLeapDay(System.DateTimeOffset)">
            <summary>
            Determines whether the specified date is a leap day.
            </summary>
            <param name="date">A valid <see cref="T:System.DateTimeOffset"/> instance.</param>
            <returns><see langword="true"/> if the specified date is a leap day;
            otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Cadru.Extensions.DateTimeOffsetExtensions.IsWeekday(System.DateTimeOffset)">
            <summary>
            Determines whether the specified date is a week day.
            </summary>
            <param name="date">A valid <see cref="T:System.DateTimeOffset"/> instance.</param>
            <returns><see langword="true"/> if the specified date is a week day;
            otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Cadru.Extensions.DateTimeOffsetExtensions.IsWeekend(System.DateTimeOffset)">
            <summary>
            Determines whether the specified date is a weekend.
            </summary>
            <param name="date">A valid <see cref="T:System.DateTimeOffset"/> instance.</param>
            <returns><see langword="true"/> if the specified date is a weekend;
            otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Cadru.Extensions.DateTimeOffsetExtensions.IsUtcDateTime(System.DateTimeOffset)">
            <summary>
            Determines whether he specified date is a UTC date.
            </summary>
            <param name="date">A valid <see cref="T:System.DateTimeOffset"/> instance.</param>
            <returns><see langword="true"/> if the specified date is a UTC date;
            otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Cadru.Extensions.DateTimeOffsetExtensions.LastDayOfMonth(System.DateTimeOffset)">
            <summary>
            Returns a <see cref="T:System.DateTimeOffset"/> representing the
            last day of the month for the date represented by this instance.
            </summary>
            <param name="date">A valid <see cref="T:System.DateTimeOffset"/> instance.</param>
            <returns>A <see cref="T:System.DateTimeOffset"/> representing the
            last day of the month for the date represented by this instance.</returns>
        </member>
        <member name="M:Cadru.Extensions.DateTimeOffsetExtensions.LastDayOfQuarter(System.DateTimeOffset)">
            <summary>
            Returns a <see cref="T:System.DateTimeOffset"/> which represents the 
            last day of the quarter of the date represented by this instance.
            </summary>
            <param name="date">A valid <see cref="T:System.DateTimeOffset"/> instance.</param>
            <returns>A <see cref="T:System.DateTimeOffset"/> which represents the 
            last day of the quarter of the date represented by this instance.</returns>
        </member>
        <member name="M:Cadru.Extensions.DateTimeOffsetExtensions.LastDayOfWeek(System.DateTimeOffset)">
            <summary>
            Returns a <see cref="T:System.DateTimeOffset"/> which represents the 
            last day of the week of the date represented by this instance.
            </summary>
            <param name="date">A valid <see cref="T:System.DateTimeOffset"/> instance.</param>
            <returns>A <see cref="T:System.DateTimeOffset"/> which represents the 
            last day of the week of the date represented by this instance.</returns>
        </member>
        <member name="M:Cadru.Extensions.DateTimeOffsetExtensions.LastDayOfWeek(System.DateTimeOffset,System.DayOfWeek)">
            <summary>
            Returns a <see cref="T:System.DateTimeOffset"/> which represents the 
            last day of the week of the date represented by this instance.
            </summary>
            <param name="date">A valid <see cref="T:System.DateTimeOffset"/> instance.</param>
            <param name="firstDayOfWeek">An enumeration value that represents the first day of the week.</param>
            <returns>A <see cref="T:System.DateTimeOffset"/> which represents the 
            last day of the week of the date represented by this instance.</returns>
        </member>
        <member name="M:Cadru.Extensions.DateTimeOffsetExtensions.LastDayOfYear(System.DateTimeOffset)">
            <summary>
            Returns a <see cref="T:System.DateTimeOffset"/> representing the
            last day of the year for the date represented by this instance.
            </summary>
            <param name="date">A valid <see cref="T:System.DateTimeOffset"/> instance.</param>
            <returns>A <see cref="T:System.DateTimeOffset"/> representing the
            last day of the year for the date represented by this instance.</returns>
        </member>
        <member name="M:Cadru.Extensions.DateTimeOffsetExtensions.Quarter(System.DateTimeOffset)">
            <summary>
            Returns the quarter component of the date represented by this instance.
            </summary>
            <param name="date">A valid <see cref="T:System.DateTimeOffset"/> instance.</param>
            <returns>The quarter component of the date represented by this instance.</returns>
        </member>
        <member name="T:Cadru.Extensions.EnumerableExtensions">
            <summary>
            Provides basic routines for common sequence and collection manipulation.
            </summary>
        </member>
        <member name="M:Cadru.Extensions.EnumerableExtensions.IsEmpty(System.Collections.IEnumerable)">
            <summary>
            Determines if the collection contains values.
            </summary>
            <param name="source">The collection to test.</param>
            <returns><see langword="true"/> if the collection does not contain values;
            otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Cadru.Extensions.EnumerableExtensions.IsNull(System.Collections.IEnumerable)">
            <summary>
            Determines if the collection is <see langword="null"/>.
            </summary>
            <param name="source">The collection to test.</param>
            <returns><see langword="true"/> if the collection is <see langword="null"/>;
            otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Cadru.Extensions.EnumerableExtensions.IsNullOrEmpty(System.Collections.IEnumerable)">
            <summary>
            Determines if the collection is <see langword="null"/> or contains values.
            </summary>
            <param name="source">The collection to test.</param>
            <returns><see langword="true"/> if the collection is <see langword="null"/>
            or does not contain values; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Cadru.Extensions.EnumerableExtensions.Join(System.Collections.Generic.IList{System.String},System.String,System.Int32,System.Int32)">
            <summary>
            Concatenates the members of a collection, using the specified separator between each member.
            </summary>
            <param name="values">A collection that contains the strings to concatenate.</param>
            <param name="separator">The string to use as a separator. <paramref name="separator"/>
            is included in the returned string only if <paramref name="values"/> has more than one element.</param>
            <param name="startIndex">The first element in <paramref name="values"/> to use.</param>
            <param name="count">The number of elements of <paramref name="values"/> to use.</param>
            <returns><para>A string that consists of the members of values delimited by the separator string.</para>
            <para>-or-</para>
            <para><see cref="F:System.String.Empty"/> if <paramref name="count"/> is zero,
            <paramref name="values"/> has no elements, or <paramref name="separator"/> and
            all of the elements of <paramref name="values"/> are <see cref="F:System.String.Empty"/>.</para>
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="values"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="startIndex"/> or <paramref name="count"/> is less than 0.</para>
            <para>-or-</para>
            <para><paramref name="startIndex"/> plus <paramref name="count"/> is greater than the
            number of elements in <paramref name="values"/>.</para>
            </exception>
            <exception cref="T:System.OutOfMemoryException">Out of memory.</exception>
        </member>
        <member name="M:Cadru.Extensions.EnumerableExtensions.Join(System.Collections.Generic.IList{System.String},System.Int32,System.Int32)">
            <summary>
            Concatenates the members of a collection, using a comma (,) between each member.
            </summary>
            <param name="values">A collection that contains the strings to concatenate.</param>
            <param name="startIndex">The first element in <paramref name="values"/> to use.</param>
            <param name="count">The number of elements of <paramref name="values"/> to use.</param>
            <returns><para>A string that consists of the members of values delimited by a comma (,).</para>
            <para>-or-</para>
            <para><see cref="F:System.String.Empty"/> if <paramref name="count"/> is zero,
            <paramref name="values"/> has no elements, or all of the elements of
            <paramref name="values"/> are <see cref="F:System.String.Empty"/>.</para>
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="values"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="startIndex"/> or <paramref name="count"/> is less than 0.</para>
            <para>-or-</para>
            <para><paramref name="startIndex"/> plus <paramref name="count"/> is greater than the
            number of elements in <paramref name="values"/>.</para>
            </exception>
            <exception cref="T:System.OutOfMemoryException">Out of memory.</exception>
        </member>
        <member name="M:Cadru.Extensions.EnumerableExtensions.Join(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Concatenates the members of a collection, using a comma (,) separator between each member.
            </summary>
            <param name="values">A collection that contains the strings to concatenate.</param>
            <returns>A string that consists of the members of values delimited by a comma (,).
            If <paramref name="values"/> has no members, the method returns <see cref="F:System.String.Empty"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="values"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Cadru.Extensions.EnumerableExtensions.Join(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Concatenates the members of a collection, using the specified separator between each member.
            </summary>
            <param name="values">A collection that contains the strings to concatenate.</param>
            <param name="separator">The string to use as a separator. <paramref name="separator"/>
            is included in the returned string only if <paramref name="values"/> has more than one element.</param>
            <returns>A string that consists of the members of values delimited by the separator string.
            If <paramref name="values"/> has no members, the method returns <see cref="F:System.String.Empty"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="values"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Cadru.Extensions.EnumerableExtensions.Join``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Concatenates the members of a collection, using a comma (,) separator between each member.
            </summary>
            <typeparam name="T">The type of the members of <paramref name="values"/>.</typeparam>
            <param name="values">A collection that contains the objects to concatenate.</param>
            <returns>A string that consists of the members of values delimited by a comma (,).
            If <paramref name="values"/> has no members, the method returns <see cref="F:System.String.Empty"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="values"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Cadru.Extensions.EnumerableExtensions.Join``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Concatenates the members of a collection, using the specified separator between each member.
            </summary>
            <typeparam name="T">The type of the members of <paramref name="values"/>.</typeparam>
            <param name="values">A collection that contains the objects to concatenate.</param>
            <param name="separator">The string to use as a separator. <paramref name="separator"/>
            is included in the returned string only if <paramref name="values"/> has more than one element.</param>
            <returns>A string that consists of the members of values delimited by the separator string.
            If <paramref name="values"/> has no members, the method returns <see cref="F:System.String.Empty"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="values"/> is <see langword="null"/>.</exception>
        </member>
        <member name="T:Cadru.Extensions.EnumExtensions">
            <summary>
            Provides basic routines for common enumerated type manipulation.
            </summary>
        </member>
        <member name="M:Cadru.Extensions.EnumExtensions.GetDescription(System.Enum)">
            <summary>
            Gets the <see cref="T:Cadru.EnumDescriptionAttribute"/> of an <see cref="T:System.Enum"/> type value.
            </summary>
            <param name="value">The <see cref="T:System.Enum"/> type value.</param>
            <returns>A string containing the text of the <see cref="T:Cadru.EnumDescriptionAttribute"/>.</returns>
        </member>
        <member name="T:Cadru.Extensions.NullExtensions">
            <summary>
            Provides basic routines for determining if an instance is <see langword="null"/>.
            </summary>
        </member>
        <member name="M:Cadru.Extensions.NullExtensions.IsNull``1(``0)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether <paramref name="source"/>
            is <see langword="null"/>.
            </summary>
            <typeparam name="T">The type of the instance to test.</typeparam>
            <param name="source">The source instance.</param>
            <returns><see langword="true"/> if <paramref name="source"/> is <see langword="null"/>;
            otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Cadru.Extensions.NullExtensions.IsNotNull``1(``0)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether <paramref name="source"/>
            is not <see langword="null"/>.
            </summary>
            <typeparam name="T">The type of the instance to test.</typeparam>
            <param name="source">The source instance.</param>
            <returns><see langword="true"/> if <paramref name="source"/> is not <see langword="null"/>;
            otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:Cadru.Extensions.NumericExtensions">
            <summary>
            Provides basic routines for common numeric manipulation.
            </summary>
        </member>
        <member name="M:Cadru.Extensions.NumericExtensions.Between(System.Byte,System.Byte,System.Byte)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether <paramref name="expression"/>
            is between the minimum and maximum indicated.
            </summary>
            <param name="expression">Any byte value.</param>
            <param name="min">The minimum byte value.</param>
            <param name="max">The maximum byte value.</param>
            <returns>Between returns <see langword="true"/> if <paramref name="expression"/> is greater than
            the minimum value but less than the maximum value; otherwise it 
            returns <see langword="false"/>.</returns>
        </member>
        <member name="M:Cadru.Extensions.NumericExtensions.Between(System.Byte,System.Byte,System.Byte,Cadru.Text.NumericComparisonOptions)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether <paramref name="expression"/>
            is between the minimum and maximum indicated.
            </summary>
            <param name="expression">Any byte value.</param>
            <param name="min">The minimum byte value.</param>
            <param name="max">The maximum byte value.</param>
            <param name="options">A bitwise combination of enumeration values 
            that defines whether the comparison is inclusive.</param>
            <returns>Between returns <see langword="true"/> if <paramref name="expression"/> is greater than
            the minimum value but less than the maximum value; otherwise it 
            returns <see langword="false"/>.</returns>
        </member>
        <member name="M:Cadru.Extensions.NumericExtensions.Between(System.Decimal,System.Decimal,System.Decimal)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether <paramref name="expression"/>
            is between the minimum and maximum indicated.
            </summary>
            <param name="expression">Any decimal value.</param>
            <param name="min">The minimum decimal value.</param>
            <param name="max">The maximum decimal value.</param>
            <returns>Between returns <see langword="true"/> if <paramref name="expression"/> is greater than
            the minimum value but less than the maximum value; otherwise it 
            returns <see langword="false"/>.</returns>
        </member>
        <member name="M:Cadru.Extensions.NumericExtensions.Between(System.Decimal,System.Decimal,System.Decimal,Cadru.Text.NumericComparisonOptions)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether <paramref name="expression"/>
            is between the minimum and maximum indicated.
            </summary>
            <param name="expression">Any decimal value.</param>
            <param name="min">The minimum decimal value.</param>
            <param name="max">The maximum decimal value.</param>
            <param name="options">A bitwise combination of enumeration values 
            that defines whether the comparison is inclusive.</param>
            <returns>Between returns <see langword="true"/> if <paramref name="expression"/> is greater than
            the minimum value but less than the maximum value; otherwise it 
            returns <see langword="false"/>.</returns>
        </member>
        <member name="M:Cadru.Extensions.NumericExtensions.Between(System.Double,System.Double,System.Double)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether <paramref name="expression"/>
            is between the minimum and maximum indicated.
            </summary>
            <param name="expression">Any double value.</param>
            <param name="min">The minimum double value.</param>
            <param name="max">The maximum double value.</param>
            <returns>Between returns <see langword="true"/> if <paramref name="expression"/> is greater than
            the minimum value but less than the maximum value; otherwise it 
            returns <see langword="false"/>.</returns>
        </member>
        <member name="M:Cadru.Extensions.NumericExtensions.Between(System.Double,System.Double,System.Double,Cadru.Text.NumericComparisonOptions)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether <paramref name="expression"/>
            is between the minimum and maximum indicated.
            </summary>
            <param name="expression">Any double value.</param>
            <param name="min">The minimum double value.</param>
            <param name="max">The maximum double value.</param>
            <param name="options">A bitwise combination of enumeration values 
            that defines whether the comparison is inclusive.</param>
            <returns>Between returns <see langword="true"/> if <paramref name="expression"/> is greater than
            the minimum value but less than the maximum value; otherwise it 
            returns <see langword="false"/>.</returns>
        </member>
        <member name="M:Cadru.Extensions.NumericExtensions.Between(System.Int16,System.Int16,System.Int16)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether <paramref name="expression"/>
            is between the minimum and maximum indicated.
            </summary>
            <param name="expression">Any short value.</param>
            <param name="min">The minimum short value.</param>
            <param name="max">The maximum short value.</param>
            <returns>Between returns <see langword="true"/> if <paramref name="expression"/> is greater than
            the minimum value but less than the maximum value; otherwise it 
            returns <see langword="false"/>.</returns>
        </member>
        <member name="M:Cadru.Extensions.NumericExtensions.Between(System.Int16,System.Int16,System.Int16,Cadru.Text.NumericComparisonOptions)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether <paramref name="expression"/>
            is between the minimum and maximum indicated.
            </summary>
            <param name="expression">Any short value.</param>
            <param name="min">The minimum short value.</param>
            <param name="max">The maximum short value.</param>
            <param name="options">A bitwise combination of enumeration values 
            that defines whether the comparison is inclusive.</param>
            <returns>Between returns <see langword="true"/> if <paramref name="expression"/> is greater than
            the minimum value but less than the maximum value; otherwise it 
            returns <see langword="false"/>.</returns>
        </member>
        <member name="M:Cadru.Extensions.NumericExtensions.Between(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether <paramref name="expression"/>
            is between the minimum and maximum indicated.
            </summary>
            <param name="expression">Any integer value.</param>
            <param name="min">The minimum integer value.</param>
            <param name="max">The maximum integer value.</param>
            <returns>Between returns <see langword="true"/> if <paramref name="expression"/> is greater than
            the minimum value but less than the maximum value; otherwise it 
            returns <see langword="false"/>.</returns>
        </member>
        <member name="M:Cadru.Extensions.NumericExtensions.Between(System.Int32,System.Int32,System.Int32,Cadru.Text.NumericComparisonOptions)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether <paramref name="expression"/>
            is between the minimum and maximum indicated.
            </summary>
            <param name="expression">Any integer value.</param>
            <param name="min">The minimum integer value.</param>
            <param name="max">The maximum integer value.</param>
            <param name="options">A bitwise combination of enumeration values 
            that defines whether the comparison is inclusive.</param>
            <returns>Between returns <see langword="true"/> if <paramref name="expression"/> is greater than
            the minimum value but less than the maximum value; otherwise it 
            returns <see langword="false"/>.</returns>
        </member>
        <member name="M:Cadru.Extensions.NumericExtensions.Between(System.Int64,System.Int64,System.Int64)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether <paramref name="expression"/>
            is between the minimum and maximum indicated.
            </summary>
            <param name="expression">Any long value.</param>
            <param name="min">The minimum long value.</param>
            <param name="max">The maximum long value.</param>
            <returns>Between returns <see langword="true"/> if <paramref name="expression"/> is greater than
            the minimum value but less than the maximum value; otherwise it 
            returns <see langword="false"/>.</returns>
        </member>
        <member name="M:Cadru.Extensions.NumericExtensions.Between(System.Int64,System.Int64,System.Int64,Cadru.Text.NumericComparisonOptions)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether <paramref name="expression"/>
            is between the minimum and maximum indicated.
            </summary>
            <param name="expression">Any long value.</param>
            <param name="min">The minimum long value.</param>
            <param name="max">The maximum long value.</param>
            <param name="options">A bitwise combination of enumeration values 
            that defines whether the comparison is inclusive.</param>
            <returns>Between returns <see langword="true"/> if <paramref name="expression"/> is greater than
            the minimum value but less than the maximum value; otherwise it 
            returns <see langword="false"/>.</returns>
        </member>
        <member name="M:Cadru.Extensions.NumericExtensions.Between(System.Single,System.Single,System.Single)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether <paramref name="expression"/>
            is between the minimum and maximum indicated.
            </summary>
            <param name="expression">Any single value.</param>
            <param name="min">The minimum single value.</param>
            <param name="max">The maximum single value.</param>
            <returns>Between returns <see langword="true"/> if <paramref name="expression"/> is greater than
            the minimum value but less than the maximum value; otherwise it 
            returns <see langword="false"/>.</returns>
        </member>
        <member name="M:Cadru.Extensions.NumericExtensions.Between(System.Single,System.Single,System.Single,Cadru.Text.NumericComparisonOptions)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether <paramref name="expression"/>
            is between the minimum and maximum indicated.
            </summary>
            <param name="expression">Any single value.</param>
            <param name="min">The minimum single value.</param>
            <param name="max">The maximum single value.</param>
            <param name="options">A bitwise combination of enumeration values 
            that defines whether the comparison is inclusive.</param>
            <returns>Between returns <see langword="true"/> if <paramref name="expression"/> is greater than
            the minimum value but less than the maximum value; otherwise it 
            returns <see langword="false"/>.</returns>
        </member>
        <member name="M:Cadru.Extensions.NumericExtensions.GreaterThan(System.Byte,System.Byte)">
            <overloads>
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether 
            <paramref name="expression"/> is greater than the minimum indicated.
            </summary>
            </overloads>
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether
            <paramref name="expression"/> is greater than the minimum indicated.
            </summary>
            <param name="expression">The value to test.</param>
            <param name="min">The minimum value to compare against.</param>
            <returns>
            <see langword="true"/> if <paramref name="expression"/>
            is greater than the minimum indicated; otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.NumericExtensions.GreaterThan(System.Decimal,System.Decimal)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether
            <paramref name="expression"/> is greater than the minimum indicated.
            </summary>
            <param name="expression">The value to test.</param>
            <param name="min">The minimum value to compare against.</param>
            <returns>
            <see langword="true"/> if <paramref name="expression"/>
            is greater than the minimum indicated; otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.NumericExtensions.GreaterThan(System.Double,System.Double)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether
            <paramref name="expression"/> is greater than the minimum indicated.
            </summary>
            <param name="expression">The value to test.</param>
            <param name="min">The minimum value to compare against.</param>
            <returns>
            <see langword="true"/> if <paramref name="expression"/>
            is greater than the minimum indicated; otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.NumericExtensions.GreaterThan(System.Int16,System.Int16)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether
            <paramref name="expression"/> is greater than the minimum indicated.
            </summary>
            <param name="expression">The value to test.</param>
            <param name="min">The minimum value to compare against.</param>
            <returns>
            <see langword="true"/> if <paramref name="expression"/>
            is greater than the minimum indicated; otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.NumericExtensions.GreaterThan(System.Int32,System.Int32)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether
            <paramref name="expression"/> is greater than the minimum indicated.
            </summary>
            <param name="expression">The value to test.</param>
            <param name="min">The minimum value to compare against.</param>
            <returns>
            <see langword="true"/> if <paramref name="expression"/>
            is greater than the minimum indicated; otherwise <see clangwordref="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.NumericExtensions.GreaterThan(System.Int64,System.Int64)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether
            <paramref name="expression"/> is greater than the minimum indicated.
            </summary>
            <param name="expression">The value to test.</param>
            <param name="min">The minimum value to compare against.</param>
            <returns>
            <see langword="true"/> if <paramref name="expression"/>
            is greater than the minimum indicated; otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.NumericExtensions.GreaterThan(System.Single,System.Single)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether
            <paramref name="expression"/> is greater than the minimum indicated.
            </summary>
            <param name="expression">The value to test.</param>
            <param name="min">The minimum value to compare against.</param>
            <returns>
            <see langword="true"/> if <paramref name="expression"/>
            is greater than the minimum indicated; otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.NumericExtensions.GreaterThanOrEqualTo(System.Byte,System.Byte)">
            <overloads>
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether 
            <paramref name="expression"/> is greater than or equal to the
            minimum indicated.
            </summary>
            </overloads>
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether
            <paramref name="expression"/> is greater than or equal to the
            minimum indicated.
            </summary>
            <param name="expression">The value to test.</param>
            <param name="min">The minimum value to compare against.</param>
            <returns>
            <see langword="true"/> if <paramref name="expression"/>
            is greater than or equal to the minimum indicated;
            otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.NumericExtensions.GreaterThanOrEqualTo(System.Decimal,System.Decimal)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether
            <paramref name="expression"/> is greater than or equal to the
            minimum indicated.
            </summary>
            <param name="expression">Any decimal value.</param>
            <param name="min">The minimum decimal value.</param>
            <returns>
            <see langword="true"/> if <paramref name="expression"/>
            is greater than or equal to the minimum indicated;
            otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.NumericExtensions.GreaterThanOrEqualTo(System.Double,System.Double)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether
            <paramref name="expression"/> is greater than or equal to the
            minimum indicated.
            </summary>
            <param name="expression">The value to test.</param>
            <param name="min">The minimum value to compare against.</param>
            <returns>
            <see langword="true"/> if <paramref name="expression"/>
            is greater than or equal to the minimum indicated;
            otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.NumericExtensions.GreaterThanOrEqualTo(System.Int16,System.Int16)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether
            <paramref name="expression"/> is greater than or equal to the
            minimum indicated.
            </summary>
            <param name="expression">The value to test.</param>
            <param name="min">The minimum value to compare against.</param>
            <returns>
            <see langword="true"/> if <paramref name="expression"/>
            is greater than or equal to the minimum indicated;
            otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.NumericExtensions.GreaterThanOrEqualTo(System.Int32,System.Int32)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether
            <paramref name="expression"/> is greater than or equal to the
            minimum indicated.
            </summary>
            <param name="expression">The value to test.</param>
            <param name="min">The minimum value to compare against.</param>
            <returns>
            <see langword="true"/> if <paramref name="expression"/>
            is greater than or equal to the minimum indicated;
            otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.NumericExtensions.GreaterThanOrEqualTo(System.Int64,System.Int64)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether
            <paramref name="expression"/> is greater than or equal to the
            minimum indicated.
            </summary>
            <param name="expression">The value to test.</param>
            <param name="min">The minimum value to compare against.</param>
            <returns>
            <see langword="true"/> if <paramref name="expression"/>
            is greater than or equal to the minimum indicated;
            otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.NumericExtensions.GreaterThanOrEqualTo(System.Single,System.Single)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether
            <paramref name="expression"/> is greater than or equal to the
            minimum indicated.
            </summary>
            <param name="expression">The value to test.</param>
            <param name="min">The minimum value to compare against.</param>
            <returns>
            <see langword="true"/> if <paramref name="expression"/>
            is greater than or equal to the minimum indicated;
            otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.NumericExtensions.IsEven(System.Int32)">
            <overloads>
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether 
            <paramref name="expression"/> is an even number.
            </summary>
            </overloads>
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether 
            <paramref name="expression"/> is an even number.
            </summary>
            <param name="expression">The value to test.</param>
            <returns>
            <see langword="true"/> if <paramref name="expression"/>
            is an even number; otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.NumericExtensions.IsEven(System.Int16)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether 
            <paramref name="expression"/> is an even number.
            </summary>
            <param name="expression">The value to test.</param>
            <returns>
            <see langword="true"/> if <paramref name="expression"/>
            is an even number; otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.NumericExtensions.IsEven(System.Int64)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether 
            <paramref name="expression"/> is an even number.
            </summary>
            <param name="expression">The value to test.</param>
            <returns>
            <see langword="true"/> if <paramref name="expression"/>
            is an even number; otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.NumericExtensions.IsEven(System.Decimal)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether 
            <paramref name="expression"/> is an even number.
            </summary>
            <param name="expression">The value to test.</param>
            <returns>
            <see langword="true"/> if <paramref name="expression"/>
            is an even number; otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.NumericExtensions.IsEven(System.Double)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether 
            <paramref name="expression"/> is an even number.
            </summary>
            <param name="expression">The value to test.</param>
            <returns>
            <see langword="true"/> if <paramref name="expression"/>
            is an even number; otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.NumericExtensions.IsEven(System.Single)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether 
            <paramref name="expression"/> is an even number.
            </summary>
            <param name="expression">The value to test.</param>
            <returns>
            <see langword="true"/> if <paramref name="expression"/>
            is an even number; otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.NumericExtensions.IsOdd(System.Int32)">
            <overloads>
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether 
            <paramref name="expression"/> is an odd number.
            </summary>
            </overloads>
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether 
            <paramref name="expression"/> is an odd number.
            </summary>
            <param name="expression">The value to test.</param>
            <returns>
            <see langword="true"/> if <paramref name="expression"/>
            is an odd number; otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.NumericExtensions.IsOdd(System.Int16)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether 
            <paramref name="expression"/> is an odd number.
            </summary>
            <param name="expression">The value to test.</param>
            <returns>
            <see langword="true"/> if <paramref name="expression"/>
            is an odd number; otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.NumericExtensions.IsOdd(System.Int64)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether 
            <paramref name="expression"/> is an odd number.
            </summary>
            <param name="expression">The value to test.</param>
            <returns>
            <see langword="true"/> if <paramref name="expression"/>
            is an odd number; otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.NumericExtensions.IsOdd(System.Decimal)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether 
            <paramref name="expression"/> is an odd number.
            </summary>
            <param name="expression">The value to test.</param>
            <returns>
            <see langword="true"/> if <paramref name="expression"/>
            is an odd number; otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.NumericExtensions.IsOdd(System.Double)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether 
            <paramref name="expression"/> is an odd number.
            </summary>
            <param name="expression">The value to test.</param>
            <returns>
            <see langword="true"/> if <paramref name="expression"/>
            is an odd number; otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.NumericExtensions.IsOdd(System.Single)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether 
            <paramref name="expression"/> is an odd number.
            </summary>
            <param name="expression">The value to test.</param>
            <returns>
            <see langword="true"/> if <paramref name="expression"/>
            is an odd number; otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.NumericExtensions.LessThan(System.Byte,System.Byte)">
            <overloads>
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether 
            <paramref name="expression"/> is less than the minimum indicated.
            </summary>
            </overloads>
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether
            <paramref name="expression"/> is less than the minimum indicated.
            </summary>
            <param name="expression">The value to test.</param>
            <param name="min">The minimum value to compare against.</param>
            <returns>
            <see langword="true"/> if <paramref name="expression"/>
            is less than the minimum indicated; otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.NumericExtensions.LessThan(System.Decimal,System.Decimal)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether
            <paramref name="expression"/> is less than the minimum indicated.
            </summary>
            <param name="expression">The value to test.</param>
            <param name="min">The minimum value to compare against.</param>
            <returns>
            <see langword="true"/> if <paramref name="expression"/>
            is less than the minimum indicated; otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.NumericExtensions.LessThan(System.Double,System.Double)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether
            <paramref name="expression"/> is less than the minimum indicated.
            </summary>
            <param name="expression">The value to test.</param>
            <param name="min">The minimum value to compare against.</param>
            <returns>
            <see langword="true"/> if <paramref name="expression"/>
            is less than the minimum indicated; otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.NumericExtensions.LessThan(System.Int16,System.Int16)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether
            <paramref name="expression"/> is less than the minimum indicated.
            </summary>
            <param name="expression">The value to test.</param>
            <param name="min">The minimum value to compare against.</param>
            <returns>
            <see langword="true"/> if <paramref name="expression"/>
            is less than the minimum indicated; otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.NumericExtensions.LessThan(System.Int32,System.Int32)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether
            <paramref name="expression"/> is less than the minimum indicated.
            </summary>
            <param name="expression">The value to test.</param>
            <param name="min">The minimum value to compare against.</param>
            <returns>
            <see langword="true"/> if <paramref name="expression"/>
            is less than the minimum indicated; otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.NumericExtensions.LessThan(System.Int64,System.Int64)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether
            <paramref name="expression"/> is less than the minimum indicated.
            </summary>
            <param name="expression">The value to test.</param>
            <param name="min">The minimum value to compare against.</param>
            <returns>
            <see langword="true"/> if <paramref name="expression"/>
            is less than the minimum indicated; otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.NumericExtensions.LessThan(System.Single,System.Single)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether
            <paramref name="expression"/> is less than the minimum indicated.
            </summary>
            <param name="expression">The value to test.</param>
            <param name="min">The minimum value to compare against.</param>
            <returns>
            <see langword="true"/> if <paramref name="expression"/>
            is less than the minimum indicated; otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.NumericExtensions.LessThanOrEqualTo(System.Byte,System.Byte)">
            <overloads>
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether 
            <paramref name="expression"/> is less than or equal to the
            minimum indicated.
            </summary>
            </overloads>
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether
            <paramref name="expression"/> is less than or equal to the
            minimum indicated.
            </summary>
            <param name="expression">The value to test.</param>
            <param name="min">The minimum value to compare against.</param>
            <returns>
            <see langword="true"/> if <paramref name="expression"/>
            is less than or equal to the minimum indicated;
            otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.NumericExtensions.LessThanOrEqualTo(System.Decimal,System.Decimal)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether
            <paramref name="expression"/> is less than or equal to the
            minimum indicated.
            </summary>
            <param name="expression">Any decimal value.</param>
            <param name="min">The minimum decimal value.</param>
            <returns>
            <see langword="true"/> if <paramref name="expression"/>
            is less than or equal to the minimum indicated;
            otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.NumericExtensions.LessThanOrEqualTo(System.Double,System.Double)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether
            <paramref name="expression"/> is less than or equal to the
            minimum indicated.
            </summary>
            <param name="expression">The value to test.</param>
            <param name="min">The minimum value to compare against.</param>
            <returns>
            <see langword="true"/> if <paramref name="expression"/>
            is less than or equal to the minimum indicated;
            otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.NumericExtensions.LessThanOrEqualTo(System.Int16,System.Int16)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether
            <paramref name="expression"/> is less than or equal to the
            minimum indicated.
            </summary>
            <param name="expression">The value to test.</param>
            <param name="min">The minimum value to compare against.</param>
            <returns>
            <see langword="true"/> if <paramref name="expression"/>
            is less than or equal to the minimum indicated;
            otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.NumericExtensions.LessThanOrEqualTo(System.Int32,System.Int32)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether
            <paramref name="expression"/> is less than or equal to the
            minimum indicated.
            </summary>
            <param name="expression">The value to test.</param>
            <param name="min">The minimum value to compare against.</param>
            <returns>
            <see langword="true"/> if <paramref name="expression"/>
            is less than or equal to the minimum indicated;
            otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.NumericExtensions.LessThanOrEqualTo(System.Int64,System.Int64)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether
            <paramref name="expression"/> is less than or equal to the
            minimum indicated.
            </summary>
            <param name="expression">The value to test.</param>
            <param name="min">The minimum value to compare against.</param>
            <returns>
            <see langword="true"/> if <paramref name="expression"/>
            is less than or equal to the minimum indicated;
            otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.NumericExtensions.LessThanOrEqualTo(System.Single,System.Single)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether
            <paramref name="expression"/> is less than or equal to the
            minimum indicated.
            </summary>
            <param name="expression">The value to test.</param>
            <param name="min">The minimum value to compare against.</param>
            <returns>
            <see langword="true"/> if <paramref name="expression"/>
            is less than or equal to the minimum indicated;
            otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="T:Cadru.Extensions.StringBuilderExtensions">
            <summary>
            Provides basic routines for common <see cref="T:System.Text.StringBuilder"/> manipulation.
            </summary>
        </member>
        <member name="M:Cadru.Extensions.StringBuilderExtensions.AppendAsHexadecimal(System.Text.StringBuilder,System.Int32)">
            <summary>
            Appends the hexadecimal string representation of a specified
            <see cref="T:System.Int32"/> value to this instance.
            </summary>
            <param name="source">The source <see cref="T:System.Text.StringBuilder"/> instance.</param>
            <param name="value">The <see cref="T:System.Int32"/> value to append.</param>
            <returns>A reference to this instance after the append operation has, optionally, completed.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Enlarging the value of this instance would exceed <see cref="p:StringBuilder.MaxCapacity"/>.
            </exception>
        </member>
        <member name="M:Cadru.Extensions.StringBuilderExtensions.AppendAsHexadecimal(System.Text.StringBuilder,System.Int16)">
            <summary>
            Appends the hexadecimal string representation of a specified
            <see cref="T:System.Int16"/> value to this instance.
            </summary>
            <param name="source">The source <see cref="T:System.Text.StringBuilder"/> instance.</param>
            <param name="value">The <see cref="T:System.Int16"/> value to append.</param>
            <returns>A reference to this instance after the append operation has, optionally, completed.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Enlarging the value of this instance would exceed <see cref="p:StringBuilder.MaxCapacity"/>.
            </exception>
        </member>
        <member name="M:Cadru.Extensions.StringBuilderExtensions.AppendAsHexadecimal(System.Text.StringBuilder,System.Byte)">
            <summary>
            Appends the hexadecimal string representation of a specified
            <see cref="T:System.Byte"/> value to this instance.
            </summary>
            <param name="source">The source <see cref="T:System.Text.StringBuilder"/> instance.</param>
            <param name="value">The <see cref="T:System.Byte"/> value to append.</param>
            <returns>A reference to this instance after the append operation has, optionally, completed.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Enlarging the value of this instance would exceed <see cref="p:StringBuilder.MaxCapacity"/>.
            </exception>
        </member>
        <member name="M:Cadru.Extensions.StringBuilderExtensions.AppendAsHexadecimal(System.Text.StringBuilder,System.Byte[])">
            <summary>
            Appends the hexadecimal string representation of a specified
            <see cref="T:System.Byte"/> array to this instance.
            </summary>
            <param name="source">The source <see cref="T:System.Text.StringBuilder"/> instance.</param>
            <param name="values">The <see cref="T:System.Byte"/> array to append.</param>
            <returns>A reference to this instance after the append operation has, optionally, completed.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Enlarging the value of this instance would exceed <see cref="p:StringBuilder.MaxCapacity"/>.
            </exception>
        </member>
        <member name="M:Cadru.Extensions.StringBuilderExtensions.AppendFormatIf(System.Text.StringBuilder,System.Boolean,System.String,System.Object[])">
            <overloads>
            <summary>
            Appends the string returned by processing a composite format string, which
            contains zero or more format items, followed by the default line terminator to
            the end of this instance if <paramref name="condition"/> is <see langword="true"/>.
            </summary>
            </overloads>
            <summary>
            Appends the string returned by processing a composite format string, which
            contains zero or more format items, followed by the default line terminator to
            the end of this instance if <paramref name="condition"/> is <see langword="true"/>.
            </summary>
            <param name="source">The source <see cref="T:System.Text.StringBuilder"/> instance.</param>
            <param name="condition"><see langword="true"/> to append <paramref name="format"/>;
            otherwise, <see langword="false"/>.</param>
            <param name="format">A composite format string.</param>
            <param name="args">An array of objects to format.</param>
            <returns>A reference to <paramref name="source"/> with <paramref name="format"/>
            appended. Each format item in <paramref name="format"/> is replaced by the
            string representation of the corresponding object argument.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="format"/> or <paramref name="args"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.FormatException">
            <para><paramref name="format"/> is invalid.</para>
            <para>-or-</para>
            <para>The index of a format item is less than 0 (zero), or greater than or
            equal to the length of the args array.</para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The length of the expanded string would exceed 
            <see cref="p:StringBuilder.MaxCapacity"/>.
            </exception>
        </member>
        <member name="M:Cadru.Extensions.StringBuilderExtensions.AppendFormatIf(System.Text.StringBuilder,System.Boolean,System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Appends the string returned by processing a composite format string, which
            contains zero or more format items, followed by the default line terminator to
            the end of this instance if <paramref name="condition"/> is <see langword="true"/>.
            Each format item is replaced by the string representation of a corresponding 
            argument in a parameter array using a specified format provider.
            </summary>
            <param name="source">The source <see cref="T:System.Text.StringBuilder"/> instance.</param>
            <param name="condition"><see langword="true"/> to append <paramref name="format"/>;
            otherwise, <see langword="false"/>.</param>
            <param name="provider">An object that supplies culture-specific formatting information.</param>
            <param name="format">A composite format string.</param>
            <param name="args">An array of objects to format.</param>
            <returns>A reference to <paramref name="source"/> with <paramref name="format"/>
            appended, if <paramref name="condition"/> is <see langword="true"/>. Each format item in <paramref name="format"/> is replaced by the
            string representation of the corresponding object argument.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="format"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.FormatException">
            <para><paramref name="format"/> is invalid.</para>
            <para>-or-</para>
            <para>The index of a format item is less than 0 (zero), or greater than or
            equal to the length of the args array.</para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The length of the expanded string would exceed 
            <see cref="p:StringBuilder.MaxCapacity"/>.
            </exception>
        </member>
        <member name="M:Cadru.Extensions.StringBuilderExtensions.AppendFormatLine(System.Text.StringBuilder,System.String,System.Object[])">
            <overoads>
            <summary>
            Appends the string returned by processing a composite format string, which
            contains zero or more format items, followed by the default line terminator to
            the end of this instance.
            </summary>
            </overoads>
            <summary>
            Appends the string returned by processing a composite format string, which
            contains zero or more format items, followed by the default line terminator to
            the end of this instance.
            </summary>
            <param name="source">The source <see cref="T:System.Text.StringBuilder"/> instance.</param>
            <param name="format">A composite format string.</param>
            <param name="args">An array of objects to format.</param>
            <returns>A reference to <paramref name="source"/> with <paramref name="format"/>
            appended. Each format item in <paramref name="format"/> is replaced by the
            string representation of the corresponding object argument.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="format"/> or <paramref name="args"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.FormatException">
            <para><paramref name="format"/> is invalid.</para>
            <para>-or-</para>
            <para>The index of a format item is less than 0 (zero), or greater than or
            equal to the length of the args array.</para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The length of the expanded string would exceed 
            <see cref="p:StringBuilder.MaxCapacity"/>.
            </exception>
        </member>
        <member name="M:Cadru.Extensions.StringBuilderExtensions.AppendFormatLine(System.Text.StringBuilder,System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Appends the string returned by processing a composite format string, which
            contains zero or more format items, followed by the default line terminator to
            the end of this instance. Each format item is
            replaced by the string representation of a corresponding argument in a parameter
            array using a specified format provider.
            </summary>
            <param name="source">The source <see cref="T:System.Text.StringBuilder"/> object.</param>
            <param name="provider">An object that supplies culture-specific formatting information.</param>
            <param name="format">A composite format string.</param>
            <param name="args">An array of objects to format.</param>
            <returns>A reference to <paramref name="source"/> with <paramref name="format"/>
            appended. Each format item in <paramref name="format"/> is replaced by the
            string representation of the corresponding object argument.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="format"/> or <paramref name="args"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.FormatException">
            <para><paramref name="format"/> is invalid.</para>
            <para>-or-</para>
            <para>The index of a format item is less than 0 (zero), or greater than or
            equal to the length of the args array.</para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The length of the expanded string would exceed 
            <see cref="p:StringBuilder.MaxCapacity"/>.
            </exception>
        </member>
        <member name="M:Cadru.Extensions.StringBuilderExtensions.AppendFormatLineIf(System.Text.StringBuilder,System.Boolean,System.String,System.Object[])">
            <overloads>
            <summary>
            Appends the string returned by processing a composite format string, which
            contains zero or more format items, followed by the default line terminator to
            the end of this instance if <paramref name="condition"/> is <see langword="true"/>.
            </summary>
            </overloads>
            <summary>
            Appends the string returned by processing a composite format string, which
            contains zero or more format items, followed by the default line terminator to
            the end of this instance if <paramref name="condition"/> is <see langword="true"/>.
            </summary>
            <param name="source">The source <see cref="T:System.Text.StringBuilder"/> object.</param>
            <param name="condition"><see langword="true"/> to append <paramref name="format"/>;
            otherwise, <see langword="false"/>.</param>
            <param name="format">A composite format string.</param>
            <param name="args">An array of objects to format.</param>
            <returns>A reference to <paramref name="source"/> with <paramref name="format"/>
            appended. Each format item in <paramref name="format"/> is replaced by the
            string representation of the corresponding object argument.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="format"/> or <paramref name="args"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.FormatException">
            <para><paramref name="format"/> is invalid.</para>
            <para>-or-</para>
            <para>The index of a format item is less than 0 (zero), or greater than or
            equal to the length of the args array.</para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The length of the expanded string would exceed 
            <see cref="p:StringBuilder.MaxCapacity"/>.
            </exception>
        </member>
        <member name="M:Cadru.Extensions.StringBuilderExtensions.AppendFormatLineIf(System.Text.StringBuilder,System.Boolean,System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Appends the string returned by processing a composite format string, which
            contains zero or more format items, followed by the default line terminator to
            the end of this instance if <paramref name="condition"/> is <see langword="true"/>.
            Each format item is replaced by the string representation of a corresponding 
            argument in a parameter array using a specified format provider.
            </summary>
            <param name="source">The source <see cref="T:System.Text.StringBuilder"/> object.</param>
            <param name="condition"><see langword="true"/> to append <paramref name="format"/>;
            otherwise, <see langword="false"/>.</param>
            <param name="provider">An object that supplies culture-specific formatting information.</param>
            <param name="format">A composite format string.</param>
            <param name="args">An array of objects to format.</param>
            <returns>A reference to <paramref name="source"/> with <paramref name="format"/>
            appended. Each format item in <paramref name="format"/> is replaced by the
            string representation of the corresponding object argument.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="format"/> or <paramref name="args"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.FormatException">
            <para><paramref name="format"/> is invalid.</para>
            <para>-or-</para>
            <para>The index of a format item is less than 0 (zero), or greater than or
            equal to the length of the args array.</para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The length of the expanded string would exceed 
            <see cref="p:StringBuilder.MaxCapacity"/>.
            </exception>
        </member>
        <member name="M:Cadru.Extensions.StringBuilderExtensions.AppendIf(System.Text.StringBuilder,System.Boolean,System.Boolean)">
            <overloads>
            <summary>Appends the string representation of a specified object to this instance.</summary>
            </overloads>
            <summary>
            Appends the string representation of a specified <see cref="T:System.Boolean"/> value to this instance
            if <paramref name="condition"/> is <see langword="true"/>.
            </summary>
            <param name="source">The source <see cref="T:System.Text.StringBuilder"/> instance.</param>
            <param name="condition"><see langword="true"/> to append <paramref name="value"/>;
            otherwise, <see langword="false"/>.</param>
            <param name="value">The <see cref="T:System.Boolean"/> value to append.</param>
            <returns>A reference to this instance after the append operation has, optionally, completed.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Enlarging the value of this instance would exceed <see cref="p:StringBuilder.MaxCapacity"/>.
            </exception>
        </member>
        <member name="M:Cadru.Extensions.StringBuilderExtensions.AppendIf(System.Text.StringBuilder,System.Boolean,System.Byte)">
            <summary>
            Appends the string representation of a specified 8-bit unsigned integer to this instance
            if <paramref name="condition"/> is <see langword="true"/>.
            </summary>
            <param name="source">The source <see cref="T:System.Text.StringBuilder"/> instance.</param>
            <param name="condition"><see langword="true"/> to append <paramref name="value"/>;
            otherwise, <see langword="false"/>.</param>
            <param name="value">The value to append.</param>
            <returns>A reference to this instance after the append operation has, optionally, completed.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Enlarging the value of this instance would exceed <see cref="p:StringBuilder.MaxCapacity"/>.
            </exception>
        </member>
        <member name="M:Cadru.Extensions.StringBuilderExtensions.AppendIf(System.Text.StringBuilder,System.Boolean,System.Char)">
            <summary>
            Appends the string representation of a specified Unicode character to this instance
            if <paramref name="condition"/> is <see langword="true"/>.
            </summary>
            <param name="source">The source <see cref="T:System.Text.StringBuilder"/> instance.</param>
            <param name="condition"><see langword="true"/> to append <paramref name="value"/>;
            otherwise, <see langword="false"/>.</param>
            <param name="value">The Unicode character to append.</param>
            <returns>A reference to this instance after the append operation has, optionally, completed.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Enlarging the value of this instance would exceed <see cref="p:StringBuilder.MaxCapacity"/>.
            </exception>
        </member>
        <member name="M:Cadru.Extensions.StringBuilderExtensions.AppendIf(System.Text.StringBuilder,System.Boolean,System.Char[])">
            <summary>
            Appends the string representation of Unicode characters in a specified array to this instance
            if <paramref name="condition"/> is <see langword="true"/>.
            </summary>
            <param name="source">The source <see cref="T:System.Text.StringBuilder"/> instance.</param>
            <param name="condition"><see langword="true"/> to append <paramref name="value"/>;
            otherwise, <see langword="false"/>.</param>
            <param name="value">The array of characters to append.</param>
            <returns>A reference to this instance after the append operation has, optionally, completed.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Enlarging the value of this instance would exceed <see cref="p:StringBuilder.MaxCapacity"/>.
            </exception>
        </member>
        <member name="M:Cadru.Extensions.StringBuilderExtensions.AppendIf(System.Text.StringBuilder,System.Boolean,System.Double)">
            <summary>
            Appends the string representation of a specified double-precision floating-point number to this instance
            if <paramref name="condition"/> is <see langword="true"/>.
            </summary>
            <param name="source">The source <see cref="T:System.Text.StringBuilder"/> instance.</param>
            <param name="condition"><see langword="true"/> to append <paramref name="value"/>;
            otherwise, <see langword="false"/>.</param>
            <param name="value">The value to append.</param>
            <returns>A reference to this instance after the append operation has, optionally, completed.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Enlarging the value of this instance would exceed <see cref="p:StringBuilder.MaxCapacity"/>.
            </exception>
        </member>
        <member name="M:Cadru.Extensions.StringBuilderExtensions.AppendIf(System.Text.StringBuilder,System.Boolean,System.Single)">
            <summary>
            Appends the string representation of a specified single-precision floating-point number to this instance
            if <paramref name="condition"/> is <see langword="true"/>.
            </summary>
            <param name="source">The source <see cref="T:System.Text.StringBuilder"/> instance.</param>
            <param name="condition"><see langword="true"/> to append <paramref name="value"/>;
            otherwise, <see langword="false"/>.</param>
            <param name="value">The value to append.</param>
            <returns>A reference to this instance after the append operation has, optionally, completed.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Enlarging the value of this instance would exceed <see cref="p:StringBuilder.MaxCapacity"/>.
            </exception>
        </member>
        <member name="M:Cadru.Extensions.StringBuilderExtensions.AppendIf(System.Text.StringBuilder,System.Boolean,System.Int32)">
            <summary>
            Appends the string representation of a specified 32-bit signed integer to this instance
            if <paramref name="condition"/> is <see langword="true"/>.
            </summary>
            <param name="source">The source <see cref="T:System.Text.StringBuilder"/> instance.</param>
            <param name="condition"><see langword="true"/> to append <paramref name="value"/>;
            otherwise, <see langword="false"/>.</param>
            <param name="value">The value to append.</param>
            <returns>A reference to this instance after the append operation has, optionally, completed.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Enlarging the value of this instance would exceed <see cref="p:StringBuilder.MaxCapacity"/>.
            </exception>
        </member>
        <member name="M:Cadru.Extensions.StringBuilderExtensions.AppendIf(System.Text.StringBuilder,System.Boolean,System.Int64)">
            <summary>
            Appends the string representation of a specified 64-bit signed integer to this instance
            if <paramref name="condition"/> is <see langword="true"/>.
            </summary>
            <param name="source">The source <see cref="T:System.Text.StringBuilder"/> instance.</param>
            <param name="condition"><see langword="true"/> to append <paramref name="value"/>;
            otherwise, <see langword="false"/>.</param>
            <param name="value">The value to append.</param>
            <returns>A reference to this instance after the append operation has, optionally, completed.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Enlarging the value of this instance would exceed <see cref="p:StringBuilder.MaxCapacity"/>.
            </exception>
        </member>
        <member name="M:Cadru.Extensions.StringBuilderExtensions.AppendIf(System.Text.StringBuilder,System.Boolean,System.Object)">
            <summary>
            Appends the string representation of a specified object to this instance
            if <paramref name="condition"/> is <see langword="true"/>.
            </summary>
            <param name="source">The source <see cref="T:System.Text.StringBuilder"/> instance.</param>
            <param name="condition"><see langword="true"/> to append <paramref name="value"/>;
            otherwise, <see langword="false"/>.</param>
            <param name="value">The value to append.</param>
            <returns>A reference to this instance after the append operation has, optionally, completed.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Enlarging the value of this instance would exceed <see cref="p:StringBuilder.MaxCapacity"/>.
            </exception>
        </member>
        <member name="M:Cadru.Extensions.StringBuilderExtensions.AppendIf(System.Text.StringBuilder,System.Boolean,System.SByte)">
            <summary>
            Appends the string representation of a specified 8-bit signed integer to this instance
            if <paramref name="condition"/> is <see langword="true"/>.
            </summary>
            <param name="source">The source <see cref="T:System.Text.StringBuilder"/> instance.</param>
            <param name="condition"><see langword="true"/> to append <paramref name="value"/>;
            otherwise, <see langword="false"/>.</param>
            <param name="value">The value to append.</param>
            <returns>A reference to this instance after the append operation has, optionally, completed.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Enlarging the value of this instance would exceed <see cref="p:StringBuilder.MaxCapacity"/>.
            </exception>
        </member>
        <member name="M:Cadru.Extensions.StringBuilderExtensions.AppendIf(System.Text.StringBuilder,System.Boolean,System.Int16)">
            <summary>
            Appends the string representation of a specified 16-bit signed integer to this instance
            if <paramref name="condition"/> is <see langword="true"/>.
            </summary>
            <param name="source">The source <see cref="T:System.Text.StringBuilder"/> instance.</param>
            <param name="condition"><see langword="true"/> to append <paramref name="value"/>;
            otherwise, <see langword="false"/>.</param>
            <param name="value">The value to append.</param>
            <returns>A reference to this instance after the append operation has, optionally, completed.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Enlarging the value of this instance would exceed <see cref="p:StringBuilder.MaxCapacity"/>.
            </exception>
        </member>
        <member name="M:Cadru.Extensions.StringBuilderExtensions.AppendIf(System.Text.StringBuilder,System.Boolean,System.String)">
            <summary>
            Appends the string representation of the specified 8-bit unsigned integer to this instance
            if <paramref name="condition"/> is <see langword="true"/>.
            </summary>
            <param name="source">The source <see cref="T:System.Text.StringBuilder"/> instance.</param>
            <param name="condition"><see langword="true"/> to append <paramref name="value"/>;
            otherwise, <see langword="false"/>.</param>
            <param name="value">The string to append.</param>
            <returns>A reference to this instance after the append operation has, optionally, completed.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Enlarging the value of this instance would exceed <see cref="p:StringBuilder.MaxCapacity"/>.
            </exception>
        </member>
        <member name="M:Cadru.Extensions.StringBuilderExtensions.AppendIf(System.Text.StringBuilder,System.Boolean,System.UInt32)">
            <summary>
            Appends the string representation of a specified 32-bit unsigned integer to this instance
            if <paramref name="condition"/> is <see langword="true"/>.
            </summary>
            <param name="source">The source <see cref="T:System.Text.StringBuilder"/> instance.</param>
            <param name="condition"><see langword="true"/> to append <paramref name="value"/>;
            otherwise, <see langword="false"/>.</param>
            <param name="value">The value to append.</param>
            <returns>A reference to this instance after the append operation has, optionally, completed.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Enlarging the value of this instance would exceed <see cref="p:StringBuilder.MaxCapacity"/>.
            </exception>
        </member>
        <member name="M:Cadru.Extensions.StringBuilderExtensions.AppendIf(System.Text.StringBuilder,System.Boolean,System.UInt64)">
            <summary>
            Appends the string representation of a specified 64-bit unsigned integer to this instance
            if <paramref name="condition"/> is <see langword="true"/>.
            </summary>
            <param name="source">The source <see cref="T:System.Text.StringBuilder"/> instance.</param>
            <param name="condition"><see langword="true"/> to append <paramref name="value"/>;
            otherwise, <see langword="false"/>.</param>
            <param name="value">The value to append.</param>
            <returns>A reference to this instance after the append operation has, optionally, completed.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Enlarging the value of this instance would exceed <see cref="p:StringBuilder.MaxCapacity"/>.
            </exception>
        </member>
        <member name="M:Cadru.Extensions.StringBuilderExtensions.AppendIf(System.Text.StringBuilder,System.Boolean,System.UInt16)">
            <summary>
            Appends the string representation of a specified 16-bit unsigned integer to this instance
            if <paramref name="condition"/> is <see langword="true"/>.
            </summary>
            <param name="source">The source <see cref="T:System.Text.StringBuilder"/> instance.</param>
            <param name="condition"><see langword="true"/> to append <paramref name="value"/>;
            otherwise, <see langword="false"/>.</param>
            <param name="value">The value to append.</param>
            <returns>A reference to this instance after the append operation has, optionally, completed.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Enlarging the value of this instance would exceed <see cref="p:StringBuilder.MaxCapacity"/>.
            </exception>
        </member>
        <member name="M:Cadru.Extensions.StringBuilderExtensions.AppendIf(System.Text.StringBuilder,System.Boolean,System.Char,System.Int32)">
            <summary>
            Appends a specified number of copies of the string representation of a 
            Unicode character to this instance
            if <paramref name="condition"/> is <see langword="true"/>.
            </summary>
            <param name="source">The source <see cref="T:System.Text.StringBuilder"/> instance.</param>
            <param name="condition"><see langword="true"/> to append <paramref name="value"/>;
            otherwise, <see langword="false"/>.</param>
            <param name="value">The character to append.</param>
            <param name="repeatCount">The number of times to append <paramref name="value"/>.</param>
            <returns>A reference to this instance after the append operation has, optionally, completed.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="repeatCount"/> is less than zero.</para>
            <para>-or-</para>
            <para>Enlarging the value of this instance would exceed <see cref="p:StringBuilder.MaxCapacity"/>.</para>
            </exception>
            <exception cref="T:System.OutOfMemoryException">Out of memory.</exception>
        </member>
        <member name="M:Cadru.Extensions.StringBuilderExtensions.AppendIf(System.Text.StringBuilder,System.Boolean,System.Char[],System.Int32,System.Int32)">
            <summary>
            Appends the string representation of a specified subarray of Unicode characters to this instance
            if <paramref name="condition"/> is <see langword="true"/>.
            </summary>
            <param name="source">The source <see cref="T:System.Text.StringBuilder"/> instance.</param>
            <param name="condition"><see langword="true"/> to append <paramref name="value"/>;
            otherwise, <see langword="false"/>.</param>
            <param name="value">A character array.</param>
            <param name="startIndex">The starting position in <paramref name="value"/>.</param>
            <param name="charCount">The number of characters to append.</param>
            <returns>A reference to this instance after the append operation has, optionally, completed.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is <see langword="null"/>, and <paramref name="startIndex"/>
            and <paramref name="charCount"/> are not zero.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="charCount"/> is less than zero.</para>
            <para>-or-</para>
            <para><paramref name="startIndex"/> is less than zero.</para>
            <para>-or-</para>
            <para><paramref name="startIndex"/> + <paramref name="charCount"/> is greater than the length of <paramref name="value"/>.</para>
            <para>-or-</para>
            <para>Enlarging the value of this instance would exceed <see cref="p:StringBuilder.MaxCapacity"/>.</para>
            </exception>
        </member>
        <member name="M:Cadru.Extensions.StringBuilderExtensions.AppendIf(System.Text.StringBuilder,System.Boolean,System.String,System.Int32,System.Int32)">
            <summary>
            Appends a copy of a specified substring to this instance
            if <paramref name="condition"/> is <see langword="true"/>.
            </summary>
            <param name="source">The source <see cref="T:System.Text.StringBuilder"/> instance.</param>
            <param name="condition"><see langword="true"/> to append <paramref name="value"/>;
            otherwise, <see langword="false"/>.</param>
            <param name="value">The string that contains the substring to append.</param>
            <param name="startIndex">The starting position of the substring within <paramref name="value"/>.</param>
            <param name="count">The number of characters in <paramref name="value"/> to append.</param>
            <returns>A reference to this instance after the append operation has, optionally, completed.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is <see langword="null"/>, and <paramref name="startIndex"/>
            and <paramref name="count"/> are not zero.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="count"/> is less than zero.</para>
            <para>-or-</para>
            <para><paramref name="startIndex"/> is less than zero.</para>
            <para>-or-</para>
            <para><paramref name="startIndex"/> + <paramref name="count"/> is greater than the length of <paramref name="value"/>.</para>
            <para>-or-</para>
            <para>Enlarging the value of this instance would exceed <see cref="p:StringBuilder.MaxCapacity"/>.</para>
            </exception>
        </member>
        <member name="M:Cadru.Extensions.StringBuilderExtensions.AppendLineIf(System.Text.StringBuilder,System.Boolean)">
            <overloads>
            <summary>
            Appends the default line terminator to the end of this instance if
            <paramref name="condition"/> is <see langword="true"/>.
            </summary>
            </overloads>
            <summary>
            Appends the default line terminator to the end of this instance if
            <paramref name="condition"/> is <see langword="true"/>.
            </summary>
            <param name="source">The source <see cref="T:System.Text.StringBuilder"/> object.</param>
            <param name="condition"><see langword="true"/> to append the default line terminator;
            otherwise, <see langword="false"/>.</param>
            <returns>A reference to this instance after the append operation has, optionally, completed.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The length of the expanded string would exceed 
            <see cref="p:StringBuilder.MaxCapacity"/>.
            </exception>
        </member>
        <member name="M:Cadru.Extensions.StringBuilderExtensions.AppendLineIf(System.Text.StringBuilder,System.Boolean,System.String)">
            <summary>
            Appends a copy of the specified string followed by the default line terminator
            to the end of this instance if <paramref name="condition"/> is <see langword="true"/>.
            </summary>
            <param name="source">The source <see cref="T:System.Text.StringBuilder"/> object.</param>
            <param name="condition"><see langword="true"/> to append <paramref name="value"/>;
            otherwise, <see langword="false"/>.</param>
            <param name="value">The string to append.</param>
            <returns>A reference to this instance after the append operation has, optionally, completed.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The length of the expanded string would exceed 
            <see cref="p:StringBuilder.MaxCapacity"/>.
            </exception>
        </member>
        <member name="T:Cadru.Extensions.TypeExtensions">
            <summary>
            Provides basic routines for common type manipulation.
            </summary>
        </member>
        <member name="M:Cadru.Extensions.TypeExtensions.IsNullable(System.Type)">
            <summary>
            Determines whether the specified type is nullable.
            </summary>
            <param name="type">The type to test.</param>
            <returns>
              <see langword="true"/> if the specified type is nullable; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="T:Cadru.Globalization.CountryCode">
            <summary>
            ISO 3166 country code expressions for international aware item 
            validation routines.
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.None">
            <summary>No country specified</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.Invariant">
            <summary>Invariant country specified (same as None)</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.AF">
            <summary>Afghanistan</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.AX">
            <summary>Åland Islands</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.AL">
            <summary>Albania</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.DZ">
            <summary>Algeria</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.AS">
            <summary>American Samoa</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.AD">
            <summary>Andorra</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.AO">
            <summary>Angola</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.AI">
            <summary>Anguilla</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.AQ">
            <summary>Antarctica</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.AG">
            <summary>Antigua And Barbuda</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.AR">
            <summary>Argentina</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.AM">
            <summary>Armenia</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.AW">
            <summary>Aruba</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.AU">
            <summary>Australia</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.AT">
            <summary>Austria</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.AZ">
            <summary>Azerbaijan</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.BS">
            <summary>Bahamas</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.BH">
            <summary>Bahrain</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.BD">
            <summary>Bangladesh</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.BB">
            <summary>Barbados</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.BY">
            <summary>Belarus</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.BE">
            <summary>Belgium</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.BZ">
            <summary>Belize</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.BJ">
            <summary>Benin</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.BM">
            <summary>Bermuda</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.BT">
            <summary>Bhutan</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.BO">
            <summary>Bolivia</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.BA">
            <summary>Bosnia And Herzegovina</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.BW">
            <summary>Botswana</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.BV">
            <summary>Bouvet Island</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.BR">
            <summary>Brazil</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.IO">
            <summary>British Indian Ocean Territory</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.BN">
            <summary>Brunei Darussalam</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.BG">
            <summary>Bulgaria</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.BF">
            <summary>Burkina Faso</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.BI">
            <summary>Burundi</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.KH">
            <summary>Cambodia</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.CM">
            <summary>Cameroon</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.CA">
            <summary>Canada</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.CV">
            <summary>Cape Verde</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.KY">
            <summary>Cayman Islands</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.CF">
            <summary>Central African Republic</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.TD">
            <summary>Chad</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.CL">
            <summary>Chile</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.CN">
            <summary>China</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.CX">
            <summary>Christmas Island</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.CC">
            <summary>Cocos (Keeling) Islands</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.CO">
            <summary>Colombia</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.KM">
            <summary>Comoros</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.CG">
            <summary>Congo</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.CD">
            <summary>Congo, The Democratic Republic Of The</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.CK">
            <summary>Cook Islands</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.CR">
            <summary>Costa Rica</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.CI">
            <summary>Cote D'Ivoire</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.HR">
            <summary>Croatia</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.CU">
            <summary>Cuba</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.CY">
            <summary>Cyprus</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.CZ">
            <summary>Czech Republic</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.DK">
            <summary>Denmark</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.DJ">
            <summary>Djibouti</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.DM">
            <summary>Dominica</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.DO">
            <summary>Dominican Republic</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.EC">
            <summary>Ecuador</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.EG">
            <summary>Egypt</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.SV">
            <summary>El Salvador</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.GQ">
            <summary>Equatorial Guinea</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.ER">
            <summary>Eritrea</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.EE">
            <summary>Estonia</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.ET">
            <summary>Ethiopia</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.FK">
            <summary>Falkland Islands (Malvinas)</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.FO">
            <summary>Faroe Islands</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.FJ">
            <summary>Fiji</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.FI">
            <summary>Finland</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.FR">
            <summary>France</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.GF">
            <summary>French Guiana</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.PF">
            <summary>French Polynesia</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.TF">
            <summary>French Southern Territories</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.GA">
            <summary>Gabon</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.GM">
            <summary>Gambia</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.GE">
            <summary>Georgia</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.DE">
            <summary>Germany</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.GH">
            <summary>Ghana</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.GI">
            <summary>Gibraltar</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.GR">
            <summary>Greece</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.GL">
            <summary>Greenland</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.GD">
            <summary>Grenada</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.GP">
            <summary>Guadeloupe</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.GU">
            <summary>Guam</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.GT">
            <summary>Guatemala</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.GN">
            <summary>Guinea</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.GW">
            <summary>Guinea-Bissau</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.GY">
            <summary>Guyana</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.HT">
            <summary>Haiti</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.HM">
            <summary>Heard Island And McDonald Islands</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.VA">
            <summary>Holy See (Vatican City State)</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.HN">
            <summary>Honduras</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.HK">
            <summary>Hong Kong</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.HU">
            <summary>Hungary</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.IS">
            <summary>Iceland</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.IN">
            <summary>India</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.ID">
            <summary>Indonesia</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.IR">
            <summary>Iran, Islamic Republic Of</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.IQ">
            <summary>Iraq</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.IE">
            <summary>Ireland</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.IL">
            <summary>Israel</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.IT">
            <summary>Italy</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.JM">
            <summary>Jamaica</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.JP">
            <summary>Japan</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.JO">
            <summary>Jordan</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.KZ">
            <summary>Kazakhstan</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.KE">
            <summary>Kenya</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.KI">
            <summary>Kiribati</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.KP">
            <summary>Korea, Democratic People'S Republic Of</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.KR">
            <summary>Korea, Republic Of</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.KW">
            <summary>Kuwait</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.KG">
            <summary>Kyrgyzstan</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.LA">
            <summary>Lao People'S Democratic Republic</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.LV">
            <summary>Latvia</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.LB">
            <summary>Lebanon</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.LS">
            <summary>Lesotho</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.LR">
            <summary>Liberia</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.LY">
            <summary>Libyan Arab Jamahiriya</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.LI">
            <summary>Liechtenstein</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.LT">
            <summary>Lithuania</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.LU">
            <summary>Luxembourg</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.MO">
            <summary>Macao</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.MK">
            <summary>Macedonia, The Former Yugoslav Republic Of</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.MG">
            <summary>Madagascar</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.MW">
            <summary>Malawi</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.MY">
            <summary>Malaysia</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.MV">
            <summary>Maldives</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.ML">
            <summary>Mali</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.MT">
            <summary>Malta</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.MH">
            <summary>Marshall Islands</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.MQ">
            <summary>Martinique</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.MR">
            <summary>Mauritania</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.MU">
            <summary>Mauritius</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.YT">
            <summary>Mayotte</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.MX">
            <summary>Mexico</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.FM">
            <summary>Micronesia, Federated States Of</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.MD">
            <summary>Moldova, Republic Of</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.MC">
            <summary>Monaco</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.MN">
            <summary>Mongolia</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.MS">
            <summary>Montserrat</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.MA">
            <summary>Morocco</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.MZ">
            <summary>Mozambique</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.MM">
            <summary>Myanmar</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.NA">
            <summary>Namibia</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.NR">
            <summary>Nauru</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.NP">
            <summary>Nepal</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.NL">
            <summary>Netherlands</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.AN">
            <summary>Netherlands Antilles</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.NC">
            <summary>New Caledonia</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.NZ">
            <summary>New Zealand</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.NI">
            <summary>Nicaragua</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.NE">
            <summary>Niger</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.NG">
            <summary>Nigeria</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.NU">
            <summary>Niue</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.NF">
            <summary>Norfolk Island</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.MP">
            <summary>Northern Mariana Islands</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.NO">
            <summary>Norway</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.OM">
            <summary>Oman</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.PK">
            <summary>Pakistan</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.PW">
            <summary>Palau</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.PS">
            <summary>Palestinian Territory, Occupied</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.PA">
            <summary>Panama</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.PG">
            <summary>Papua New Guinea</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.PY">
            <summary>Paraguay</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.PE">
            <summary>Peru</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.PH">
            <summary>Philippines</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.PN">
            <summary>Pitcairn</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.PL">
            <summary>Poland</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.PT">
            <summary>Portugal</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.PR">
            <summary>Puerto Rico</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.QA">
            <summary>Qatar</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.RE">
            <summary>Reunion</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.RO">
            <summary>Romania</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.RU">
            <summary>Russian Federation</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.RW">
            <summary>Rwanda</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.SH">
            <summary>Saint Helena</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.KN">
            <summary>Saint Kitts And Nevis</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.LC">
            <summary>Saint Lucia</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.PM">
            <summary>Saint Pierre And Miquelon</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.VC">
            <summary>Saint Vincent And The Grenadines</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.WS">
            <summary>Samoa</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.SM">
            <summary>San Marino</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.ST">
            <summary>Sao Tome And Principe</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.SA">
            <summary>Saudi Arabia</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.SN">
            <summary>Senegal</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.CS">
            <summary>Serbia And Montenegro</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.SC">
            <summary>Seychelles</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.SL">
            <summary>Sierra Leone</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.SG">
            <summary>Singapore</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.SK">
            <summary>Slovakia</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.SI">
            <summary>Slovenia</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.SB">
            <summary>Solomon Islands</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.SO">
            <summary>Somalia</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.ZA">
            <summary>South Africa</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.GS">
            <summary>South Georgia And The South Sandwich Islands</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.ES">
            <summary>Spain</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.LK">
            <summary>Sri Lanka</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.SD">
            <summary>Sudan</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.SR">
            <summary>Suriname</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.SJ">
            <summary>Svalbard And Jan Mayen</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.SZ">
            <summary>Swaziland</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.SE">
            <summary>Sweden</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.CH">
            <summary>Switzerland</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.SY">
            <summary>Syrian Arab Republic</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.TW">
            <summary>Taiwan, Province Of China</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.TJ">
            <summary>Tajikistan</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.TZ">
            <summary>Tanzania, United Republic Of</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.TH">
            <summary>Thailand</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.TL">
            <summary>Timor-Leste</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.TG">
            <summary>Togo</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.TK">
            <summary>Tokelau</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.TO">
            <summary>Tonga</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.TT">
            <summary>Trinidad And Tobago</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.TN">
            <summary>Tunisia</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.TR">
            <summary>Turkey</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.TM">
            <summary>Turkmenistan</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.TC">
            <summary>Turks And Caicos Islands</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.TV">
            <summary>Tuvalu</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.UG">
            <summary>Uganda</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.UA">
            <summary>Ukraine</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.AE">
            <summary>United Arab Emirates</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.GB">
            <summary>United Kingdom</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.US">
            <summary>United States</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.UM">
            <summary>United States Minor Outlying Islands</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.UY">
            <summary>Uruguay</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.UZ">
            <summary>Uzbekistan</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.VU">
            <summary>Vanuatu</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.VE">
            <summary>Venezuela</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.VN">
            <summary>Viet Nam</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.VG">
            <summary>Virgin Islands, British</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.VI">
            <summary>Virgin Islands, U.S.</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.WF">
            <summary>Wallis And Futuna</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.EH">
            <summary>Western Sahara</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.YE">
            <summary>Yemen</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.ZM">
            <summary>Zambia</summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.ZW">
            <summary>Zimbabwe</summary>
        </member>
        <member name="T:Cadru.Extensions.DateTimeExtensions">
            <summary>
            Provides basic routines for common DateTime manipulation.
            </summary>
        </member>
        <member name="M:Cadru.Extensions.DateTimeExtensions.AddWeekdays(System.DateTime,System.Double)">
            <summary>
            Returns a new <see cref="T:System.DateTime"/> that adds the specified number of
            weekdays to the value of this instance.
            </summary>
            <param name="date">A valid <see cref="T:System.DateTime"/> instance.</param>
            <param name="value">A number of whole and fractional weekdays.
            The <paramref name="value"/> parameter can be negative or positive.</param>
            <returns>A <see cref="T:System.DateTime"/> whose value is the sum of the
            date and time represented by this instance and the number of weekdays
            represented by <paramref name="value"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The resulting <see cref="T:System.DateTime"/> is less than 
            <see cref="F:System.DateTime.MinValue"/> or greater than
            <see cref="F:System.DateTime.MaxValue"/>.
            </exception>
        </member>
        <member name="M:Cadru.Extensions.DateTimeExtensions.AddQuarters(System.DateTime,System.Double)">
            <summary>
            Returns a new <see cref="T:System.DateTime"/> that adds the specified number of
            quarters to the value of this instance.
            </summary>
            <param name="date">A valid <see cref="T:System.DateTime"/> instance.</param>
            <param name="value">A number of whole and fractional quarters.
            The <paramref name="value"/> parameter can be negative or positive.</param>
            <returns>A <see cref="T:System.DateTime"/> whose value is the sum of the
            date and time represented by this instance and the number of quarters
            represented by <paramref name="value"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The resulting <see cref="T:System.DateTime"/> is less than 
            <see cref="F:System.DateTime.MinValue"/> or greater than
            <see cref="F:System.DateTime.MaxValue"/>.
            </exception>
        </member>
        <member name="M:Cadru.Extensions.DateTimeExtensions.AddWeeks(System.DateTime,System.Double)">
            <summary>
            Returns a new <see cref="T:System.DateTime"/> that adds the specified number of
            weeks to the value of this instance.
            </summary>
            <param name="date">A valid <see cref="T:System.DateTime"/> instance.</param>
            <param name="value">A number of whole and fractional weeks.
            The <paramref name="value"/> parameter can be negative or positive.</param>
            <returns>A <see cref="T:System.DateTime"/> whose value is the sum of the
            date and time represented by this instance and the number of weeks
            represented by <paramref name="value"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The resulting <see cref="T:System.DateTime"/> is less than 
            <see cref="F:System.DateTime.MinValue"/> or greater than
            <see cref="F:System.DateTime.MaxValue"/>.
            </exception>
        </member>
        <member name="M:Cadru.Extensions.DateTimeExtensions.DaysInMonth(System.DateTime)">
            <summary>
            Returns the number of days in the month for the date represented by this instance.
            </summary>
            <param name="date">A valid <see cref="T:System.DateTime"/> instance.</param>
            <returns>The number of days in the month for the date represented by this instance.</returns>
        </member>
        <member name="M:Cadru.Extensions.DateTimeExtensions.Elapsed(System.DateTime)">
            <summary>
            Returns the elapsed time between the date represented by this instance
            and the current date and time.
            </summary>
            <param name="date">A valid <see cref="T:System.DateTime"/> instance.</param>
            <returns>A <see cref="T:System.TimeSpan"/> representing the elapsed
            time between the date represented by this instance and the
            current date and time.</returns>
        </member>
        <member name="M:Cadru.Extensions.DateTimeExtensions.FirstDayOfMonth(System.DateTime)">
            <summary>
            Returns a <see cref="T:System.DateTime"/> representing the
            first day of the month for the date represented by this instance.
            </summary>
            <param name="date">A valid <see cref="T:System.DateTime"/> instance.</param>
            <returns>A <see cref="T:System.DateTime"/> representing the
            first day of the month for the date represented by this instance.</returns>
        </member>
        <member name="M:Cadru.Extensions.DateTimeExtensions.FirstDayOfNextQuarter(System.DateTime)">
            <summary>
            Returns a <see cref="T:System.DateTime"/> which represents the 
            first day of the next quarter of the date represented by this instance.
            </summary>
            <param name="date">A valid <see cref="T:System.DateTime"/> instance.</param>
            <returns>A <see cref="T:System.DateTime"/> which represents the 
            first day of the next quarter of the date represented by this instance.</returns>
        </member>
        <member name="M:Cadru.Extensions.DateTimeExtensions.FirstDayOfQuarter(System.DateTime)">
            <summary>
            Returns a <see cref="T:System.DateTime"/> which represents the 
            first day of the quarter of the date represented by this instance.
            </summary>
            <param name="date">A valid <see cref="T:System.DateTime"/> instance.</param>
            <returns>A <see cref="T:System.DateTime"/> which represents the 
            first day of the quarter of the date represented by this instance.</returns>
        </member>
        <member name="M:Cadru.Extensions.DateTimeExtensions.FirstDayOfWeek(System.DateTime)">
            <summary>
            Returns a <see cref="T:System.DateTime"/> which represents the 
            first day of the week of the date represented by this instance.
            </summary>
            <param name="date">A valid <see cref="T:System.DateTime"/> instance.</param>
            <returns>A <see cref="T:System.DateTime"/> which represents the 
            first day of the week of the date represented by this instance.</returns>
        </member>
        <member name="M:Cadru.Extensions.DateTimeExtensions.FirstDayOfWeek(System.DateTime,System.DayOfWeek)">
            <summary>
            Returns a <see cref="T:System.DateTime"/> which represents the 
            first day of the week of the date represented by this instance.
            </summary>
            <param name="date">A valid <see cref="T:System.DateTime"/> instance.</param>
            <param name="startOfWeek">An enumeration value that represents the first day of the week.</param>
            <returns>A <see cref="T:System.DateTime"/> which represents the 
            first day of the week of the date represented by this instance.</returns>
        </member>
        <member name="M:Cadru.Extensions.DateTimeExtensions.FirstDayOfYear(System.DateTime)">
            <summary>
            Returns a <see cref="T:System.DateTime"/> representing the
            first day of the year for the date represented by this instance.
            </summary>
            <param name="date">A valid <see cref="T:System.DateTime"/> instance.</param>
            <returns>A <see cref="T:System.DateTime"/> representing the
            first day of the year for the date represented by this instance.</returns>
        </member>
        <member name="M:Cadru.Extensions.DateTimeExtensions.GetAbbreviatedMonthName(System.DateTime)">
            <summary>
            Returns the culture-specific abbreviated name of the month represented by this instance.
            </summary>
            <param name="date">A valid <see cref="T:System.DateTime"/> instance.</param>
            <returns>The culture-specific abbreviated name of the month represented by this instance.</returns>
        </member>
        <member name="M:Cadru.Extensions.DateTimeExtensions.GetAbbreviatedMonthNames">
            <summary>
            Returns the culture-specific abbreviated names of the months.
            </summary>
            <returns>A list that contains the culture-specific abbreviated names of the months.</returns>
        </member>
        <member name="M:Cadru.Extensions.DateTimeExtensions.GetDayOfWeek(System.DateTime,System.DayOfWeek)">
            <summary>
            Returns a <see cref="T:System.DateTime"/> representing the
            day of the week from the date represented by this instance.
            </summary>
            <param name="date">A valid <see cref="T:System.DateTime"/> instance.</param>
            <param name="day">An enumeration value that represents the day of
            the week for which the date is to be calculated.</param>
            <returns>A <see cref="T:System.DateTime"/> representing the
            day of the week from the date represented by this instance.</returns>
        </member>
        <member name="M:Cadru.Extensions.DateTimeExtensions.GetDayOfWeek(System.DateTime,System.DayOfWeek,System.DayOfWeek)">
            <summary>
            Returns a <see cref="T:System.DateTime"/> representing the
            day of the week from the date represented by this instance.
            </summary>
            <param name="date">A valid <see cref="T:System.DateTime"/> instance.</param>
            <param name="day">An enumeration value that represents the day of
            the week for which the date is to be calculated.</param>
            <param name="startOfWeek">An enumeration value that represents the first day of the week.</param>
            <returns>A <see cref="T:System.DateTime"/> representing the
            day of the week from the date represented by this instance.</returns>
        </member>
        <member name="M:Cadru.Extensions.DateTimeExtensions.GetMonthName(System.DateTime)">
            <summary>
            Returns the culture-specific name of the month represented by this instance.
            </summary>
            <param name="date">A valid <see cref="T:System.DateTime"/> instance.</param>
            <returns>The culture-specific name of the month represented by this instance.</returns>
        </member>
        <member name="M:Cadru.Extensions.DateTimeExtensions.GetMonthNames">
            <summary>
            Returns the culture-specific names of the months.
            </summary>
            <returns>A list that contains the culture-specific names of the months.</returns>
        </member>
        <member name="M:Cadru.Extensions.DateTimeExtensions.GetMonthNumber(System.String,System.Boolean)">
            <summary>
            Returns the month number for the given month name.
            </summary>
            <param name="name">The month name.</param>
            <param name="abbreviated"><see langword="true"/> if the name is abbreviated;
            otherwise, <see langword="false"/>.</param>
            <returns>The month number for the given month name.</returns>
        </member>
        <member name="M:Cadru.Extensions.DateTimeExtensions.GetWeekOfYear(System.DateTime)">
            <summary>
            Returns the week of the year that includes the date in the specified DateTime value.
            </summary>
            <param name="time">A date and time value.</param>
            <returns>A positive integer that represents the week of the year 
            that includes the date in the <paramref name="time"/> parameter.</returns>
        </member>
        <member name="M:Cadru.Extensions.DateTimeExtensions.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule)">
            <summary>
            Returns the week of the year that includes the date in the specified DateTime value.
            </summary>
            <param name="time">A date and time value.</param>
            <param name="rule">An enumeration value that defines a calendar week.</param>
            <returns>A positive integer that represents the week of the year 
            that includes the date in the <paramref name="time"/> parameter.</returns>
        </member>
        <member name="M:Cadru.Extensions.DateTimeExtensions.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)">
            <summary>
            Returns the week of the year that includes the date in the specified DateTime value.
            </summary>
            <param name="time">A date and time value.</param>
            <param name="rule">An enumeration value that defines a calendar week.</param>
            <param name="firstDayOfWeek">An enumeration value that represents the first day of the week.</param>
            <returns>A positive integer that represents the week of the year 
            that includes the date in the <paramref name="time"/> parameter.</returns>
        </member>
        <member name="M:Cadru.Extensions.DateTimeExtensions.IsLeapYear(System.DateTime)">
            <summary>
            Determines whether the specified date is a leap year.
            </summary>
            <param name="date">A valid <see cref="T:System.DateTime"/> instance.</param>
            <returns><see langword="true"/> if the specified date is a leap year;
            otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Cadru.Extensions.DateTimeExtensions.IsLeapMonth(System.DateTime)">
            <summary>
            Determines whether the specified date is a leap month.
            </summary>
            <param name="date">A valid <see cref="T:System.DateTime"/> instance.</param>
            <returns><see langword="true"/> if the specified date is a leap month;
            otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Cadru.Extensions.DateTimeExtensions.IsLeapDay(System.DateTime)">
            <summary>
            Determines whether the specified date is a leap day.
            </summary>
            <param name="date">A valid <see cref="T:System.DateTime"/> instance.</param>
            <returns><see langword="true"/> if the specified date is a leap day;
            otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Cadru.Extensions.DateTimeExtensions.IsWeekday(System.DateTime)">
            <summary>
            Determines whether the specified date is a week day.
            </summary>
            <param name="date">A valid <see cref="T:System.DateTime"/> instance.</param>
            <returns><see langword="true"/> if the specified date is a week day;
            otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Cadru.Extensions.DateTimeExtensions.IsWeekend(System.DateTime)">
            <summary>
            Determines whether the specified date is a weekend.
            </summary>
            <param name="date">A valid <see cref="T:System.DateTime"/> instance.</param>
            <returns><see langword="true"/> if the specified date is a weekend;
            otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Cadru.Extensions.DateTimeExtensions.IsUtcDateTime(System.DateTime)">
            <summary>
            Determines whether he specified date is a UTC date.
            </summary>
            <param name="date">A valid <see cref="T:System.DateTime"/> instance.</param>
            <returns><see langword="true"/> if the specified date is a UTC date;
            otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Cadru.Extensions.DateTimeExtensions.LastDayOfMonth(System.DateTime)">
            <summary>
            Returns a <see cref="T:System.DateTime"/> representing the
            last day of the month for the date represented by this instance.
            </summary>
            <param name="date">A valid <see cref="T:System.DateTime"/> instance.</param>
            <returns>A <see cref="T:System.DateTime"/> representing the
            last day of the month for the date represented by this instance.</returns>
        </member>
        <member name="M:Cadru.Extensions.DateTimeExtensions.LastDayOfQuarter(System.DateTime)">
            <summary>
            Returns a <see cref="T:System.DateTime"/> which represents the 
            last day of the quarter of the date represented by this instance.
            </summary>
            <param name="date">A valid <see cref="T:System.DateTime"/> instance.</param>
            <returns>A <see cref="T:System.DateTime"/> which represents the 
            last day of the quarter of the date represented by this instance.</returns>
        </member>
        <member name="M:Cadru.Extensions.DateTimeExtensions.LastDayOfWeek(System.DateTime)">
            <summary>
            Returns a <see cref="T:System.DateTime"/> which represents the 
            last day of the week of the date represented by this instance.
            </summary>
            <param name="date">A valid <see cref="T:System.DateTime"/> instance.</param>
            <returns>A <see cref="T:System.DateTime"/> which represents the 
            last day of the week of the date represented by this instance.</returns>
        </member>
        <member name="M:Cadru.Extensions.DateTimeExtensions.LastDayOfWeek(System.DateTime,System.DayOfWeek)">
            <summary>
            Returns a <see cref="T:System.DateTime"/> which represents the 
            last day of the week of the date represented by this instance.
            </summary>
            <param name="date">A valid <see cref="T:System.DateTime"/> instance.</param>
            <param name="firstDayOfWeek">An enumeration value that represents the first day of the week.</param>
            <returns>A <see cref="T:System.DateTime"/> which represents the 
            last day of the week of the date represented by this instance.</returns>
        </member>
        <member name="M:Cadru.Extensions.DateTimeExtensions.LastDayOfYear(System.DateTime)">
            <summary>
            Returns a <see cref="T:System.DateTime"/> representing the
            last day of the year for the date represented by this instance.
            </summary>
            <param name="date">A valid <see cref="T:System.DateTime"/> instance.</param>
            <returns>A <see cref="T:System.DateTime"/> representing the
            last day of the year for the date represented by this instance.</returns>
        </member>
        <member name="M:Cadru.Extensions.DateTimeExtensions.Quarter(System.DateTime)">
            <summary>
            Returns the quarter component of the date represented by this instance.
            </summary>
            <param name="date">A valid <see cref="T:System.DateTime"/> instance.</param>
            <returns>The quarter component of the date represented by this instance.</returns>
        </member>
        <member name="T:Cadru.IDisposablePattern">
            <summary>
            Defines an extended method to release allocated resources.
            </summary>
        </member>
        <member name="P:Cadru.IDisposablePattern.Disposed">
            <summary>
            Gets a value indicating whether the object has been disposed.
            </summary>
            <value><see langword="true"/> if the object has been disposed;
            otherwise, <see langword="false"/>.</value>
        </member>
        <member name="T:Cadru.Internal.ExceptionBuilder">
            <summary>
            Provides methods to create specific exceptions.
            </summary>
        </member>
        <member name="M:Cadru.Internal.ExceptionBuilder.CreateArgumentException(System.String,System.String)">
            <summary>
            Create a new <see cref="T:System.ArgumentException"/>.
            </summary>
            <param name="parameterName">The name of the parameter that caused the exception.</param>
            <param name="message">The error message that explains the reason for the exception.</param>
            <returns>A new <see cref="T:System.ArgumentException"/>.</returns>
        </member>
        <member name="M:Cadru.Internal.ExceptionBuilder.CreateArgumentNullException(System.String,System.String)">
            <summary>
            Create a new <see cref="T:System.ArgumentNullException"/>.
            </summary>
            <param name="parameterName">The name of the parameter that caused the exception.</param>
            <param name="message">The error message that explains the reason for the exception.</param>
            <returns>A new <see cref="T:System.ArgumentNullException"/>.</returns>
        </member>
        <member name="M:Cadru.Internal.ExceptionBuilder.CreateArgumentOutOfRangeException(System.String,System.String)">
            <summary>
            Create a new <see cref="T:System.ArgumentOutOfRangeException"/>.
            </summary>
            <param name="parameterName">The name of the parameter that caused the exception.</param>
            <param name="message">The error message that explains the reason for the exception.</param>
            <returns>A new <see cref="T:System.ArgumentOutOfRangeException"/>.</returns>
        </member>
        <member name="M:Cadru.Internal.ExceptionBuilder.CreateFormatException(System.String)">
            <summary>
            Create a new <see cref="T:System.FormatException"/>.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <returns>A new <see cref="T:System.FormatException"/>.</returns>
        </member>
        <member name="M:Cadru.Internal.ExceptionBuilder.CreateContainsNullElement(System.String)">
            <summary>
            Create an exception indicating that an array or collection element was <see langword="null"/>.
            </summary>
            <param name="parameterName">The name of the parameter that caused the exception.</param>
            <returns>A new <see cref="T:System.ArgumentException"/>.</returns>
        </member>
        <member name="M:Cadru.Internal.ExceptionBuilder.CreateInvalidOperation(System.String)">
            <summary>
            Create a new <see cref="T:System.ArgumentException"/>.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <returns>A new <see cref="T:System.InvalidOperationException"/>.</returns>
        </member>
        <member name="M:Cadru.Internal.ExceptionBuilder.CreateNotOverriddenByDerived(System.String)">
            <summary>
            Create an exception indicating that a member was not overridden by a derived class.
            </summary>
            <param name="memberName">The name of the member that caused the exception.</param>
            <returns>A new <see cref="T:System.NotImplementedException"/>.</returns>
        </member>
        <member name="M:Cadru.Internal.ExceptionBuilder.CreateObjectDisposed(System.String)">
            <summary>
            Create a new <see cref="T:System.ObjectDisposedException"/>.
            </summary>
            <param name="objectName">A string containing the name of the disposed object.</param>
            <returns>A new <see cref="T:System.ObjectDisposedException"/>.</returns>
        </member>
        <member name="M:Cadru.Internal.ExceptionBuilder.Format(System.String,System.Object[])">
            <summary>
            Replaces the format item in a specified <see cref="T:System.String"/> with the text equivalent
            of the value of a corresponding <see cref="T:System.String"/> instance in a specified array.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="arguments">A <see cref="T:System.String"/> array containing zero or more strings to format.</param>
            <returns>A copy of format in which the format items have been replaced by the corresponding
            instances of <see cref="T:System.String"/> in args.</returns>
        </member>
        <member name="T:Cadru.Internal.ValidatedNotNullAttribute">
            <summary>
            Indicates to Code Analysis that a method validates a particular parameter.
            </summary>
        </member>
        <member name="T:Cadru.Net.Http.UriScheme">
            <summary>
            A helper class for retrieving and comparing standard URI schemes.
            </summary>
        </member>
        <member name="M:Cadru.Net.Http.UriScheme.op_Implicit(Cadru.Net.Http.UriScheme)~System.String">
            <summary>
            Defines an implicit conversion from <see cref="T:Cadru.Net.Http.UriScheme"/> to <see cref="T:System.String"/>.
            </summary>
            <param name="value">The object to convert.</param>
            <returns>
            The converted object.
            </returns>
        </member>
        <member name="M:Cadru.Net.Http.UriScheme.op_Equality(Cadru.Net.Http.UriScheme,Cadru.Net.Http.UriScheme)">
            <summary>
            Determines whether two specified <see cref="T:Cadru.Net.Http.UriScheme"/>
            objects represent the same scheme.
            </summary>
            <param name="left">The first object to compare.</param>
            <param name="right">The second object to compare.</param>
            <returns>
            <see langword="true"/> if both objects represent the same scheme;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Net.Http.UriScheme.op_Inequality(Cadru.Net.Http.UriScheme,Cadru.Net.Http.UriScheme)">
            <summary>
            Determines whether two specified <see cref="T:Cadru.Net.Http.UriScheme"/>
            objects represent different schemes.
            </summary>
            <param name="left">The first object to compare.</param>
            <param name="right">The second object to compare.</param>
            <returns>
            <see langword="true"/> if <paramref name="left"/> and
            <paramref name="right"/> do not represent the same scheme;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Net.Http.UriScheme.Equals(System.Object)">
            <summary>
            Returns a value indicating whether the value of this instance is 
            equal to the value of the specified <see cref="T:Cadru.Net.Http.UriScheme"/> 
            instance.
            </summary>
            <param name="obj">The object to compare to this
            instance.</param>
            <returns>
            <see langword="true"/> if the <paramref name="obj"/> parameter 
            equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Net.Http.UriScheme.Equals(Cadru.Net.Http.UriScheme)">
            <summary>
            Returns a value indicating whether the value of this instance is 
            equal to the value of the specified <see cref="T:Cadru.Net.Http.UriScheme"/> 
            instance.
            </summary>
            <param name="other">The <see cref="T:Cadru.Net.Http.UriScheme"/> to compare to this
            instance.</param>
            <returns>
            <see langword="true"/> if the <paramref name="other"/> parameter 
            equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Net.Http.UriScheme.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:Cadru.Net.Http.UriScheme.ToString">
            <summary>
            Converts the value of the current <see cref="T:Cadru.Net.Http.UriScheme"/>
            object to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of the current <see cref="T:Cadru.Net.Http.UriScheme"/> object.
            </returns>
        </member>
        <member name="P:Cadru.Net.Http.UriScheme.File">
            <summary>
            Represents a URI scheme for a resource which is a file on the 
            local computer. 
            </summary>
            <value>A URI scheme for a resource which is a file on the local
            computer.</value>
        </member>
        <member name="P:Cadru.Net.Http.UriScheme.Ftp">
            <summary>
            Represents a URI scheme for a resource which is accessed through
            FTP.
            </summary>
            <value>A URI scheme for a resource which is accessed through 
            FTP.</value>
        </member>
        <member name="P:Cadru.Net.Http.UriScheme.Gopher">
            <summary>
            Represents a URI scheme for a resource which is accessed through
            the Gopher protocol.
            </summary>
            <value>A URI scheme for a resource which is accessed through 
            the Gopher protocol.</value>
        </member>
        <member name="P:Cadru.Net.Http.UriScheme.Http">
            <summary>
            Represents a URI scheme for a resource which is accessed through
            HTTP.
            </summary>
            <value>A URI scheme for a resource which is accessed through 
            HTTP.</value>
        </member>
        <member name="P:Cadru.Net.Http.UriScheme.Https">
            <summary>
            Represents a URI scheme for a resource which is accessed through
            SSL-encrypted HTTP.
            </summary>
            <value>A URI scheme for a resource which is accessed through 
            SSL-encrypted HTTP.</value>
        </member>
        <member name="P:Cadru.Net.Http.UriScheme.MailTo">
            <summary>
            Represents a URI scheme for a resource which is an e-mail address
            and is access through SMTP.
            </summary>
            <value>A URI scheme for a resource which is an e-mail address and
            is accessed through SMTP.</value>
        </member>
        <member name="P:Cadru.Net.Http.UriScheme.News">
            <summary>
            Represents a URI scheme for a resource which is accessed through
            NNTP.
            </summary>
            <value>A URI scheme for a resource which is accessed through 
            NNTP.</value>
        </member>
        <member name="T:Cadru.Net.Http.UrlBuilder">
            <summary>
            Provides a custom constructor for uniform resource identifiers (URIs) 
            and modifies URIs for the <see cref="T:System.Uri"/> class.
            </summary>
        </member>
        <member name="M:Cadru.Net.Http.UrlBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cadru.Net.Http.UrlBuilder"/> class.
            </summary>
        </member>
        <member name="M:Cadru.Net.Http.UrlBuilder.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Cadru.Net.Http.UrlBuilder"/> class 
            with the specified URI.
            </summary>
            <param name="uri">A URI string.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="uri"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.FormatException">
            <para><paramref name="uri"/> is a zero length string or contains
            only spaces.</para>
            <para>-or-</para>
            <para>The parsing routine detected a scheme in an invalid form.</para>
            <para>-or-</para>
            <para>The parser detected more than two consecutive slashes in a
            URI that does not use the "file" scheme.</para>
            <para>-or-</para>
            <para>paramref name="uri"/&gt; is not a valid URI.</para>
            </exception>
        </member>
        <member name="M:Cadru.Net.Http.UrlBuilder.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Cadru.Net.Http.UrlBuilder"/> class 
            with the specified URI and path.
            </summary>
            <param name="uri">A URI string.</param>
            <param name="path">The path to the Internet resource.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="uri"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.FormatException">
            <para><paramref name="uri"/> is a zero length string or contains
            only spaces.</para>
            <para>-or-</para>
            <para>The parsing routine detected a scheme in an invalid form.</para>
            <para>-or-</para>
            <para>The parser detected more than two consecutive slashes in a
            URI that does not use the "file" scheme.</para>
            <para>-or-</para>
            <para>paramref name="uri"/&gt; is not a valid URI.</para>
            </exception>
        </member>
        <member name="M:Cadru.Net.Http.UrlBuilder.#ctor(System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:Cadru.Net.Http.UrlBuilder"/> class 
            with the specified <see cref="T:System.Uri"/> instance.
            </summary>
            <param name="uri">An instance of the <see cref="T:System.Uri"/> class.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="uri"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Cadru.Net.Http.UrlBuilder.#ctor(System.Uri,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Cadru.Net.Http.UrlBuilder"/> class 
            with the specified <see cref="T:System.Uri"/> instance.
            </summary>
            <param name="uri">An instance of the <see cref="T:System.Uri"/> class.</param>
            <param name="path">The path to the Internet resource.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="uri"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Cadru.Net.Http.UrlBuilder.#ctor(Cadru.Net.Http.UriScheme,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Cadru.Net.Http.UrlBuilder"/> class 
            with the specified scheme and host.
            </summary>
            <param name="scheme">An Internet access protocol.</param>
            <param name="host">A DNS-style domain name or IP address.</param>
        </member>
        <member name="M:Cadru.Net.Http.UrlBuilder.#ctor(Cadru.Net.Http.UriScheme,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Cadru.Net.Http.UrlBuilder"/> class 
            with the specified scheme and host.
            </summary>
            <param name="scheme">An Internet access protocol.</param>
            <param name="host">A DNS-style domain name or IP address.</param>
            <param name="port">An IP port number for the service.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="port"/> is less than -1 or greater than 65,535.
            </exception>
        </member>
        <member name="M:Cadru.Net.Http.UrlBuilder.#ctor(Cadru.Net.Http.UriScheme,System.String,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Cadru.Net.Http.UrlBuilder"/> class 
            with the specified scheme and host.
            </summary>
            <param name="scheme">An Internet access protocol.</param>
            <param name="host">A DNS-style domain name or IP address.</param>
            <param name="port">An IP port number for the service.</param>
            <param name="path">The path to the Internet resource.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="port"/> is less than -1 or greater than 65,535.
            </exception>
        </member>
        <member name="M:Cadru.Net.Http.UrlBuilder.#ctor(Cadru.Net.Http.UriScheme,System.String,System.Int32,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Cadru.Net.Http.UrlBuilder"/> class 
            with the specified scheme and host.
            </summary>
            <param name="scheme">An Internet access protocol.</param>
            <param name="host">A DNS-style domain name or IP address.</param>
            <param name="port">An IP port number for the service.</param>
            <param name="path">The path to the Internet resource.</param>
            <param name="extraValue">A query string or fragment identifier.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="extraValue"/> is neither <see langword="null"/>
            nor <see cref="F:System.String.Empty">System.String.Empty</see>, nor
            does a valid fragment identifier begin with a number sign (#), nor
            a valid query string begin with a question mark (?).
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="port"/> is less than -1 or greater than 65,535.
            </exception>
        </member>
        <member name="M:Cadru.Net.Http.UrlBuilder.Equals(System.Object)">
            <summary>
            Compares an existing <see cref="T:System.Uri"/> instance with the
            contents of the <see cref="T:Cadru.Net.Http.UrlBuilder"/> for equality.
            </summary>
            <param name="obj">The object to compare with the current instance.</param>
            <returns><see langword="true"/> if <paramref name="obj"/>
            represents the same <see cref="T:System.Uri"/> as the 
            <see cref="T:System.Uri"/> constructed by this 
            <see cref="T:Cadru.Net.Http.UrlBuilder"/> instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Net.Http.UrlBuilder.GetHashCode">
            <summary>
            Returns the hash code for the URI.
            </summary>
            <returns>The hash code generated for the URI.</returns>
        </member>
        <member name="M:Cadru.Net.Http.UrlBuilder.ToString">
            <summary>
            Returns the display string for the specified 
            <see cref="T:Cadru.Net.Http.UrlBuilder"/> instance.
            </summary>
            <returns>The string that contains the unescaped display string of 
            the <see cref="T:Cadru.Net.Http.UrlBuilder"/>.</returns>
            <exception cref="T:System.FormatException">
            <para>The <see cref="T:Cadru.Net.Http.UrlBuilder"/> instance has a bad password.</para>
            </exception>
        </member>
        <member name="P:Cadru.Net.Http.UrlBuilder.Fragment">
            <summary>
            Gets or sets the fragment portion of the URI.
            </summary>
            <value>The fragment portion of the URI. The fragment identifier 
            ("#") is added to the beginning of the fragment.</value>
        </member>
        <member name="P:Cadru.Net.Http.UrlBuilder.Host">
            <summary>
            Gets or sets the Domain Name System (DNS) host name or IP address
            of a server.
            </summary>
            <value>The DNS host name or IP address of the server.</value>
        </member>
        <member name="P:Cadru.Net.Http.UrlBuilder.Password">
            <summary>
            Gets or sets the password associated with the user that accesses the URI.
            </summary>
            <value>The password of the user that accesses the URI.</value>
        </member>
        <member name="P:Cadru.Net.Http.UrlBuilder.Path">
            <summary>
            Gets or sets the path to the resource referenced by the URI.
            </summary>
            <value>The path to the resource referenced by the URI.</value>
        </member>
        <member name="P:Cadru.Net.Http.UrlBuilder.Port">
            <summary>
            Gets or sets the port number of the URI.
            </summary>
            <value>The port number of the URI.</value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The port cannot be set to a value less than -1 or greater than 65,535.
            </exception>
        </member>
        <member name="P:Cadru.Net.Http.UrlBuilder.Query">
            <summary>
            Gets any query information included in the URI.
            </summary>
            <value>The query information included in the URI.</value>
        </member>
        <member name="P:Cadru.Net.Http.UrlBuilder.QueryParameters">
            <summary>
            Gets the collection of query parameters to be included in the URI.
            </summary>
            <value>The collection of query parameters to be included in the URI.</value>
        </member>
        <member name="P:Cadru.Net.Http.UrlBuilder.Scheme">
            <summary>
            Gets or sets the scheme name of the URI.
            </summary>
            <value>The scheme of the URI.</value>
            <exception cref="T:System.ArgumentException">The scheme cannot be set to an invalid scheme name.</exception>
        </member>
        <member name="P:Cadru.Net.Http.UrlBuilder.Uri">
            <summary>
            Gets the <see cref="T:System.Uri"/> instance constructed by the 
            specified <see cref="T:Cadru.Net.Http.UrlBuilder"/> instance.
            </summary>
            <value>A <see cref="T:System.Uri"/> that contains the URI
            constructed by the <see cref="T:Cadru.Net.Http.UrlBuilder"/>.</value>
            <exception cref="T:System.FormatException">
            <para>The URI constructed by the <see cref="T:Cadru.Net.Http.UrlBuilder"/> properties
            is invalid.</para>
            </exception>
        </member>
        <member name="P:Cadru.Net.Http.UrlBuilder.UserName">
            <summary>
            Gets or sets the user name associated with the user that accesses the URI.
            </summary>
            <value>The user name of the user that accesses the URI.</value>
        </member>
        <member name="T:Cadru.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Cadru.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Cadru.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Cadru.Properties.Resources.ApplicationExcpetion_UnableToDetermineInstallRoot">
            <summary>
              Looks up a localized string similar to Unable to determine the install root path for the .NET Framework..
            </summary>
        </member>
        <member name="P:Cadru.Properties.Resources.Arg_GuidArrayCtor">
            <summary>
              Looks up a localized string similar to Byte array for GUID must be exactly {0} bytes long..
            </summary>
        </member>
        <member name="P:Cadru.Properties.Resources.Arg_MustBeSequentialGuid">
            <summary>
              Looks up a localized string similar to Object must be of type SequentialGuid..
            </summary>
        </member>
        <member name="P:Cadru.Properties.Resources.Arg_MustBeUnixTimestamp">
            <summary>
              Looks up a localized string similar to Object must be of type UnixTimestamp..
            </summary>
        </member>
        <member name="P:Cadru.Properties.Resources.Arg_UnixTimestampRange">
            <summary>
              Looks up a localized string similar to Combination of arguments to the UnixTimestamp constructor is out of the legal range..
            </summary>
        </member>
        <member name="P:Cadru.Properties.Resources.Argument_EnumIllegalVal">
            <summary>
              Looks up a localized string similar to Illegal enum value: {0}..
            </summary>
        </member>
        <member name="P:Cadru.Properties.Resources.Argument_InvalidEnumValue">
            <summary>
              Looks up a localized string similar to The value &apos;{0}&apos; is not valid for this usage of the type {1}..
            </summary>
        </member>
        <member name="P:Cadru.Properties.Resources.Argument_InvalidFlag">
            <summary>
              Looks up a localized string similar to Value of flags is invalid..
            </summary>
        </member>
        <member name="P:Cadru.Properties.Resources.Argument_InvalidIndexValuesString">
            <summary>
              Looks up a localized string similar to The starting index and ending index refer to the same location in the string..
            </summary>
        </member>
        <member name="P:Cadru.Properties.Resources.Argument_MustBeAttribute">
            <summary>
              Looks up a localized string similar to Argument must be an Attribute or derived from an Attribute..
            </summary>
        </member>
        <member name="P:Cadru.Properties.Resources.Argument_MustBeDateTime">
            <summary>
              Looks up a localized string similar to Object must be of type DateTime..
            </summary>
        </member>
        <member name="P:Cadru.Properties.Resources.Argument_MustBeIsoDateTime">
            <summary>
              Looks up a localized string similar to Argument must be an IsoDateTime..
            </summary>
        </member>
        <member name="P:Cadru.Properties.Resources.Argument_MustBeString">
            <summary>
              Looks up a localized string similar to Object must be of type String..
            </summary>
        </member>
        <member name="P:Cadru.Properties.Resources.Argument_NotSerializable">
            <summary>
              Looks up a localized string similar to Argument passed in is not serializable..
            </summary>
        </member>
        <member name="P:Cadru.Properties.Resources.Argument_NullElement">
            <summary>
              Looks up a localized string similar to {0} cannot contain a null (Nothing in Visual Basic) element..
            </summary>
        </member>
        <member name="P:Cadru.Properties.Resources.Argument_StartIndexGreaterThanEndIndexString">
            <summary>
              Looks up a localized string similar to The starting index refers to a location in the string that is after the ending index..
            </summary>
        </member>
        <member name="P:Cadru.Properties.Resources.Argument_StringZeroLength">
            <summary>
              Looks up a localized string similar to String cannot be of zero length..
            </summary>
        </member>
        <member name="P:Cadru.Properties.Resources.Argument_UnixTimestampIsInvalid">
            <summary>
              Looks up a localized string similar to The supplied UnixTimestamp represents an invalid time.  For example, when the clock is adjusted forward, any time in the period that is skipped is invalid..
            </summary>
        </member>
        <member name="P:Cadru.Properties.Resources.ArgumentException_EmptyString">
            <summary>
              Looks up a localized string similar to {0} cannot be an empty string..
            </summary>
        </member>
        <member name="P:Cadru.Properties.Resources.ArgumentExceptionMustBeEnum">
            <summary>
              Looks up a localized string similar to Type provided must be an Enum..
            </summary>
        </member>
        <member name="P:Cadru.Properties.Resources.ArgumentNull_String">
            <summary>
              Looks up a localized string similar to String reference not set to an instance of a String..
            </summary>
        </member>
        <member name="P:Cadru.Properties.Resources.ArgumentOutOfRange_DateArithmetic">
            <summary>
              Looks up a localized string similar to The added or subtracted value results in an un-representable DateTime..
            </summary>
        </member>
        <member name="P:Cadru.Properties.Resources.ArgumentOutOfRange_Day">
            <summary>
              Looks up a localized string similar to Day must be between 1 and {0} for month {1}..
            </summary>
        </member>
        <member name="P:Cadru.Properties.Resources.ArgumentOutOfRange_DayOfWeek">
            <summary>
              Looks up a localized string similar to The DayOfWeek enumeration must be in the range 0 through 6..
            </summary>
        </member>
        <member name="P:Cadru.Properties.Resources.ArgumentOutOfRange_IndexLessThanLength">
            <summary>
              Looks up a localized string similar to Index must be less than the length of string..
            </summary>
        </member>
        <member name="P:Cadru.Properties.Resources.ArgumentOutOfRange_IndexLessThanZero">
            <summary>
              Looks up a localized string similar to Index must be non-negative..
            </summary>
        </member>
        <member name="P:Cadru.Properties.Resources.ArgumentOutOfRange_IndexString">
            <summary>
              Looks up a localized string similar to Index was out of range. Must be non-negative and less than the length of the string..
            </summary>
        </member>
        <member name="P:Cadru.Properties.Resources.ArgumentOutOfRange_Range">
            <summary>
              Looks up a localized string similar to Valid values are between {0} and {1}, inclusive..
            </summary>
        </member>
        <member name="P:Cadru.Properties.Resources.ArgumentOutOfRange_UnixTimestampBadMonths">
            <summary>
              Looks up a localized string similar to Months value must be between +/-120000..
            </summary>
        </member>
        <member name="P:Cadru.Properties.Resources.ArgumentOutOfRange_UnixTimestampBadSeconds">
            <summary>
              Looks up a localized string similar to Seconds must be between UnixTimestamp.MinValue.Seconds and UnixTimestamp.MaxValue.Seconds..
            </summary>
        </member>
        <member name="P:Cadru.Properties.Resources.ArgumentOutOfRange_UnixTimestampBadYears">
            <summary>
              Looks up a localized string similar to Years value must be between +/-10000..
            </summary>
        </member>
        <member name="P:Cadru.Properties.Resources.Assertion_CollectionFailure">
            <summary>
              Looks up a localized string similar to Expected a collection containing &lt;0&gt; items but actual was &lt;{0}&gt; items..
            </summary>
        </member>
        <member name="P:Cadru.Properties.Resources.Assertion_GenericFailure">
            <summary>
              Looks up a localized string similar to Expected &lt;{0}&gt; but actual was &lt;{1}&gt;..
            </summary>
        </member>
        <member name="P:Cadru.Properties.Resources.AssumptionException_EmptyMessage">
            <summary>
              Looks up a localized string similar to Assumption failed..
            </summary>
        </member>
        <member name="P:Cadru.Properties.Resources.AssumptionException_Message">
            <summary>
              Looks up a localized string similar to Assumption failed. {0}.
            </summary>
        </member>
        <member name="P:Cadru.Properties.Resources.DownloadInfoConnectionClosed">
            <summary>
              Looks up a localized string similar to Could not download {0} - FTP server closed the connection..
            </summary>
        </member>
        <member name="P:Cadru.Properties.Resources.DownloadInfoInvalidResponseReceived">
            <summary>
              Looks up a localized string similar to Could not download {0} - a web page was returned from the web server..
            </summary>
        </member>
        <member name="P:Cadru.Properties.Resources.FileDownloaderCancelled">
            <summary>
              Looks up a localized string similar to Download was cancelled..
            </summary>
        </member>
        <member name="P:Cadru.Properties.Resources.FileDownloaderDownloadLocation">
            <summary>
              Looks up a localized string similar to Downloading file to {0}..
            </summary>
        </member>
        <member name="P:Cadru.Properties.Resources.Format_BadDatePattern">
            <summary>
              Looks up a localized string similar to Could not determine the order of year, month, and date from &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Cadru.Properties.Resources.Format_BadDateTime">
            <summary>
              Looks up a localized string similar to String was not recognized as a valid DateTime..
            </summary>
        </member>
        <member name="P:Cadru.Properties.Resources.Format_BadDateTimeCalendar">
            <summary>
              Looks up a localized string similar to The DateTime represented by the string is not supported in calendar {0}..
            </summary>
        </member>
        <member name="P:Cadru.Properties.Resources.Format_BadDayOfWeek">
            <summary>
              Looks up a localized string similar to String was not recognized as a valid DateTime because the day of week was incorrect..
            </summary>
        </member>
        <member name="P:Cadru.Properties.Resources.Format_BadFormatSpecifier">
            <summary>
              Looks up a localized string similar to Format specifier was invalid..
            </summary>
        </member>
        <member name="P:Cadru.Properties.Resources.Format_BadQuote">
            <summary>
              Looks up a localized string similar to Cannot find a matching quote character for the character &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Cadru.Properties.Resources.Format_DateOutOfRange">
            <summary>
              Looks up a localized string similar to The DateTime represented by the string is out of range..
            </summary>
        </member>
        <member name="P:Cadru.Properties.Resources.Format_Dns_Bad_Ip_Address">
            <summary>
              Looks up a localized string similar to An invalid IP address was specified..
            </summary>
        </member>
        <member name="P:Cadru.Properties.Resources.Format_EmptyInputString">
            <summary>
              Looks up a localized string similar to Input string was either empty or contained only white space..
            </summary>
        </member>
        <member name="P:Cadru.Properties.Resources.Format_ExtraJunkAtEnd">
            <summary>
              Looks up a localized string similar to Additional non-parsable characters are at the end of the string..
            </summary>
        </member>
        <member name="P:Cadru.Properties.Resources.Format_GuidBrace">
            <summary>
              Looks up a localized string similar to Expected {0xdddddddd, etc}..
            </summary>
        </member>
        <member name="P:Cadru.Properties.Resources.Format_GuidBraceAfterLastNumber">
            <summary>
              Looks up a localized string similar to Could not find a brace, or the length between the previous token and the brace was zero (i.e., &apos;0x,&apos;etc.)..
            </summary>
        </member>
        <member name="P:Cadru.Properties.Resources.Format_GuidComma">
            <summary>
              Looks up a localized string similar to Could not find a comma, or the length between the previous token and the comma was zero (i.e., &apos;0x,&apos;etc.)..
            </summary>
        </member>
        <member name="P:Cadru.Properties.Resources.Format_GuidDashes">
            <summary>
              Looks up a localized string similar to Dashes are in the wrong position for GUID parsing..
            </summary>
        </member>
        <member name="P:Cadru.Properties.Resources.Format_GuidEndBrace">
            <summary>
              Looks up a localized string similar to Could not find the ending brace..
            </summary>
        </member>
        <member name="P:Cadru.Properties.Resources.Format_GuidHexPrefix">
            <summary>
              Looks up a localized string similar to Expected hex 0x in &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Cadru.Properties.Resources.Format_GuidInvalidChar">
            <summary>
              Looks up a localized string similar to Guid string should only contain hexadecimal characters..
            </summary>
        </member>
        <member name="P:Cadru.Properties.Resources.Format_GuidInvLen">
            <summary>
              Looks up a localized string similar to Guid should contain 32 digits with 4 dashes (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx)..
            </summary>
        </member>
        <member name="P:Cadru.Properties.Resources.Format_GuidUnrecognized">
            <summary>
              Looks up a localized string similar to Unrecognized Guid format..
            </summary>
        </member>
        <member name="P:Cadru.Properties.Resources.Format_InvalidGuidFormatSpecification">
            <summary>
              Looks up a localized string similar to Format String can be only &quot;D&quot;, &quot;d&quot;, &quot;N&quot;, &quot;n&quot;, &quot;P&quot;, &quot;p&quot;, &quot;B&quot;, &quot;b&quot;, &quot;X&quot; or &quot;x&quot;..
            </summary>
        </member>
        <member name="P:Cadru.Properties.Resources.Format_InvalidLen">
            <summary>
              Looks up a localized string similar to String was not of correct length..
            </summary>
        </member>
        <member name="P:Cadru.Properties.Resources.Format_InvalidString">
            <summary>
              Looks up a localized string similar to Input string was not in a correct format..
            </summary>
        </member>
        <member name="P:Cadru.Properties.Resources.Format_NeedSingleChar">
            <summary>
              Looks up a localized string similar to String must be exactly one character long..
            </summary>
        </member>
        <member name="P:Cadru.Properties.Resources.Format_RepeatDateTimePattern">
            <summary>
              Looks up a localized string similar to DateTime pattern &apos;{0}&apos; appears more than once with different values..
            </summary>
        </member>
        <member name="P:Cadru.Properties.Resources.Format_TwoTimeZoneSpecifiers">
            <summary>
              Looks up a localized string similar to The String being parsed cannot contain two TimeZone specifiers..
            </summary>
        </member>
        <member name="P:Cadru.Properties.Resources.Format_UnknowDateTimeWord">
            <summary>
              Looks up a localized string similar to The string was not recognized as a valid DateTime. There is a unknown word starting at index {0}..
            </summary>
        </member>
        <member name="P:Cadru.Properties.Resources.InvalidCast_FromTo">
            <summary>
              Looks up a localized string similar to Invalid cast from &apos;{0}&apos; to &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Cadru.Properties.Resources.MDA_InvalidFormatForLocal">
            <summary>
              Looks up a localized string similar to Cannot apply format &quot;{0}&quot; to the date &quot;{1}&quot; as the date is already in local time..
            </summary>
        </member>
        <member name="P:Cadru.Properties.Resources.MDA_InvalidFormatForUtc">
            <summary>
              Looks up a localized string similar to Cannot apply format &quot;{0}&quot; to the date &quot;{1}&quot; as the date is already in universal time..
            </summary>
        </member>
        <member name="P:Cadru.Properties.Resources.NotImplemented_NotOverriddenByDerived">
            <summary>
              Looks up a localized string similar to The {0} member must be overridden by a derived class..
            </summary>
        </member>
        <member name="T:Cadru.Text.DataValidation">
            <summary>
            Provides basic routines for common data validation.
            </summary>
        </member>
        <member name="M:Cadru.Text.DataValidation.Validate(System.String,System.String)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether <paramref name="expression"/> matches the
            regular expression pattern <paramref name="pattern"/>.
            </summary>
            <param name="expression">Any string expression.</param>
            <param name="pattern">The regular expression pattern to match against.</param>
            <returns><see cref="M:Cadru.Text.DataValidation.Validate(System.String,System.String)"/> returns <see langword="true"/> if <paramref name="expression"/> matches the pattern; 
            otherwise it returns <see langword="false"/>.</returns>
        </member>
        <member name="M:Cadru.Text.DataValidation.IsAlpha(System.Char)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether <paramref name="expression"/> 
            contains alphabetic characters.
            </summary>
            <param name="expression">Any string expression.</param>
            <returns><see cref="M:Cadru.Text.DataValidation.IsAlpha(System.Char)"/> returns <see langword="true"/> if <paramref name="expression"/> contains alphabetic
            characters; otherwise it returns <see langword="false"/>.</returns>
            <remarks>Alphabetic characters are any letters A-Z or a-z, the
            punctuation characters and the space character.</remarks>
        </member>
        <member name="M:Cadru.Text.DataValidation.IsAlpha(System.String)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether <paramref name="expression"/> 
            contains alphabetic characters.
            </summary>
            <param name="expression">Any string expression.</param>
            <returns><see cref="M:Cadru.Text.DataValidation.IsAlpha(System.String)"/> returns <see langword="true"/> if <paramref name="expression"/> contains alphabetic
            characters; otherwise it returns <see langword="false"/>.</returns>
            <remarks>Alphabetic characters are any letters A-Z or a-z, the
            punctuation characters and the space character.</remarks>
        </member>
        <member name="M:Cadru.Text.DataValidation.IsAlphanumeric(System.Char)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether <paramref name="expression"/> 
            contains alphabetic and numeric characters. 
            </summary>
            <param name="expression">Any string expression.</param>
            <returns><see cref="M:Cadru.Text.DataValidation.IsAlphanumeric(System.Char)"/> returns <see langword="true"/> if <paramref name="expression"/> contains alphabetic
            characters or numeric characters; otherwise it returns <see langword="false"/>.</returns>
            <remarks>Alphabetic characters are any letters
            A-Z or a-z, the punctuation characters, and the space character.
            Numeric characters are 0-9.</remarks>
        </member>
        <member name="M:Cadru.Text.DataValidation.IsAlphanumeric(System.String)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether <paramref name="expression"/> 
            contains alphabetic and numeric characters. 
            </summary>
            <param name="expression">Any string expression.</param>
            <returns><see cref="M:Cadru.Text.DataValidation.IsAlphanumeric(System.String)"/> returns <see langword="true"/> if <paramref name="expression"/> contains alphabetic
            characters or numeric characters; otherwise it returns <see langword="false"/>.</returns>
            <remarks>Alphabetic characters are any letters
            A-Z or a-z, the punctuation characters, and the space character.
            Numeric characters are 0-9.</remarks>
        </member>
        <member name="M:Cadru.Text.DataValidation.IsCurrency(System.String)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether <paramref name="expression"/> 
            contains a valid currency string. 
            </summary>
            <param name="expression">Any string expression.</param>
            <returns><see cref="M:Cadru.Text.DataValidation.IsCurrency(System.String)"/> returns <see langword="true"/> if <paramref name="expression"/> contains a valid
            currency string; otherwise it returns <see langword="false"/>.</returns>
        </member>
        <member name="M:Cadru.Text.DataValidation.IsCurrency(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether <paramref name="expression"/> 
            contains a valid currency string. 
            </summary>
            <param name="expression">Any string expression.</param>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> that 
            supplies culture-specific formatting information about <paramref name="expression"/>. </param>
            <returns><see cref="M:Cadru.Text.DataValidation.IsCurrency(System.String,System.IFormatProvider)"/> returns <see langword="true"/> if <paramref name="expression"/> contains a valid
            currency string; otherwise it returns <see langword="false"/>.</returns>
        </member>
        <member name="M:Cadru.Text.DataValidation.IsDate(System.String)">
             <summary>
             Returns a <see cref="T:System.Boolean"/> expression indicating whether <paramref name="expression"/> can be 
             converted to a date.
             </summary>
             <param name="expression">Any string expression recognizable as a date or time.</param>
             <returns><see cref="M:Cadru.Text.DataValidation.IsDate(System.String)"/> returns <see langword="true"/> if <paramref name="expression"/> is a string convertible
             to type <see cref="T:System.DateTime"/>; otherwise, it returns <see langword="false"/>.</returns>
             <remarks><para>In Microsoft Windows, the range of valid dates is January 1, 100 A.D. through 
             December 31, 9999 A.D.; the ranges vary among operating systems.</para>
             <para><see cref="M:Cadru.Text.DataValidation.IsDate(System.String)"/> uses the <see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo"/> object.</para>
             </remarks>
             <example>The following example uses the <see cref="M:Cadru.Text.DataValidation.IsDate(System.String)"/> function to determine whether an expression 
             can be converted to a date:
             <code>
             string dtString = "9/27/1973";
             string dtBadString = "hello";
            
             Console.WriteLine(DataValidation.IsDate(dtString));
             Console.WriteLine(DataValidation.IsDate(dtBadString));
             </code>
             Produces the following output:
             <code>
             true
             false
             </code></example>
        </member>
        <member name="M:Cadru.Text.DataValidation.IsDate(System.String,System.IFormatProvider)">
             <summary>
             Returns a <see cref="T:System.Boolean"/> expression indicating whether <paramref name="expression"/> can be 
             converted to a date.
             </summary>
             <param name="expression">Any string expression recognizable as a date or time.</param>
             <param name="provider">An <see cref="T:System.IFormatProvider"/> that 
             supplies culture-specific formatting information about <paramref name="expression"/>. </param>
             <returns><see cref="M:Cadru.Text.DataValidation.IsDate(System.String,System.IFormatProvider)"/> returns <see langword="true"/> if <paramref name="expression"/> is a string convertible
             to type <see cref="T:System.DateTime"/>; otherwise, it returns <see langword="false"/>.</returns>
             <remarks><para>In Microsoft Windows, the range of valid dates is January 1, 100 A.D. through 
             December 31, 9999 A.D.; the ranges vary among operating systems.</para>
             </remarks>
             <example>The following example uses the IsDate function to determine whether an expression 
             can be converted to a date:
             <code>
             string dtString = "9/27/1973";
             string dtBadString = "hello";
            
             Console.WriteLine(DataValidation.IsDate(dtString));
             Console.WriteLine(DataValidation.IsDate(dtBadString));
             </code>
             Produces the following output:
             <code>
             true
             false
             </code></example>
        </member>
        <member name="M:Cadru.Text.DataValidation.IsDate(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)">
             <summary>
             Returns a <see cref="T:System.Boolean"/> expression indicating whether <paramref name="expression"/> can be 
             converted to a date.
             </summary>
             <param name="expression">Any string expression recognizable as a date or time.</param>
             <param name="provider">An <see cref="T:System.IFormatProvider"/> that 
             supplies culture-specific formatting information about <paramref name="expression"/>. </param>
             <param name="styles">A bitwise combination of enumeration values 
             that defines how to interpret the parsed date in relation to the 
             current time zone or the current date. A typical value to specify
             is <see cref="T:System.Globalization.DateTimeStyles">None</see>.</param>
             <returns><see cref="M:Cadru.Text.DataValidation.IsDate(System.String,System.IFormatProvider)"/> returns <see langword="true"/> if <paramref name="expression"/> is a string convertible
             to type <see cref="T:System.DateTime"/>; otherwise, it returns <see langword="false"/>.</returns>
             <remarks><para>In Microsoft Windows, the range of valid dates is January 1, 100 A.D. through 
             December 31, 9999 A.D.; the ranges vary among operating systems.</para>
             </remarks>
             <example>The following example uses the IsDate function to determine whether an expression 
             can be converted to a date:
             <code>
             string dtString = "9/27/1973";
             string dtBadString = "hello";
            
             Console.WriteLine(DataValidation.IsDate(dtString));
             Console.WriteLine(DataValidation.IsDate(dtBadString));
             </code>
             Produces the following output:
             <code>
             true
             false
             </code></example>
        </member>
        <member name="M:Cadru.Text.DataValidation.IsHexadecimal(System.Char)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether <paramref name="expression"/> 
            contains hexadecimal characters. 
            </summary>
            <param name="expression">Any string expression.</param>
            <returns><see cref="M:Cadru.Text.DataValidation.IsHexadecimal(System.Char)"/> returns <see langword="true"/> if <paramref name="expression"/> contains hexadecimal
            characters; otherwise it returns <see langword="false"/>.</returns>
            <remarks>Hexadecimal characters are any letters
            A-F, a-f, or 0-9.</remarks>
        </member>
        <member name="M:Cadru.Text.DataValidation.IsHexadecimal(System.String)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether <paramref name="expression"/> 
            contains hexadecimal characters. 
            </summary>
            <param name="expression">Any string expression.</param>
            <returns><see cref="M:Cadru.Text.DataValidation.IsHexadecimal(System.String)"/> returns <see langword="true"/> if <paramref name="expression"/> contains hexadecimal
            characters; otherwise it returns <see langword="false"/>.</returns>
            <remarks>Hexadecimal characters are any letters
            A-F, a-f, or 0-9.</remarks>
        </member>
        <member name="M:Cadru.Text.DataValidation.IsNumeric(System.Char)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether <paramref name="expression"/>
            contains only numbers.
            </summary>
            <param name="expression">Any string expression.</param>
            <returns><see cref="M:Cadru.Text.DataValidation.IsNumeric(System.Char)"/> returns <see langword="true"/> if <paramref name="expression"/> contains numeric
            characters; otherwise it returns <see langword="false"/>.</returns>
            <remarks>Numeric characters are 0-9.</remarks>
        </member>
        <member name="M:Cadru.Text.DataValidation.IsNumeric(System.String)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether <paramref name="expression"/>
            contains only numbers.
            </summary>
            <param name="expression">Any string expression.</param>
            <returns><see cref="M:Cadru.Text.DataValidation.IsNumeric(System.String)"/> returns <see langword="true"/> if <paramref name="expression"/> contains numeric
            characters; otherwise it returns <see langword="false"/>.</returns>
            <remarks>Numeric characters are 0-9.</remarks>
        </member>
        <member name="M:Cadru.Text.DataValidation.IsNumeric(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether <paramref name="expression"/>
            contains only numbers.
            </summary>
            <param name="expression">Any string expression.</param>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> that 
            supplies culture-specific formatting information about <paramref name="expression"/>. </param>
            <returns><see cref="M:Cadru.Text.DataValidation.IsNumeric(System.String,System.IFormatProvider)"/> returns <see langword="true"/> if <paramref name="expression"/> contains numeric
            characters; otherwise it returns <see langword="false"/>.</returns>
            <remarks>Numeric characters are 0-9.</remarks>
        </member>
        <member name="M:Cadru.Text.DataValidation.IsStrictlyAlpha(System.Char)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether <paramref name="expression"/>
            contains only alphabetic characters.
            </summary>
            <param name="expression">Any string expression.</param>
            <returns><see cref="M:Cadru.Text.DataValidation.IsStrictlyAlpha(System.Char)"/> returns <see langword="true"/> if <paramref name="expression"/> contains 
            alphabetic characters; otherwise it returns <see langword="false"/>.</returns>
            <remarks>Alphabetic characters are any letters A-Z or a-z.</remarks>
        </member>
        <member name="M:Cadru.Text.DataValidation.IsStrictlyAlpha(System.String)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether <paramref name="expression"/>
            contains only alphabetic characters.
            </summary>
            <param name="expression">Any string expression.</param>
            <returns><see cref="M:Cadru.Text.DataValidation.IsStrictlyAlpha(System.String)"/> returns <see langword="true"/> if <paramref name="expression"/> contains 
            alphabetic characters; otherwise it returns <see langword="false"/>.</returns>
            <remarks>Alphabetic characters are any letters A-Z or a-z.</remarks>
        </member>
        <member name="M:Cadru.Text.DataValidation.IsStrictlyAlphanumeric(System.Char)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether <paramref name="expression"/>
            contains only alphabetic and numeric characters.
            </summary>
            <param name="expression">Any string expression.</param>
            <returns><see cref="M:Cadru.Text.DataValidation.IsStrictlyAlphanumeric(System.Char)"/> returns <see langword="true"/> if <paramref name="expression"/> contains 
            alphabetic characters; otherwise it returns <see langword="false"/>.</returns>
            <remarks>Alphabetic characters are any letters A-Z or a-z. 
            Numeric characters are 0-9.</remarks>
        </member>
        <member name="M:Cadru.Text.DataValidation.IsStrictlyAlphanumeric(System.String)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether <paramref name="expression"/>
            contains only alphabetic and numeric characters.
            </summary>
            <param name="expression">Any string expression.</param>
            <returns><see cref="M:Cadru.Text.DataValidation.IsStrictlyAlphanumeric(System.String)"/> returns <see langword="true"/> if <paramref name="expression"/> contains 
            alphabetic characters; otherwise it returns <see langword="false"/>.</returns>
            <remarks>Alphabetic characters are any letters A-Z or a-z. 
            Numeric characters are 0-9.</remarks>
        </member>
        <member name="M:Cadru.Text.DataValidation.IsValidFileName(System.String)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether <paramref name="expression"/> 
            contains a valid file name. 
            </summary>
            <param name="expression">Any string expression.</param>
            <returns><see cref="M:Cadru.Text.DataValidation.IsValidFileName(System.String)"/> returns <see langword="true"/> if <paramref name="expression"/> contains a
            valid file name; otherwise it returns <see langword="false"/>.</returns>
        </member>
        <member name="M:Cadru.Text.DataValidation.IsValidFileName(System.String,System.Boolean)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether <paramref name="expression"/> 
            contains a valid file name. 
            </summary>
            <param name="expression">Any string expression.</param>
            <param name="platformIndependent"><see langword="true"/> to test whether
            the expression contains a valid platform independent file name;
            otherwise, <see langword="false"/>.</param>
            <returns><see cref="M:Cadru.Text.DataValidation.IsValidFileName(System.String,System.Boolean)"/> returns <see langword="true"/> if <paramref name="expression"/> contains a
            valid file name; otherwise it returns <see langword="false"/>.</returns>
        </member>
        <member name="T:Cadru.Text.NumericComparisonOptions">
            <summary>
            Specifies the comparison rules to be used by certain overloads of the
            <see cref="T:Cadru.Extensions.StringExtensions">StringExtensions.LengthBetween</see> and
            <see cref="T:Cadru.Extensions.NumericExtensions">NumericExtensions.Between</see> methods. 
            </summary>
        </member>
        <member name="F:Cadru.Text.NumericComparisonOptions.None">
            <summary>
            The comparison includes neither the minimum and maximum value.
            </summary>
        </member>
        <member name="F:Cadru.Text.NumericComparisonOptions.IncludeMinimum">
            <summary>
            The comparison includes the minimum value.
            </summary>
        </member>
        <member name="F:Cadru.Text.NumericComparisonOptions.IncludeMaximum">
            <summary>
            The comparison includes the maximum value.
            </summary>
        </member>
        <member name="F:Cadru.Text.NumericComparisonOptions.IncludeBoth">
            <summary>
            The comparison includes both the minimum and maximum value.
            </summary>
        </member>
        <member name="T:Cadru.Text.NormalizationOptions">
            <summary>
            Options used by the <see cref="M:Cadru.Extensions.StringExtensions.Clean(System.String)"/> methods to
            determine how to normalize a string.
            </summary>
        </member>
        <member name="F:Cadru.Text.NormalizationOptions.None">
            <summary>
            Do not remove any characters from the string.
            </summary>
        </member>
        <member name="F:Cadru.Text.NormalizationOptions.ControlCharacters">
            <summary>
            Remove all control characters from the string.
            </summary>
        </member>
        <member name="F:Cadru.Text.NormalizationOptions.Whitespace">
            <summary>
            Remove all white space characters from the beginning 
            and end of the string and collapse all internal white
            space characters to a single white space character.
            </summary>
        </member>
        <member name="F:Cadru.Text.NormalizationOptions.All">
            <summary>
            Remove all white space and control characters from 
            the beginning and end of the string and collapse
            all internal white space characters to a single 
            white space character.
            </summary>
        </member>
        <member name="T:Cadru.Extensions.StringExtensions">
            <summary>
            Provides basic routines for common string manipulation.
            </summary>
        </member>
        <member name="M:Cadru.Extensions.StringExtensions.Contains(System.String,System.String,System.StringComparison)">
            <summary>
            Returns a value indicating whether the specified <see cref="T:System.String"/> object occurs within this string.
            </summary>
            <param name="source">The source <see cref="T:System.String"/>.</param>
            <param name="value">The string to seek.</param>
            <param name="comparisonType">One of the enumeration values that specifies how the strings will be compared.</param>
            <returns>
            <see langword="true"/> if the <paramref name="value"/> parameter occurs within
            this string, or if <paramref name="value"/> is the empty string (""); 
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.StringExtensions.IndexOfOccurrence(System.String,System.Char,System.Int32)">
            <summary>
            Reports the zero-based index of the nth occurrence of the 
            specified character in <paramref name="source"/>.
            </summary>
            <param name="source">The source <see cref="T:System.String"/>.</param>
            <param name="value">The character to seek.</param>
            <param name="occurrence">The occurrence to find.</param>
            <returns>The index position of <paramref name="value"/> if that 
            character is found, or -1 if it is not. If <paramref name="value"/> is
            <see cref="F:System.String.Empty">String.Empty</see>, the return value is 0.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="source"/> is <see langword="null"/>.</para>
            <para>-or-</para>
            <para><paramref name="value"/> is <see langword="null"/>.</para>
            </exception>
        </member>
        <member name="M:Cadru.Extensions.StringExtensions.IndexOfOccurrence(System.String,System.String,System.Int32)">
            <summary>
            Reports the zero-based index of the nth occurrence of the 
            specified string in <paramref name="source"/>.
            </summary>
            <param name="source">The source <see cref="T:System.String"/>.</param>
            <param name="value">The string to seek.</param>
            <param name="occurrence">The occurrence to find.</param>
            <returns>The index position of <paramref name="value"/> if that 
            string is found, or -1 if it is not. If <paramref name="value"/> is
            <see cref="F:System.String.Empty">String.Empty</see>, the return value is 0.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="source"/> is <see langword="null"/>.</para>
            <para>-or-</para>
            <para><paramref name="value"/> is <see langword="null"/>.</para>
            </exception>
        </member>
        <member name="M:Cadru.Extensions.StringExtensions.IndexOfOccurrence(System.String,System.Char,System.Int32,System.Int32)">
            <summary>
            Reports the zero-based index of the nth occurrence of the 
            specified character in <paramref name="source"/>.
            </summary>
            <param name="source">The source <see cref="T:System.String"/>.</param>
            <param name="value">The string to seek.</param>
            <param name="startIndex">The search starting position.</param>
            <param name="occurrence">The occurrence to find.</param>
            <returns>The index position of <paramref name="value"/> if that 
            character is found, or -1 if it is not. If <paramref name="value"/> is
            <see cref="F:System.String.Empty">String.Empty</see>, the return value is 0.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="source"/> is <see langword="null"/>.</para>
            <para>-or-</para>
            <para><paramref name="value"/> is <see langword="null"/>.</para>
            </exception>
        </member>
        <member name="M:Cadru.Extensions.StringExtensions.IndexOfOccurrence(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Reports the zero-based index of the nth occurrence of the 
            specified string in <paramref name="source"/>.
            </summary>
            <param name="source">The source <see cref="T:System.String"/>.</param>
            <param name="value">The string to seek.</param>
            <param name="startIndex">The search starting position.</param>
            <param name="occurrence">The occurrence to find.</param>
            <returns>The index position of <paramref name="value"/> if that 
            string is found, or -1 if it is not. If <paramref name="value"/> is
            <see cref="F:System.String.Empty">String.Empty</see>, the return value is 0.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="source"/> is <see langword="null"/>.</para>
            <para>-or-</para>
            <para><paramref name="value"/> is <see langword="null"/>.</para>
            </exception>
        </member>
        <member name="M:Cadru.Extensions.StringExtensions.IndexOfOccurrence(System.String,System.String,System.Int32,System.StringComparison)">
            <summary>
            Reports the zero-based index of the nth occurrence of the 
            specified string in <paramref name="source"/> using the
            specified string comparison.
            </summary>
            <param name="source">The source <see cref="T:System.String"/>.</param>
            <param name="value">The string to seek.</param>
            <param name="occurrence">The occurrence to find.</param>
            <param name="comparisonType">One of the <see cref="T:System.StringComparison"/> values.</param>
            <returns>The index position of <paramref name="value"/> if that 
            string is found, or -1 if it is not. If <paramref name="value"/> is
            <see cref="F:System.String.Empty">String.Empty</see>, the return value is 0.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="source"/> is <see langword="null"/>.</para>
            <para>-or-</para>
            <para><paramref name="value"/> is <see langword="null"/>.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="comparisonType"/> is not a valid 
            <see cref="T:System.StringComparison"/>System.StringComparison value.
            </exception>
        </member>
        <member name="M:Cadru.Extensions.StringExtensions.IndexOfOccurrence(System.String,System.Char,System.Int32,System.Int32,System.Int32)">
            <summary>
            Reports the zero-based index of the nth occurrence of the 
            specified string in <paramref name="source"/>.
            </summary>
            <param name="source">The source <see cref="T:System.String"/>.</param>
            <param name="value">The string to seek.</param>
            <param name="startIndex">The search starting position.</param>
            <param name="count">The number of character positions to examine.</param>
            <param name="occurrence">The occurrence to find.</param>
            <returns>The index position of <paramref name="value"/> if that 
            string is found, or -1 if it is not. If <paramref name="value"/> is
            <see cref="F:System.String.Empty">String.Empty</see>, the return value is 0.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="source"/> is <see langword="null"/>.</para>
            <para>-or-</para>
            <para><paramref name="value"/> is <see langword="null"/>.</para>
            </exception>
        </member>
        <member name="M:Cadru.Extensions.StringExtensions.IndexOfOccurrence(System.String,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Reports the zero-based index of the nth occurrence of the 
            specified string in <paramref name="source"/>.
            </summary>
            <param name="source">The source <see cref="T:System.String"/>.</param>
            <param name="value">The string to seek.</param>
            <param name="startIndex">The search starting position.</param>
            <param name="count">The number of character positions to examine.</param>
            <param name="occurrence">The occurrence to find.</param>
            <returns>The index position of <paramref name="value"/> if that 
            string is found, or -1 if it is not. If <paramref name="value"/> is
            <see cref="F:System.String.Empty">String.Empty</see>, the return value is 0.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="source"/> is <see langword="null"/>.</para>
            <para>-or-</para>
            <para><paramref name="value"/> is <see langword="null"/>.</para>
            </exception>
        </member>
        <member name="M:Cadru.Extensions.StringExtensions.IndexOfOccurrence(System.String,System.String,System.Int32,System.Int32,System.StringComparison)">
            <summary>
            Reports the zero-based index of the nth occurrence of the 
            specified string in <paramref name="source"/>.
            </summary>
            <param name="source">The source <see cref="T:System.String"/>.</param>
            <param name="value">The string to seek.</param>
            <param name="startIndex">The search starting position.</param>
            <param name="occurrence">The occurrence to find.</param>
            <param name="comparisonType">One of the <see cref="T:System.StringComparison"/> values.</param>
            <returns>The index position of <paramref name="value"/> if that 
            string is found, or -1 if it is not. If <paramref name="value"/> is
            <see cref="F:System.String.Empty">String.Empty</see>, the return value is 0.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="source"/> is <see langword="null"/>.</para>
            <para>-or-</para>
            <para><paramref name="value"/> is <see langword="null"/>.</para>
            </exception>
        </member>
        <member name="M:Cadru.Extensions.StringExtensions.IndexOfOccurrence(System.String,System.String,System.Int32,System.Int32,System.Int32,System.StringComparison)">
            <summary>
            Reports the zero-based index of the nth occurrence of the 
            specified string in <paramref name="source"/>.
            </summary>
            <param name="source">The source <see cref="T:System.String"/>.</param>
            <param name="value">The string to seek.</param>
            <param name="startIndex">The search starting position.</param>
            <param name="count">The number of character positions to examine.</param>
            <param name="occurrence">The occurrence to find.</param>
            <param name="comparisonType">One of the <see cref="T:System.StringComparison"/> values.</param>
            <returns>The index position of <paramref name="value"/> if that 
            string is found, or -1 if it is not. If <paramref name="value"/> is
            <see cref="F:System.String.Empty">String.Empty</see>, the return value is 0.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="source"/> is <see langword="null"/>.</para>
            <para>-or-</para>
            <para><paramref name="value"/> is <see langword="null"/>.</para>
            </exception>
        </member>
        <member name="M:Cadru.Extensions.StringExtensions.LastCharacter(System.String)">
            <summary>
            Returns the last character in <paramref name="source"/>.
            </summary>
            <param name="source">The source <see cref="T:System.String"/>.</param>
            <returns>The last character in the string of the null character ('\0') if the
            string has a zero length.</returns>
        </member>
        <member name="M:Cadru.Extensions.StringExtensions.LeftSubstring(System.String,System.Char)">
            <summary>
            Retrieves a substring from <paramref name="source"/>. The substring ends at the
            specified character position.
            </summary>
            <param name="source">The source <see cref="T:System.String"/>.</param>
            <param name="value">The ending character of a substring.</param>
            <returns>A <see cref="T:System.String"/> object equivalent to the substring that 
            ends at the position of <paramref name="value"/> in <paramref name="source"/>, or
            the entire string if <paramref name="value"/> is not found in the string.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.StringExtensions.LeftSubstring(System.String,System.Char,System.Int32)">
            <summary>
            Retrieves a substring from <paramref name="source"/>. The substring ends at the
            specified string position.
            </summary>
            <param name="source">The source <see cref="T:System.String"/>.</param>
            <param name="value">The ending string of a substring.</param>
            <param name="occurrence">The occurrence of <paramref name="value"/>.</param>
            <returns>A <see cref="T:System.String"/> object equivalent to the substring that 
            ends at the position of <paramref name="value"/> in <paramref name="source"/>, or
            the entire string if <paramref name="value"/> is not found in the string.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.StringExtensions.LeftSubstring(System.String,System.Int32)">
            <summary>
            Retrieves a substring from <paramref name="source"/>. The substring ends at the
            specified character position.
            </summary>
            <param name="source">The source <see cref="T:System.String"/>.</param>
            <param name="endingIndex">The index of the end of the substring.</param>
            <returns>A <see cref="T:System.String"/> object equivalent to the substring that 
            ends at <paramref name="endingIndex"/> in <paramref name="source"/>, or
            the entire string if <paramref name="endingIndex"/> is not found in the string.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="endingIndex"/> is less than zero. </exception>
        </member>
        <member name="M:Cadru.Extensions.StringExtensions.LeftSubstring(System.String,System.Int32,System.Boolean)">
            <summary>
            Retrieves a substring from <paramref name="source"/>. The substring ends at the
            specified character position.
            </summary>
            <param name="source">The source <see cref="T:System.String"/>.</param>
            <param name="endingIndex">The index of the end of the substring.</param>
            <param name="inclusive">Indicates if the substring should include the ending character position.</param>
            <returns>A <see cref="T:System.String"/> object equivalent to the substring that 
            ends at <paramref name="endingIndex"/> in <paramref name="source"/>, or
            the entire string if <paramref name="endingIndex"/> is not found in the string.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.StringExtensions.LeftSubstring(System.String,System.String)">
            <summary>
            Retrieves a substring from <paramref name="source"/>. The substring ends at the
            specified string position.
            </summary>
            <param name="source">The source <see cref="T:System.String"/>.</param>
            <param name="value">The ending string of a substring.</param>
            <returns>A <see cref="T:System.String"/> object equivalent to the substring that 
            ends at the position of <paramref name="value"/> in <paramref name="source"/>, or
            the entire string if <paramref name="value"/> is not found in the string.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.StringExtensions.LeftSubstring(System.String,System.String,System.Int32)">
            <summary>
            Retrieves a substring from <paramref name="source"/>. The substring ends at the
            specified string position.
            </summary>
            <param name="source">The source <see cref="T:System.String"/>.</param>
            <param name="value">The ending string of a substring.</param>
            <param name="occurrence">The occurrence of <paramref name="value"/>.</param>
            <returns>A <see cref="T:System.String"/> object equivalent to the substring that 
            ends at the position of <paramref name="value"/> in <paramref name="source"/>, or
            the entire string if <paramref name="value"/> is not found in the string.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.StringExtensions.LeftSubstring(System.String,System.String,System.Int32,System.StringComparison)">
            <summary>
            Retrieves a substring from <paramref name="source"/>. The substring ends at the
            specified string position.
            </summary>
            <param name="source">The source <see cref="T:System.String"/>.</param>
            <param name="value">The ending string of a substring.</param>
            <param name="occurrence">The occurrence of <paramref name="value"/>.</param>
            <param name="comparisonType">One of the <see cref="T:System.StringComparison"/> values.</param> 
            <returns>A <see cref="T:System.String"/> object equivalent to the substring that 
            ends at the position of <paramref name="value"/> in <paramref name="source"/>, or
            the entire string if <paramref name="value"/> is not found in the string.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.StringExtensions.LengthBetween(System.String,System.Int32,System.Int32)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether the length of <paramref name="source"/>
            is between the minimum and maximum indicated.
            </summary>
            <param name="source">Any string expression.</param>
            <param name="minimum">The minimum string length.</param>
            <param name="maximum">The maximum string length.</param>
            <returns>MinMax returns <see langword="true"/> if <paramref name="source"/> is greater than
            the minimum value but less than the maximum value; otherwise it 
            returns <see langword="false"/>.</returns>
        </member>
        <member name="M:Cadru.Extensions.StringExtensions.LengthBetween(System.String,System.Int32,System.Int32,Cadru.Text.NumericComparisonOptions)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether the length of <paramref name="source"/>
            is between the minimum and maximum indicated.
            </summary>
            <param name="source">Any string expression.</param>
            <param name="minimum">The minimum string length.</param>
            <param name="maximum">The maximum string length.</param>
            <param name="options">A bitwise combination of enumeration values 
            that defines whether the comparison is inclusive.</param>
            <returns>MinMax returns <see langword="true"/> if <paramref name="source"/> is greater than
            the minimum value but less than the maximum value; otherwise it 
            returns <see langword="false"/>.</returns>
        </member>
        <member name="M:Cadru.Extensions.StringExtensions.LengthGreaterThan(System.String,System.Int32)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether
            the length of <paramref name="source"/> is greater than the
            minimum indicated.
            </summary>
            <param name="source">The value to test.</param>
            <param name="minimum">The minimum value to compare against.</param>
            <returns>
            <see langword="true"/> if the length of <paramref name="source"/>
            is greater than the minimum indicated; otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.StringExtensions.LengthGreaterThanOrEqualTo(System.String,System.Int32)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether
            the length of <paramref name="source"/> is greater than or
            equal to the minimum indicated.
            </summary>
            <param name="source">The value to test.</param>
            <param name="minimum">The minimum value to compare against.</param>
            <returns>
            <see langword="true"/> if the length of <paramref name="source"/>
            is greater than or equal to the minimum indicated; otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.StringExtensions.LengthLessThan(System.String,System.Int32)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether
            the length of <paramref name="source"/> is less than the
            minimum indicated.
            </summary>
            <param name="source">The value to test.</param>
            <param name="maximum">The maximum value to compare against.</param>
            <returns>
            <see langword="true"/> if the length of <paramref name="source"/>
            is less than the minimum indicated; otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.StringExtensions.LengthLessThanOrEqualTo(System.String,System.Int32)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether
            the length of <paramref name="source"/> is less than or
            equal to the minimum indicated.
            </summary>
            <param name="source">The value to test.</param>
            <param name="maximum">The maximum value to compare against.</param>
            <returns>
            <see langword="true"/> if the length of <paramref name="source"/>
            is less than or equal to the minimum indicated; otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.StringExtensions.IsNullOrWhiteSpace(System.String)">
            <summary>
            Indicates whether a specified string is <see langword="null"/>, 
            <see cref="F:System.String.Empty">empty</see>, or consists only of white-space characters.
            </summary>
            <param name="value">The string to test.</param>
            <returns><see langword="true"/> if the <paramref name="value"/>
            parameter is <see langword="null"/>null or <see cref="F:System.String.Empty">String.Empty</see>,
            or if <paramref name="value"/> consists exclusively of white-space characters.</returns>
            <remarks>White-space characters are defined by the Unicode standard. The 
            <see cref="M:Cadru.Extensions.StringExtensions.IsNullOrWhiteSpace(System.String)"/> method interprets any character that returns a value of 
            <see langword="true"/> when it is passed to the <see cref="M:System.Char.IsWhiteSpace(System.Char)"/>
            method as a white-space character.</remarks>
        </member>
        <member name="M:Cadru.Extensions.StringExtensions.IsNotNullOrWhiteSpace(System.String)">
            <summary>
            Indicates whether a specified string is not <see langword="null"/>, 
            <see cref="F:System.String.Empty">empty</see>, or consists only of white-space characters.
            </summary>
            <param name="value">The string to test.</param>
            <returns><see langword="true"/> if the <paramref name="value"/>
            parameter is not <see langword="null"/>null or <see cref="F:System.String.Empty">String.Empty</see>,
            or if <paramref name="value"/> does not consist exclusively of white-space characters.</returns>
            <remarks>White-space characters are defined by the Unicode standard. The 
            <see cref="M:Cadru.Extensions.StringExtensions.IsNotNullOrWhiteSpace(System.String)"/> method interprets any character that returns a value of 
            <see langword="true"/> when it is passed to the <see cref="M:System.Char.IsWhiteSpace(System.Char)"/>
            method as a white-space character.</remarks>
        </member>
        <member name="M:Cadru.Extensions.StringExtensions.Clean(System.String)">
            <summary>
            Returns a new string whose textual value is the normalized form of
            <paramref name="source"/>.
            </summary>
            <param name="source">The <see cref="T:System.String"/> to normalize.
            </param>
            <returns>A new, normalized string.</returns>
            <remarks><para>The <see cref="M:Cadru.Extensions.StringExtensions.Clean(System.String)"/> method removes 
            all occurrences of white space and control characters from the 
            beginning and end of the given string as well as collapsing all 
            internal white space characters to a single white space character.
            </para>
            </remarks>
        </member>
        <member name="M:Cadru.Extensions.StringExtensions.Clean(System.String,Cadru.Text.NormalizationOptions)">
            <summary>
            Returns a new string whose textual value is the normalized form of
            <paramref name="source"/>.
            </summary>
            <param name="source">The <see cref="T:System.String"/> to normalize.
            </param>
            <param name="options">One of the 
            <see cref="T:Cadru.Text.NormalizationOptions"/> values.</param>
            <returns>A new, normalized string.</returns>
        </member>
        <member name="M:Cadru.Extensions.StringExtensions.OccurrencesOf(System.String,System.Char)">
            <summary>
            Returns the number of times <paramref name="value"/> appears in <paramref name="source"/>.
            </summary>
            <param name="source">The source <see cref="T:System.String"/>.</param>
            <param name="value">The character to count.</param>
            <returns>The number of times <paramref name="value"/> appears in <paramref name="source"/>
            or 0 if <paramref name="value"/> is not found in the string.</returns>
        </member>
        <member name="M:Cadru.Extensions.StringExtensions.OccurrencesOf(System.String,System.String)">
            <summary>
            Returns the number of times <paramref name="value"/> appears in <paramref name="source"/>.
            </summary>
            <param name="source">The source <see cref="T:System.String"/>.</param>
            <param name="value">The string to count.</param>
            <returns>The number of times <paramref name="value"/> appears in <paramref name="source"/>
            or 0 if <paramref name="value"/> is not found in the string.</returns>
        </member>
        <member name="M:Cadru.Extensions.StringExtensions.OccurrencesOf(System.String,System.String,System.StringComparison)">
            <summary>
            Returns the number of times <paramref name="value"/> appears in <paramref name="source"/>.
            </summary>
            <param name="source">The source <see cref="T:System.String"/>.</param>
            <param name="value">The string to count.</param>
            <param name="comparisonType">One of the <see cref="T:System.StringComparison"/> values.</param> 
            <returns>The number of times <paramref name="value"/> appears in <paramref name="source"/>
            or 0 if <paramref name="value"/> is not found in the string.</returns>
        </member>
        <member name="M:Cadru.Extensions.StringExtensions.RemoveWhiteSpace(System.String)">
            <summary>
            Returns a new string whose textual value is <paramref name="source"/>
            with all whitespace characters removed.
            </summary>
            <param name="source">The <see cref="T:System.String"/> from which whitespace characters will be removed.
            </param>
            <returns>A new string representing <paramref name="source"/> with all of the
            whitespace characters removed.</returns>
        </member>
        <member name="M:Cadru.Extensions.StringExtensions.Replace(System.String,System.Char,System.Char,System.Int32)">
            <summary>
            Returns a new string where <paramref name="oldValue"/> has been replaced by <paramref name="newValue"/>.
            </summary>
            <param name="source">The source <see cref="T:System.String"/>.</param>
            <param name="oldValue">The character to replace.</param>
            <param name="newValue">The replacement character.</param>
            <param name="occurrences">The occurrences of <paramref name="oldValue"/> to replace.</param>
            <returns>A new string where <paramref name="oldValue"/> 
            has been replaced by <paramref name="newValue"/>.</returns>
        </member>
        <member name="M:Cadru.Extensions.StringExtensions.Replace(System.String,System.String,System.String,System.Int32)">
            <summary>
            Returns a new string where <paramref name="oldValue"/> 
            has been replaced by <paramref name="newValue"/>.
            </summary>
            <param name="source">The source <see cref="T:System.String"/>.</param>
            <param name="oldValue">The character to replace.</param>
            <param name="newValue">The replacement character.</param>
            <param name="occurrences">The occurrences of <paramref name="oldValue"/> to replace.</param>
            <returns>A new string where <paramref name="oldValue"/> 
            has been replaced by <paramref name="newValue"/>.</returns>
        </member>
        <member name="M:Cadru.Extensions.StringExtensions.Replace(System.String,System.String,System.String,System.Int32,System.StringComparison)">
            <summary>
            Returns a new string where <paramref name="oldValue"/>
            has been replaced by <paramref name="newValue"/>.
            </summary>
            <param name="source">The source <see cref="T:System.String"/>.</param>
            <param name="oldValue">The character to replace.</param>
            <param name="newValue">The replacement character.</param>
            <param name="occurrences">The occurrences of <paramref name="oldValue"/> to replace.</param>
            <param name="comparisonType">One of the <see cref="T:System.StringComparison"/> values.</param> 
            <returns>A new string where <paramref name="oldValue"/> 
            has been replaced by <paramref name="newValue"/>.</returns>
        </member>
        <member name="M:Cadru.Extensions.StringExtensions.ReplaceBetween(System.String,System.Char,System.Char,System.String)">
            <summary>
            Returns a new string where the text between <paramref name="start"/> and
            <parameref name="end"/> has been replaced by <paramref name="newValue"/>.
            </summary>
            <param name="source">The source <see cref="T:System.String"/>.</param>
            <param name="start">The starting character of the replacement substring.</param>
            <param name="end">The ending character of the replacement substring.</param>
            <param name="newValue">The replacement text.</param>
            <returns>A new string where the text between <paramref name="start"/> and
            <parameref name="end"/> has been replaced by <paramref name="newValue"/>.</returns>
        </member>
        <member name="M:Cadru.Extensions.StringExtensions.ReplaceBetween(System.String,System.Char,System.Char,System.String,System.Boolean)">
            <summary>
            Returns a new string where the text between <paramref name="start"/> and
            <parameref name="end"/> has been replaced by <paramref name="newValue"/>.
            </summary>
            <param name="source">The source <see cref="T:System.String"/>.</param>
            <param name="start">The starting character of the replacement substring.</param>
            <param name="end">The ending character of the replacement substring.</param>
            <param name="newValue">The replacement text.</param>
            <param name="inclusive">Indicates if the substring should include the start and end characters.</param> 
            <returns>A new string where the text between <paramref name="start"/> and
            <parameref name="end"/> has been replaced by <paramref name="newValue"/>.</returns>
        </member>
        <member name="M:Cadru.Extensions.StringExtensions.ReplaceBetween(System.String,System.Int32,System.Int32,System.String)">
            <summary>
            Returns a new string where the text between <paramref name="start"/> and
            <parameref name="end"/> has been replaced by <paramref name="newValue"/>.
            </summary>
            <param name="source">The source <see cref="T:System.String"/>.</param>
            <param name="start">The starting index of the replacement substring.</param>
            <param name="end">The ending index of the replacement substring.</param>
            <param name="newValue">The replacement text.</param>
            <returns>A new string where the text between <paramref name="start"/> and
            <parameref name="end"/> has been replaced by <paramref name="newValue"/>.</returns>
        </member>
        <member name="M:Cadru.Extensions.StringExtensions.ReplaceBetween(System.String,System.Int32,System.Int32,System.String,System.Boolean)">
            <summary>
            Returns a new string where the text between <paramref name="start"/> and
            <parameref name="end"/> has been replaced by <paramref name="newValue"/>.
            </summary>
            <param name="source">The source <see cref="T:System.String"/>.</param>
            <param name="start">The starting index of the replacement substring.</param>
            <param name="end">The ending index of the replacement substring.</param>
            <param name="newValue">The replacement text.</param>
            <param name="inclusive">Indicates if the substring should include the start and end indices.</param> 
            <returns>A new string where the text between <paramref name="start"/> and
            <parameref name="end"/> has been replaced by <paramref name="newValue"/>.</returns>
        </member>
        <member name="M:Cadru.Extensions.StringExtensions.ReplaceBetween(System.String,System.String,System.String,System.String)">
            <summary>
            Returns a new string where the text between <paramref name="start"/> and
            <parameref name="end"/> has been replaced by <paramref name="newValue"/>.
            </summary>
            <param name="source">The source <see cref="T:System.String"/>.</param>
            <param name="start">The starting string of the replacement substring.</param>
            <param name="end">The ending string of the replacement substring.</param>
            <param name="newValue">The replacement text.</param>
            <returns>A new string where the text between <paramref name="start"/> and
            <parameref name="end"/> has been replaced by <paramref name="newValue"/>.</returns>
        </member>
        <member name="M:Cadru.Extensions.StringExtensions.ReplaceBetween(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Returns a new string where the text between <paramref name="start"/> and
            <parameref name="end"/> has been replaced by <paramref name="newValue"/>.
            </summary>
            <param name="source">The source <see cref="T:System.String"/>.</param>
            <param name="start">The starting string of the replacement substring.</param>
            <param name="end">The ending string of the replacement substring.</param>
            <param name="newValue">The replacement text.</param>
            <param name="inclusive">Indicates if the substring should include the start and end strings.</param> 
            <returns>A new string where the text between <paramref name="start"/> and
            <parameref name="end"/> has been replaced by <paramref name="newValue"/>.</returns>
        </member>
        <member name="M:Cadru.Extensions.StringExtensions.ReplaceBetween(System.String,System.String,System.String,System.String,System.Boolean,System.StringComparison)">
            <summary>
            Returns a new string where the text between <paramref name="start"/> and
            <parameref name="end"/> has been replaced by <paramref name="newValue"/>.
            </summary>
            <param name="source">The source <see cref="T:System.String"/>.</param>
            <param name="start">The starting string of the replacement substring.</param>
            <param name="end">The ending string of the replacement substring.</param>
            <param name="newValue">The replacement text.</param>
            <param name="inclusive">Indicates if the substring should include the start and end strings.</param> 
            <param name="comparisonType">One of the <see cref="T:System.StringComparison"/> values.</param> 
            <returns>A new string where the text between <paramref name="start"/> and
            <parameref name="end"/> has been replaced by <paramref name="newValue"/>.</returns>
        </member>
        <member name="M:Cadru.Extensions.StringExtensions.ResizeString(System.String,System.Int32)">
            <summary>
            Returns a new string whose textual value is the resized form of
            <paramref name="source"/>.
            </summary>
            <param name="source">The <see cref="T:System.String"/> to resize.</param>
            <param name="length">The desired length of the new 
            <see cref="T:System.String"/>.</param>
            <returns>A new, resized string.</returns>
            <remarks><para>If <paramref name="source"/> is less than 
            <paramref name="length"/>, the returned string is padded with
            spaces; otherwise it is truncated to the desired length.</para>
            <para>If <paramref name="source"/> is <see langword="null"/>
            or is an empty string, a new string containing 
            <paramref name="length"/> number of spaces is returned.</para>
            </remarks>
        </member>
        <member name="M:Cadru.Extensions.StringExtensions.RightSubstring(System.String,System.Char)">
            <summary>
            Retrieves a substring from <paramref name="source"/>. The substring ends at the
            specified character position from the end of the string.
            </summary>
            <param name="source">The source <see cref="T:System.String"/>.</param>
            <param name="value">The ending character of a substring.</param>
            <returns>A <see cref="T:System.String"/> object equivalent to the substring that 
            ends at the position of <paramref name="value"/> in <paramref name="source"/>, or
            the entire string if <paramref name="value"/> is not found in the string.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.StringExtensions.RightSubstring(System.String,System.Char,System.Int32)">
            <summary>
            Retrieves a substring from <paramref name="source"/>. The substring ends at the
            specified string position from the end of the string.
            </summary>
            <param name="source">The source <see cref="T:System.String"/>.</param>
            <param name="value">The ending string of a substring.</param>
            <param name="occurrence">The occurrence of <paramref name="value"/>.</param>
            <returns>A <see cref="T:System.String"/> object equivalent to the substring that 
            ends at the position of <paramref name="value"/> in <paramref name="source"/>, or
            the entire string if <paramref name="value"/> is not found in the string.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.StringExtensions.RightSubstring(System.String,System.Int32)">
            <summary>
            Retrieves a substring from <paramref name="source"/>. The substring ends at the
            specified character position from the end of the string.
            </summary>
            <param name="source">The source <see cref="T:System.String"/>.</param>
            <param name="endingIndex">The index of the end of the substring.</param>
            <returns>A <see cref="T:System.String"/> object equivalent to the substring that 
            ends at <paramref name="endingIndex"/> in <paramref name="source"/>, or
            the entire string if <paramref name="endingIndex"/> is not found in the string.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="endingIndex"/> is less than zero. </exception>
        </member>
        <member name="M:Cadru.Extensions.StringExtensions.RightSubstring(System.String,System.Int32,System.Boolean)">
            <summary>
            Retrieves a substring from <paramref name="source"/>. The substring ends at the
            specified character position from the end of the string.
            </summary>
            <param name="source">The source <see cref="T:System.String"/>.</param>
            <param name="endingIndex">The index of the end of the substring.</param>
            <param name="inclusive">Indicates if the substring should include the ending character position.</param>
            <returns>A <see cref="T:System.String"/> object equivalent to the substring that 
            ends at <paramref name="endingIndex"/> in <paramref name="source"/>, or
            the entire string if <paramref name="endingIndex"/> is not found in the string.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.StringExtensions.RightSubstring(System.String,System.String)">
            <summary>
            Retrieves a substring from <paramref name="source"/>. The substring ends at the
            specified string position.
            </summary>
            <param name="source">The source <see cref="T:System.String"/>.</param>
            <param name="value">The ending string of a substring.</param>
            <returns>A <see cref="T:System.String"/> object equivalent to the substring that 
            ends at the position of <paramref name="value"/> in <paramref name="source"/>, or
            the entire string if <paramref name="value"/> is not found in the string.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.StringExtensions.RightSubstring(System.String,System.String,System.Int32)">
            <summary>
            Retrieves a substring from <paramref name="source"/>. The substring ends at the
            specified string position from the end of the string.
            </summary>
            <param name="source">The source <see cref="T:System.String"/>.</param>
            <param name="value">The ending string of a substring.</param>
            <param name="occurrence">The occurrence of <paramref name="value"/>.</param>
            <returns>A <see cref="T:System.String"/> object equivalent to the substring that 
            ends at the position of <paramref name="value"/> in <paramref name="source"/>, or
            the entire string if <paramref name="value"/> is not found in the string.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.StringExtensions.RightSubstring(System.String,System.String,System.Int32,System.StringComparison)">
            <summary>
            Retrieves a substring from <paramref name="source"/>. The substring ends at the
            specified string position from the end of the string.
            </summary>
            <param name="source">The source <see cref="T:System.String"/>.</param>
            <param name="value">The ending string of a substring.</param>
            <param name="occurrence">The occurrence of <paramref name="value"/>.</param>
            <param name="comparisonType">One of the <see cref="T:System.StringComparison"/> values.</param> 
            <returns>A <see cref="T:System.String"/> object equivalent to the substring that 
            ends at the position of <paramref name="value"/> in <paramref name="source"/>, or
            the entire string if <paramref name="value"/> is not found in the string.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.StringExtensions.SubstringBetween(System.String,System.Char,System.Char)">
            <summary>
            Retrieves a substring from <paramref name="source"/>. The substring begins at <paramref name="start"/>
            and ends at <paramref name="end"/>. 
            </summary>
            <param name="source">The source <see cref="T:System.String"/>.</param>
            <param name="start">The starting character of the substring.</param>
            <param name="end">The ending character of the substring.</param>
            <returns>A <see cref="T:System.String"/> object equivalent to the substring that 
            ends at the position of <paramref name="end"/> in <paramref name="source"/>, or
            <see cref="F:System.String.Empty"/> if <paramref name="start"/> or <paramref name="end"/> 
            are not found in the string.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.StringExtensions.SubstringBetween(System.String,System.Char,System.Char,System.Boolean)">
            <summary>
            Retrieves a substring from <paramref name="source"/>. The substring begins at <paramref name="start"/>
            and ends at <paramref name="end"/>.
            </summary>
            <param name="source">The source <see cref="T:System.String"/>.</param>
            <param name="start">The starting character of the substring.</param>
            <param name="end">The ending character of the substring.</param>
            <param name="inclusive">Indicates if the substring should include the start and end characters.</param> 
            <returns>A <see cref="T:System.String"/> object equivalent to the substring that 
            ends at the position of <paramref name="end"/> in <paramref name="source"/>, or
            <see cref="F:System.String.Empty"/> if <paramref name="start"/> or <paramref name="end"/> 
            are not found in the string.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.StringExtensions.SubstringBetween(System.String,System.String,System.String)">
            <summary>
            Retrieves a substring from <paramref name="source"/>. The substring begins at <paramref name="start"/>
            and ends at <paramref name="end"/>. 
            </summary>
            <param name="source">The source <see cref="T:System.String"/>.</param>
            <param name="start">The starting string of the substring.</param>
            <param name="end">The ending string of the substring.</param>
            <returns>A <see cref="T:System.String"/> object equivalent to the substring that 
            ends at the position of <paramref name="end"/> in <paramref name="source"/>, or
            <see cref="F:System.String.Empty"/> if <paramref name="start"/> or <paramref name="end"/> 
            are not found in the string.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.StringExtensions.SubstringBetween(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Retrieves a substring from <paramref name="source"/>. The substring begins at <paramref name="start"/>
            and ends at <paramref name="end"/>. 
            </summary>
            <param name="source">The source <see cref="T:System.String"/>.</param>
            <param name="start">The starting string of the substring.</param>
            <param name="end">The ending string of the substring.</param>
            <param name="inclusive">Indicates if the substring should include the start and end strings.</param> 
            <returns>A <see cref="T:System.String"/> object equivalent to the substring that 
            ends at the position of <paramref name="end"/> in <paramref name="source"/>, or
            <see cref="F:System.String.Empty"/> if <paramref name="start"/> or <paramref name="end"/> 
            are not found in the string.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.StringExtensions.SubstringBetween(System.String,System.String,System.String,System.Boolean,System.StringComparison)">
            <summary>
            Retrieves a substring from <paramref name="source"/>. The substring begins at <paramref name="start"/>
            and ends at <paramref name="end"/>. 
            </summary>
            <param name="source">The source <see cref="T:System.String"/>.</param>
            <param name="start">The starting string of the substring.</param>
            <param name="end">The ending string of the substring.</param>
            <param name="inclusive">Indicates if the substring should include the start and end strings.</param> 
            <param name="comparisonType">One of the <see cref="T:System.StringComparison"/> values.</param> 
            <returns>A <see cref="T:System.String"/> object equivalent to the substring that 
            ends at the position of <paramref name="end"/> in <paramref name="source"/>, or
            <see cref="F:System.String.Empty"/> if <paramref name="start"/> or <paramref name="end"/> 
            are not found in the string.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.StringExtensions.Truncate(System.String,System.Int32)">
            <summary>
            Returns a new string whose textual value is <paramref name="source"/>
            which has been truncated at <paramref name="length"/>.
            </summary>
            <param name="source">The source <see cref="T:System.String"/>.</param>
            <param name="length">The maximum number of characters to be included
            in the new <see cref="T:System.String"/>.</param>
            <returns>If <paramref name="source"/> is greater than
            <paramref name="length"/>, a new string representing 
            <paramref name="source"/> which has been truncated at
            <paramref name="length"/>; otherwise, the original value.</returns>
        </member>
        <member name="T:Cadru.UnixTimestamp">
            <summary>
            Represents an instant in time, defined as the number of seconds that 
            have elapsed since 00:00:00 Coordinated Universal Time (UTC), 
            Thursday, 1 January 1970, not counting leap seconds.
            </summary>
            <remarks>The date and time range that can be represented by a
            <see cref="T:Cadru.UnixTimestamp"/> is constrained to the same date and
            time range as <see cref="P:Cadru.UnixTimestamp.DateTime"/>.</remarks>
        </member>
        <member name="F:Cadru.UnixTimestamp.MaxValue">
            <summary>
            Represents the largest possible value of <see cref="T:Cadru.UnixTimestamp"/>. This field is read-only.
            </summary>
            <remarks>The value of this constant is equivalent to 23:59:59, December 31, 9999.</remarks>
        </member>
        <member name="F:Cadru.UnixTimestamp.MinValue">
            <summary>
            Represents the smallest possible value of <see cref="T:Cadru.UnixTimestamp"/>. This field is read-only.
            </summary>
            <remarks>The value of this constant is equivalent to 00:00:00, January 01, 0001.</remarks>
        </member>
        <member name="M:Cadru.UnixTimestamp.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Cadru.UnixTimestamp"/> 
            structure to the specified number of seconds.
            </summary>
            <param name="seconds">A date and time expressed in the number of 
            seconds that have elapsed since January 1, 1970 at 00:00:00.000 
            in the Gregorian calendar.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="seconds"/> is less than 
            <see cref="F:Cadru.UnixTimestamp.MinValue"/> or greater than
            <see cref="F:Cadru.UnixTimestamp.MaxValue"/>.
            </exception>
        </member>
        <member name="M:Cadru.UnixTimestamp.#ctor(System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:Cadru.UnixTimestamp"/> 
            structure to the specified <see cref="P:Cadru.UnixTimestamp.DateTime"/> value.
            </summary>
            <param name="date">A date and time.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="date"/> is less than 
            <see cref="F:Cadru.UnixTimestamp.MinValue"/> or greater than
            <see cref="F:Cadru.UnixTimestamp.MaxValue"/>.
            </exception>
        </member>
        <member name="M:Cadru.UnixTimestamp.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Cadru.UnixTimestamp"/>
            structure to the specified year, month and day.
            </summary>
            <param name="year">The year (0 through 9999).</param>
            <param name="month">The month (0 through 12).</param>
            <param name="day">The day (1 through the number of days in <paramref name="month"/>).</param>
        </member>
        <member name="M:Cadru.UnixTimestamp.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Cadru.UnixTimestamp"/> 
            structure to the specified year, month, day, hour, minute,
            and second.
            </summary>
            <param name="year">The year (0 through 9999).</param>
            <param name="month">The month (0 through 12).</param>
            <param name="day">The day (1 through the number of days in <paramref name="month"/>).</param>
            <param name="hour">The hours (0 through 23).</param>
            <param name="minute">The minutes (0 through 59).</param>
            <param name="second">The seconds (0 through 59).</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="second"/> is less than 
            <see cref="F:Cadru.UnixTimestamp.MinValue"/> or greater than
            <see cref="F:Cadru.UnixTimestamp.MaxValue"/>.
            </exception>
        </member>
        <member name="M:Cadru.UnixTimestamp.op_Implicit(Cadru.UnixTimestamp)~System.Int64">
            <summary>
            Defines an implicit conversion from <see cref="T:Cadru.UnixTimestamp"/> to <see cref="T:System.Int64"/>.
            </summary>
            <param name="value">The object to convert.</param>
            <returns>
            The converted object.
            </returns>
        </member>
        <member name="M:Cadru.UnixTimestamp.op_Implicit(System.Int64)~Cadru.UnixTimestamp">
            <summary>
            Defines an implicit conversion from <see cref="T:System.Int64"/> to <see cref="T:Cadru.UnixTimestamp"/>.
            </summary>
            <param name="value">The object to convert.</param>
            <returns>
            The converted object.
            </returns>
        </member>
        <member name="M:Cadru.UnixTimestamp.op_Equality(Cadru.UnixTimestamp,Cadru.UnixTimestamp)">
            <summary>
            Determines whether two specified <see cref="T:Cadru.UnixTimestamp"/>
            objects represent the same point in time.
            </summary>
            <param name="left">The first object to compare.</param>
            <param name="right">The second object to compare.</param>
            <returns>
            <see langword="true"/> if both objects represent the same point
            in time; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.UnixTimestamp.op_Inequality(Cadru.UnixTimestamp,Cadru.UnixTimestamp)">
            <summary>
            Determines whether two specified <see cref="T:Cadru.UnixTimestamp"/>
            objects represent different points in time.
            </summary>
            <param name="left">The first object to compare.</param>
            <param name="right">The second object to compare.</param>
            <returns>
            <see langword="true"/> if <paramref name="left"/> and
            <paramref name="right"/> do not represent the same point
            in time; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.UnixTimestamp.op_LessThan(Cadru.UnixTimestamp,Cadru.UnixTimestamp)">
            <summary>
            Determines whether one specified <see cref="T:Cadru.UnixTimestamp"/> object
            is earlier than another specified <see cref="T:Cadru.UnixTimestamp"/> object.
            </summary>
            <param name="left">The first object to compare.</param>
            <param name="right">The second object to compare.</param>
            <returns>
            <see langword="true"/> if <paramref name="left"/> is earlier than
            <paramref name="right"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.UnixTimestamp.op_LessThanOrEqual(Cadru.UnixTimestamp,Cadru.UnixTimestamp)">
            <summary>
            Determines whether one specified <see cref="T:Cadru.UnixTimestamp"/> object
            is the same as or earlier than another specified 
            <see cref="T:Cadru.UnixTimestamp"/> object.
            </summary>
            <param name="left">The first object to compare.</param>
            <param name="right">The second object to compare.</param>
            <returns>
            <see langword="true"/> if <paramref name="left"/> is the same as or
            earlier than <paramref name="right"/>; otherwise, 
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.UnixTimestamp.op_GreaterThan(Cadru.UnixTimestamp,Cadru.UnixTimestamp)">
            <summary>
            Determines whether one specified <see cref="T:Cadru.UnixTimestamp"/> object
            is later than another specified <see cref="T:Cadru.UnixTimestamp"/> object.
            </summary>
            <param name="left">The first object to compare.</param>
            <param name="right">The second object to compare.</param>
            <returns>
            <see langword="true"/> if <paramref name="left"/> is later than
            <paramref name="right"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.UnixTimestamp.op_GreaterThanOrEqual(Cadru.UnixTimestamp,Cadru.UnixTimestamp)">
            <summary>
            Determines whether one specified <see cref="T:Cadru.UnixTimestamp"/> object
            is the same as or later than another specified 
            <see cref="T:Cadru.UnixTimestamp"/> object.
            </summary>
            <param name="left">The first object to compare.</param>
            <param name="right">The second object to compare.</param>
            <returns>
            <see langword="true"/> if <paramref name="left"/> is the same as or
            later than <paramref name="right"/>; otherwise, 
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.UnixTimestamp.Equals(Cadru.UnixTimestamp,Cadru.UnixTimestamp)">
            <summary>
            Returns a value indicating whether two <see cref="T:Cadru.UnixTimestamp"/>
            instances represent the same point in time.
            </summary>
            <param name="left">The first object to compare.</param>
            <param name="right">The second object to compare.</param>
            <returns><see langword="true"/> if the two 
            values are equal; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.UnixTimestamp.Add(System.TimeSpan)">
            <summary>
            Returns a new <see cref="T:Cadru.UnixTimestamp"/> that adds the value of 
            the specified <see cref="T:System.TimeSpan"/> to the value of this instance.
            </summary>
            <param name="value">The valueA positive or negative time interval.</param>
            <returns>An object whose value is the sum of the date and time
            represented by this instance and the time interval represented by
            <paramref name="value"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The resulting <see cref="T:Cadru.UnixTimestamp"/> is less than 
            <see cref="F:Cadru.UnixTimestamp.MinValue"/> or greater than
            <see cref="F:Cadru.UnixTimestamp.MaxValue"/>.
            </exception>
        </member>
        <member name="M:Cadru.UnixTimestamp.AddDays(System.Double)">
            <summary>
            Returns a new <see cref="T:Cadru.UnixTimestamp"/> that adds the specified
            number of days to the value of this instance.
            </summary>
            <param name="value">A number of whole and fractional days. 
            The <paramref name="value"/> parameter can be negative or positive.</param>
            <returns>An object whose value is the sum of the date and time 
            represented by this instance and the number of days represented by
            <paramref name="value"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The resulting <see cref="T:Cadru.UnixTimestamp"/> is less than 
            <see cref="F:Cadru.UnixTimestamp.MinValue"/> or greater than
            <see cref="F:Cadru.UnixTimestamp.MaxValue"/>.
            </exception>
        </member>
        <member name="M:Cadru.UnixTimestamp.AddHours(System.Double)">
            <summary>
            Returns a new <see cref="T:Cadru.UnixTimestamp"/> that adds the specified
            number of hours to the value of this instance.
            </summary>
            <param name="value">A number of whole and fractional hours. 
            The <paramref name="value"/> parameter can be negative or positive.</param>
            <returns>An object whose value is the sum of the date and time 
            represented by this instance and the number of hours represented by
            <paramref name="value"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The resulting <see cref="T:Cadru.UnixTimestamp"/> is less than 
            <see cref="F:Cadru.UnixTimestamp.MinValue"/> or greater than
            <see cref="F:Cadru.UnixTimestamp.MaxValue"/>.
            </exception>
        </member>
        <member name="M:Cadru.UnixTimestamp.AddMinutes(System.Double)">
            <summary>
            Returns a new <see cref="T:Cadru.UnixTimestamp"/> that adds the specified
            number of minutes to the value of this instance.
            </summary>
            <param name="value">A number of whole and fractional minutes. 
            The <paramref name="value"/> parameter can be negative or positive.</param>
            <returns>An object whose value is the sum of the date and time 
            represented by this instance and the number of minutes represented by
            <paramref name="value"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The resulting <see cref="T:Cadru.UnixTimestamp"/> is less than 
            <see cref="F:Cadru.UnixTimestamp.MinValue"/> or greater than
            <see cref="F:Cadru.UnixTimestamp.MaxValue"/>.
            </exception>
        </member>
        <member name="M:Cadru.UnixTimestamp.AddMonths(System.Int32)">
            <summary>
            Returns a new <see cref="T:Cadru.UnixTimestamp"/> that adds the specified
            number of months to the value of this instance.
            </summary>
            <param name="months">A number of months. 
            The <paramref name="months"/> parameter can be negative or positive.</param>
            <returns>An object whose value is the sum of the date and time 
            represented by this instance and the number of months represented by
            <paramref name="months"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The resulting <see cref="T:Cadru.UnixTimestamp"/> is less than 
            <see cref="F:Cadru.UnixTimestamp.MinValue"/> or greater than
            <see cref="F:Cadru.UnixTimestamp.MaxValue"/>.
            </exception>
        </member>
        <member name="M:Cadru.UnixTimestamp.AddSeconds(System.Double)">
            <summary>
            Returns a new <see cref="T:Cadru.UnixTimestamp"/> that adds the specified
            number of seconds to the value of this instance.
            </summary>
            <param name="value">A number of whole and fractional seconds. 
            The <paramref name="value"/> parameter can be negative or positive.</param>
            <returns>An object whose value is the sum of the date and time 
            represented by this instance and the number of seconds represented by
            <paramref name="value"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The resulting <see cref="T:Cadru.UnixTimestamp"/> is less than 
            <see cref="F:Cadru.UnixTimestamp.MinValue"/> or greater than
            <see cref="F:Cadru.UnixTimestamp.MaxValue"/>.
            </exception>
        </member>
        <member name="M:Cadru.UnixTimestamp.AddYears(System.Int32)">
            <summary>
            Returns a new <see cref="T:Cadru.UnixTimestamp"/> that adds the specified
            number of years to the value of this instance.
            </summary>
            <param name="years">A number of years. 
            The <paramref name="years"/> parameter can be negative or positive.</param>
            <returns>An object whose value is the sum of the date and time 
            represented by this instance and the number of years represented by
            <paramref name="years"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para>The resulting <see cref="T:Cadru.UnixTimestamp"/> is less than 
            <see cref="F:Cadru.UnixTimestamp.MinValue"/> or greater than
            <see cref="F:Cadru.UnixTimestamp.MaxValue"/>.</para>
            <para>-or-</para>
            <para><paramref name="years"/> is not in the valid range.</para>
            </exception>
        </member>
        <member name="M:Cadru.UnixTimestamp.CompareTo(System.Object)">
            <summary>
            Compares the value of this instance to a specified object that
            contains a specified <see cref="T:Cadru.UnixTimestamp"/> value, and returns
            an integer that indicates whether this instance is earlier than, 
            the same as, or later than the specified <see cref="T:Cadru.UnixTimestamp"/> value.
            </summary>
            <param name="obj">A boxed object to compare, or <see langword="null"/>.</param>
            <returns>
            A signed number indicating the relative values of this instance and the 
            <paramref name="obj"/> parameter.
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Condition</term>
            </listheader>
            <item>
            <term>Less than zero</term>
            <description>
            This instance is earlier than <paramref name="obj"/>.
            </description>
            </item>
            <item>
            <term>Zero</term>
            <description>
            This instance is the same as <paramref name="obj"/>.
            </description>
            </item>
            <item>
            <term>Greater than zero</term>
            <description>
            This instance is later than <paramref name="obj"/>,
            or <paramref name="obj"/> is <see langword="null"/>.
            </description>
            </item>
            </list>
            </returns>
            <exception cref="T:System.ArgumentException">
            <paramref name="obj"/> is not a <see cref="T:Cadru.UnixTimestamp"/>.
            </exception>
        </member>
        <member name="M:Cadru.UnixTimestamp.CompareTo(Cadru.UnixTimestamp)">
            <summary>
            Compares the value of this instance to a specified 
            <see cref="T:Cadru.UnixTimestamp"/> value and returns an integer that 
            indicates whether this instance is earlier than, the same as, or
            later than the specified <see cref="T:Cadru.UnixTimestamp"/> value. 
            </summary>
            <param name="other">The object to compare to the current instance.</param>
            <returns>
            A signed number indicating the relative values of this instance and the 
            <paramref name="other"/> parameter.
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Condition</term>
            </listheader>
            <item>
            <term>Less than zero</term>
            <description>
            This instance is earlier than <paramref name="other"/>.
            </description>
            </item>
            <item>
            <term>Zero</term>
            <description>
            This instance is the same as <paramref name="other"/>.
            </description>
            </item>
            <item>
            <term>Greater than zero</term>
            <description>
            This instance is later than <paramref name="other"/>.
            </description>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:Cadru.UnixTimestamp.Equals(System.Object)">
            <summary>
            Returns a value indicating whether the value of this instance is 
            equal to the value of the specified <see cref="T:Cadru.UnixTimestamp"/> 
            instance.
            </summary>
            <param name="obj">The object to compare to this instance.</param>
            <returns>
            <see langword="true"/> if the <paramref name="obj"/> parameter 
            equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
            <remarks>The current instance and <paramref name="obj"/> are equal 
            if their <see cref="P:Cadru.UnixTimestamp.Seconds"/> property values are equal.</remarks>
        </member>
        <member name="M:Cadru.UnixTimestamp.Equals(Cadru.UnixTimestamp)">
            <summary>
            Returns a value indicating whether the value of this instance is
            equal to the value of the specified <see cref="T:Cadru.UnixTimestamp"/>
            instance.
            </summary>
            <param name="other">The object to compare to this instance.</param>
            <returns>
            <see langword="true"/> if the <paramref name="other"/> parameter 
            equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
            <remarks>The current instance and <paramref name="other"/> are equal 
            if their <see cref="P:Cadru.UnixTimestamp.Seconds"/> property values are equal.</remarks>
        </member>
        <member name="M:Cadru.UnixTimestamp.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:Cadru.UnixTimestamp.GetTypeCode">
            <summary>
            Returns the <see cref="T:System.TypeCode" /> for this instance.
            </summary>
            <returns>
            The enumerated constant <see cref="T:System.TypeCode">TypeCode.Object</see>.
            </returns>
        </member>
        <member name="M:Cadru.UnixTimestamp.Subtract(Cadru.UnixTimestamp)">
            <summary>
            Subtracts the specified date and time from this instance.
            </summary>
            <param name="value">The date and time value to subtract.</param>
            <returns>A time interval that is equal to the date and time 
            represented by this instance minus the date and time represented
            by <paramref name="value"/>.</returns>
            <remarks>
            If the date and time of the current instance is earlier than value,
            the method returns a <see cref="T:System.TimeSpan"/> object that represents a
            negative time span. That is, the value of all of its non-zero properties
            (such as Days or Ticks) is negative.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The result is less than <see cref="F:Cadru.UnixTimestamp.MinValue"/> or greater than 
            <see cref="F:Cadru.UnixTimestamp.MaxValue"/>.</exception>
        </member>
        <member name="M:Cadru.UnixTimestamp.Subtract(System.TimeSpan)">
            <summary>
            Subtracts the specified duration from this instance.
            </summary>
            <param name="value">The time interval to subtract.</param>
            <returns>An object that is equal to the date and time represented
            by this instance minus the time interval represented by 
            <paramref name="value"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The result is less than <see cref="F:Cadru.UnixTimestamp.MinValue"/> or greater than 
            <see cref="F:Cadru.UnixTimestamp.MaxValue"/>.</exception>
        </member>
        <member name="M:Cadru.UnixTimestamp.ToString">
            <summary>
            Converts the value of the current <see cref="T:Cadru.UnixTimestamp"/>
            object to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of the current <see cref="T:Cadru.UnixTimestamp"/> object.
            </returns>
        </member>
        <member name="M:Cadru.UnixTimestamp.ToString(System.String,System.IFormatProvider)">
            <summary>
            Converts the value of the current <see cref="T:Cadru.UnixTimestamp"/>
            object to its equivalent string representation using the specified
            format and culture-specific format information.
            </summary>
            <param name="format">A numeric format string.</param>
            <param name="formatProvider">An object that supplies culture-specific formatting information.</param>
            <returns>
            A string representation of value of the current <see cref="T:Cadru.UnixTimestamp"/> object as specified by
            <paramref name="format"/> and <paramref name="formatProvider"/>.
            </returns>
            <exception cref="T:System.FormatException">
            <paramref name="format"/> is invalid or not supported.
            </exception>
        </member>
        <member name="M:Cadru.UnixTimestamp.System#IConvertible#ToBoolean(System.IFormatProvider)">
            <summary>
            Infrastructure. This conversion is not supported. Attempting to 
            use this method throws an <see cref="T:System.InvalidCastException"/>.
            </summary>
            <param name="provider">
            An object that implements the 
            <see cref="T:System.IFormatProvider"/> interface. 
            (This parameter is not used; specify <see langword="null"/>.)
            </param>
            <returns>
            The return value for this member is not used.
            </returns>
            <exception cref="T:System.InvalidCastException">In all cases.</exception>
        </member>
        <member name="M:Cadru.UnixTimestamp.System#IConvertible#ToByte(System.IFormatProvider)">
            <summary>
            Infrastructure. This conversion is not supported. Attempting to 
            use this method throws an <see cref="T:System.InvalidCastException"/>.
            </summary>
            <param name="provider">
            An object that implements the 
            <see cref="T:System.IFormatProvider"/> interface. 
            (This parameter is not used; specify <see langword="null"/>.)
            </param>
            <returns>
            The return value for this member is not used.
            </returns>
            <exception cref="T:System.InvalidCastException">In all cases.</exception>
        </member>
        <member name="M:Cadru.UnixTimestamp.System#IConvertible#ToChar(System.IFormatProvider)">
            <summary>
            Infrastructure. This conversion is not supported. Attempting to 
            use this method throws an <see cref="T:System.InvalidCastException"/>.
            </summary>
            <param name="provider">
            An object that implements the 
            <see cref="T:System.IFormatProvider"/> interface. 
            (This parameter is not used; specify <see langword="null"/>.)
            </param>
            <returns>
            The return value for this member is not used.
            </returns>
            <exception cref="T:System.InvalidCastException">In all cases.</exception>
        </member>
        <member name="M:Cadru.UnixTimestamp.System#IConvertible#ToDateTime(System.IFormatProvider)">
            <summary>
            Returns a <see cref="P:Cadru.UnixTimestamp.DateTime"/> object representing the current instance.
            </summary>
            <param name="provider">
            An object that implements the 
            <see cref="T:System.IFormatProvider"/> interface. 
            (This parameter is not used; specify <see langword="null"/>.)
            </param>
            <returns>
            A <see cref="T:System.DateTime"/> representing the current instance.
            </returns>
        </member>
        <member name="M:Cadru.UnixTimestamp.System#IConvertible#ToDecimal(System.IFormatProvider)">
            <summary>
            Infrastructure. This conversion is not supported. Attempting to 
            use this method throws an <see cref="T:System.InvalidCastException"/>.
            </summary>
            <param name="provider">
            An object that implements the 
            <see cref="T:System.IFormatProvider"/> interface. 
            (This parameter is not used; specify <see langword="null"/>.)
            </param>
            <returns>
            The return value for this member is not used.
            </returns>
            <exception cref="T:System.InvalidCastException">In all cases.</exception>
        </member>
        <member name="M:Cadru.UnixTimestamp.System#IConvertible#ToDouble(System.IFormatProvider)">
            <summary>
            Infrastructure. This conversion is not supported. Attempting to 
            use this method throws an <see cref="T:System.InvalidCastException"/>.
            </summary>
            <param name="provider">
            An object that implements the 
            <see cref="T:System.IFormatProvider"/> interface. 
            (This parameter is not used; specify <see langword="null"/>.)
            </param>
            <returns>
            The return value for this member is not used.
            </returns>
            <exception cref="T:System.InvalidCastException">In all cases.</exception>
        </member>
        <member name="M:Cadru.UnixTimestamp.System#IConvertible#ToInt16(System.IFormatProvider)">
            <summary>
            Infrastructure. This conversion is not supported. Attempting to 
            use this method throws an <see cref="T:System.InvalidCastException"/>.
            </summary>
            <param name="provider">
            An object that implements the 
            <see cref="T:System.IFormatProvider"/> interface. 
            (This parameter is not used; specify <see langword="null"/>.)
            </param>
            <returns>
            The return value for this member is not used.
            </returns>
            <exception cref="T:System.InvalidCastException">In all cases.</exception>
        </member>
        <member name="M:Cadru.UnixTimestamp.System#IConvertible#ToInt32(System.IFormatProvider)">
            <summary>
            Infrastructure. This conversion is not supported. Attempting to 
            use this method throws an <see cref="T:System.InvalidCastException"/>.
            </summary>
            <param name="provider">
            An object that implements the 
            <see cref="T:System.IFormatProvider"/> interface. 
            (This parameter is not used; specify <see langword="null"/>.)
            </param>
            <returns>
            The return value for this member is not used.
            </returns>
            <exception cref="T:System.InvalidCastException">In all cases.</exception>
        </member>
        <member name="M:Cadru.UnixTimestamp.System#IConvertible#ToInt64(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.Int64"/> representing the seconds of the current instance.
            </summary>
            <param name="provider">
            An object that implements the 
            <see cref="T:System.IFormatProvider" /> interface. 
            (This parameter is not used; specify <see langword="null"/>.)
            </param>
            <returns>
            A <see cref="T:System.Int64" /> representing the seconds of the current instance.
            </returns>
        </member>
        <member name="M:Cadru.UnixTimestamp.System#IConvertible#ToSByte(System.IFormatProvider)">
            <summary>
            Infrastructure. This conversion is not supported. Attempting to 
            use this method throws an <see cref="T:System.InvalidCastException"/>.
            </summary>
            <param name="provider">
            An object that implements the 
            <see cref="T:System.IFormatProvider"/> interface. 
            (This parameter is not used; specify <see langword="null"/>.)
            </param>
            <returns>
            The return value for this member is not used.
            </returns>
            <exception cref="T:System.InvalidCastException">In all cases.</exception>
        </member>
        <member name="M:Cadru.UnixTimestamp.System#IConvertible#ToSingle(System.IFormatProvider)">
            <summary>
            Infrastructure. This conversion is not supported. Attempting to 
            use this method throws an <see cref="T:System.InvalidCastException"/>.
            </summary>
            <param name="provider">
            An object that implements the 
            <see cref="T:System.IFormatProvider"/> interface. 
            (This parameter is not used; specify <see langword="null"/>.)
            </param>
            <returns>
            The return value for this member is not used.
            </returns>
            <exception cref="T:System.InvalidCastException">In all cases.</exception>
        </member>
        <member name="M:Cadru.UnixTimestamp.System#IConvertible#ToString(System.IFormatProvider)">
            <summary>
            Infrastructure. This conversion is not supported. Attempting to 
            use this method throws an <see cref="T:System.InvalidCastException"/>.
            </summary>
            <param name="provider">
            An object that implements the 
            <see cref="T:System.IFormatProvider"/> interface. 
            (This parameter is not used; specify <see langword="null"/>.)
            </param>
            <returns>
            The return value for this member is not used.
            </returns>
            <exception cref="T:System.InvalidCastException">In all cases.</exception>
        </member>
        <member name="M:Cadru.UnixTimestamp.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
            <summary>
            Converts the current <see cref="T:Cadru.UnixTimestamp"/> object to an object of a specified type.
            </summary>
            <param name="type">The desired type.</param>
            <param name="provider">
            An object that implements the 
            <see cref="T:System.IFormatProvider"/> interface. 
            (This parameter is not used; specify <see langword="null"/>.)
            </param>
            <returns>
            An object of the type specified by the <paramref name="type"/> parameter,
            with a value equivalent to the current <see cref="T:Cadru.UnixTimestamp"/> object.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="type"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.InvalidCastException">This conversion is not supported for the Da<see cref="T:Cadru.UnixTimestamp"/> type.</exception>
        </member>
        <member name="M:Cadru.UnixTimestamp.System#IConvertible#ToUInt16(System.IFormatProvider)">
            <summary>
            Infrastructure. This conversion is not supported. Attempting to 
            use this method throws an <see cref="T:System.InvalidCastException"/>.
            </summary>
            <param name="provider">
            An object that implements the 
            <see cref="T:System.IFormatProvider"/> interface. 
            (This parameter is not used; specify <see langword="null"/>.)
            </param>
            <returns>
            The return value for this member is not used.
            </returns>
            <exception cref="T:System.InvalidCastException">In all cases.</exception>
        </member>
        <member name="M:Cadru.UnixTimestamp.System#IConvertible#ToUInt32(System.IFormatProvider)">
            <summary>
            Infrastructure. This conversion is not supported. Attempting to 
            use this method throws an <see cref="T:System.InvalidCastException"/>.
            </summary>
            <param name="provider">
            An object that implements the 
            <see cref="T:System.IFormatProvider"/> interface. 
            (This parameter is not used; specify <see langword="null"/>.)
            </param>
            <returns>
            The return value for this member is not used.
            </returns>
            <exception cref="T:System.InvalidCastException">In all cases.</exception>
        </member>
        <member name="M:Cadru.UnixTimestamp.System#IConvertible#ToUInt64(System.IFormatProvider)">
            <summary>
            Infrastructure. This conversion is not supported. Attempting to 
            use this method throws an <see cref="T:System.InvalidCastException"/>.
            </summary>
            <param name="provider">
            An object that implements the 
            <see cref="T:System.IFormatProvider"/> interface. 
            (This parameter is not used; specify <see langword="null"/>.)
            </param>
            <returns>
            The return value for this member is not used.
            </returns>
            <exception cref="T:System.InvalidCastException">In all cases.</exception>
        </member>
        <member name="P:Cadru.UnixTimestamp.Now">
            <summary>
            Gets a <see cref="T:Cadru.UnixTimestamp"/> object that is set to the current date and time on this computer.
            </summary>
            <value>
            An object whose value is the current local date and time.
            </value>
        </member>
        <member name="P:Cadru.UnixTimestamp.DateTime">
            <summary>
            Gets a <see cref="P:Cadru.UnixTimestamp.DateTime"/> value that represents the date and 
            time of the current <see cref="T:Cadru.UnixTimestamp"/> object.
            </summary>
            <value>
            The date and time of the current <see cref="T:Cadru.UnixTimestamp"/> object.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The resulting <see cref="P:Cadru.UnixTimestamp.DateTime"/> is less than <see cref="P:DateTime.MinValue"/>
            or greater than <see cref="P:DateTime.MaxValue"/>.</exception>
        </member>
        <member name="P:Cadru.UnixTimestamp.Days">
            <summary>
            Gets the number of days since 00:00:00 Coordinated Universal Time (UTC), 
            Thursday, 1 January 1970 represented by current 
            <see cref="T:Cadru.UnixTimestamp"/>.
            </summary>
            <value>
            The number of days since 00:00:00 Coordinated Universal Time (UTC), 
            Thursday, 1 January 1970 represented by current 
            <see cref="T:Cadru.UnixTimestamp"/>.
            </value>
        </member>
        <member name="P:Cadru.UnixTimestamp.Seconds">
            <summary>
            Gets the number of seconds that represent the date and time of 
            this instance.
            </summary>
            <value>The number of seconds that represent the date and time of
            this instance. The value is between
            <see cref="P:UnixTimestamp.MinValue.Seconds"/> and 
            <see cref="P:UnixTimestamp.MaxValue.Seconds"/>.</value>
        </member>
        <member name="T:Cadru.WeakReference`1">
            <summary>
            Represents a weak reference, which references an object while still allowing
            that object to be reclaimed by garbage collection.
            </summary>
            <typeparam name="T">The type of object referenced.</typeparam>
        </member>
        <member name="M:Cadru.WeakReference`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Cadru.WeakReference`1"/> class, referencing
            the specified object.
            </summary>
            <param name="target">An object to track or <see langword="null"/>.</param>
        </member>
        <member name="M:Cadru.WeakReference`1.#ctor(`0,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Cadru.WeakReference`1"/> class, referencing
            the specified object and using the specified resurrection tracking.
            </summary>
            <param name="target">An object to track.</param>
            <param name="trackResurrection">Indicates when to stop tracking the object. 
            If <see langword="true"/>, the object is tracked after finalization; if 
            <see langword="false"/>, the object is only tracked until finalization.
            </param>
        </member>
        <member name="P:Cadru.WeakReference`1.Target">
            <summary>
            Gets or sets the object (the target) referenced by the current
            <see cref="T:Cadru.WeakReference`1"/> object.
            </summary>
            <value><see langword="null"/> if the object referenced by the current
            <see cref="T:Cadru.WeakReference`1"/> object has been garbage collected;
            otherwise, a reference to the object referenced by the current
            <see cref="T:Cadru.WeakReference`1"/> object.</value>
            <exception cref="T:System.InvalidOperationException">
            The reference to the target object is invalid. This exception can be thrown
            while setting this property if the value is a null reference or if the object
            has been finalized during the set operation.
            </exception>
        </member>
    </members>
</doc>
